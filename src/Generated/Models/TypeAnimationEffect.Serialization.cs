// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeAnimationEffectConverter))]
    public partial class TypeAnimationEffect : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("delay"u8);
            writer.WriteNumberValue(Delay);
            writer.WritePropertyName("endDelay"u8);
            writer.WriteNumberValue(EndDelay);
            writer.WritePropertyName("iterationStart"u8);
            writer.WriteNumberValue(IterationStart);
            writer.WritePropertyName("iterations"u8);
            writer.WriteNumberValue(Iterations);
            writer.WritePropertyName("duration"u8);
            writer.WriteNumberValue(Duration);
            writer.WritePropertyName("direction"u8);
            writer.WriteStringValue(Direction);
            writer.WritePropertyName("fill"u8);
            writer.WriteStringValue(Fill);
            if (Optional.IsDefined(BackendNodeId))
            {
                writer.WritePropertyName("backendNodeId"u8);
                writer.WriteNumberValue(BackendNodeId.Value);
            }
            if (Optional.IsDefined(KeyframesRule))
            {
                writer.WritePropertyName("keyframesRule"u8);
                writer.WriteObjectValue(KeyframesRule);
            }
            writer.WritePropertyName("easing"u8);
            writer.WriteStringValue(Easing);
            writer.WriteEndObject();
        }

        internal static TypeAnimationEffect DeserializeTypeAnimationEffect(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            float delay = default;
            float endDelay = default;
            float iterationStart = default;
            float iterations = default;
            float duration = default;
            string direction = default;
            string fill = default;
            Optional<int> backendNodeId = default;
            Optional<TypeKeyframesRule> keyframesRule = default;
            string easing = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("delay"u8))
                {
                    delay = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("endDelay"u8))
                {
                    endDelay = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("iterationStart"u8))
                {
                    iterationStart = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("iterations"u8))
                {
                    iterations = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("duration"u8))
                {
                    duration = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("direction"u8))
                {
                    direction = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fill"u8))
                {
                    fill = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("backendNodeId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    backendNodeId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("keyframesRule"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    keyframesRule = TypeKeyframesRule.DeserializeTypeKeyframesRule(property.Value);
                    continue;
                }
                if (property.NameEquals("easing"u8))
                {
                    easing = property.Value.GetString();
                    continue;
                }
            }
            return new TypeAnimationEffect(delay, endDelay, iterationStart, iterations, duration, direction, fill, Optional.ToNullable(backendNodeId), keyframesRule.Value, easing);
        }

        internal partial class TypeAnimationEffectConverter : JsonConverter<TypeAnimationEffect>
        {
            public override void Write(Utf8JsonWriter writer, TypeAnimationEffect model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeAnimationEffect Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeAnimationEffect(document.RootElement);
            }
        }
    }
}
