// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypePlayerErrorConverter))]
    public partial class TypePlayerError : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("errorType"u8);
            writer.WriteStringValue(ErrorType);
            writer.WritePropertyName("code"u8);
            writer.WriteNumberValue(Code);
            writer.WritePropertyName("stack"u8);
            writer.WriteStartArray();
            foreach (var item in Stack)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("cause"u8);
            writer.WriteStartArray();
            foreach (var item in Cause)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("data"u8);
            writer.WriteObjectValue(Data);
            writer.WriteEndObject();
        }

        internal static TypePlayerError DeserializeTypePlayerError(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string errorType = default;
            int code = default;
            IList<TypePlayerErrorSourceLocation> stack = default;
            IList<TypePlayerError> cause = default;
            object data = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("errorType"u8))
                {
                    errorType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("code"u8))
                {
                    code = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("stack"u8))
                {
                    List<TypePlayerErrorSourceLocation> array = new List<TypePlayerErrorSourceLocation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypePlayerErrorSourceLocation.DeserializeTypePlayerErrorSourceLocation(item));
                    }
                    stack = array;
                    continue;
                }
                if (property.NameEquals("cause"u8))
                {
                    List<TypePlayerError> array = new List<TypePlayerError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeTypePlayerError(item));
                    }
                    cause = array;
                    continue;
                }
                if (property.NameEquals("data"u8))
                {
                    data = property.Value.GetObject();
                    continue;
                }
            }
            return new TypePlayerError(errorType, code, stack, cause, data);
        }

        internal partial class TypePlayerErrorConverter : JsonConverter<TypePlayerError>
        {
            public override void Write(Utf8JsonWriter writer, TypePlayerError model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypePlayerError Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypePlayerError(document.RootElement);
            }
        }
    }
}
