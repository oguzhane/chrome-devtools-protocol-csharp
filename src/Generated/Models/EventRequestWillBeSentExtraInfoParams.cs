// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// Fired when additional information about a requestWillBeSent event is available from the
    /// network stack. Not every requestWillBeSent event will have an additional
    /// requestWillBeSentExtraInfo fired for it, and there is no guarantee whether requestWillBeSent
    /// or requestWillBeSentExtraInfo will be fired first for the same request.
    /// </summary>
    public partial class EventRequestWillBeSentExtraInfoParams
    {
        /// <summary> Initializes a new instance of EventRequestWillBeSentExtraInfoParams. </summary>
        /// <param name="requestId"> Request identifier. Used to match this information to an existing requestWillBeSent event. </param>
        /// <param name="associatedCookies">
        /// A list of cookies potentially associated to the requested URL. This includes both cookies sent with
        /// the request and the ones not sent; the latter are distinguished by having blockedReason field set.
        /// </param>
        /// <param name="headers"> Raw request headers as they will be sent over the wire. </param>
        /// <param name="connectTiming"> Connection timing information for the request. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestId"/>, <paramref name="associatedCookies"/>, <paramref name="headers"/> or <paramref name="connectTiming"/> is null. </exception>
        public EventRequestWillBeSentExtraInfoParams(string requestId, IEnumerable<TypeBlockedCookieWithReason> associatedCookies, object headers, TypeConnectTiming connectTiming)
        {
            Argument.AssertNotNull(requestId, nameof(requestId));
            Argument.AssertNotNull(associatedCookies, nameof(associatedCookies));
            Argument.AssertNotNull(headers, nameof(headers));
            Argument.AssertNotNull(connectTiming, nameof(connectTiming));

            RequestId = requestId;
            AssociatedCookies = associatedCookies.ToList();
            Headers = headers;
            ConnectTiming = connectTiming;
        }

        /// <summary> Initializes a new instance of EventRequestWillBeSentExtraInfoParams. </summary>
        /// <param name="requestId"> Request identifier. Used to match this information to an existing requestWillBeSent event. </param>
        /// <param name="associatedCookies">
        /// A list of cookies potentially associated to the requested URL. This includes both cookies sent with
        /// the request and the ones not sent; the latter are distinguished by having blockedReason field set.
        /// </param>
        /// <param name="headers"> Raw request headers as they will be sent over the wire. </param>
        /// <param name="connectTiming"> Connection timing information for the request. </param>
        /// <param name="clientSecurityState"> The client security state set for the request. </param>
        /// <param name="siteHasCookieInOtherPartition"> Whether the site has partitioned cookies stored in a partition different than the current one. </param>
        internal EventRequestWillBeSentExtraInfoParams(string requestId, IList<TypeBlockedCookieWithReason> associatedCookies, object headers, TypeConnectTiming connectTiming, TypeClientSecurityState clientSecurityState, bool? siteHasCookieInOtherPartition)
        {
            RequestId = requestId;
            AssociatedCookies = associatedCookies;
            Headers = headers;
            ConnectTiming = connectTiming;
            ClientSecurityState = clientSecurityState;
            SiteHasCookieInOtherPartition = siteHasCookieInOtherPartition;
        }

        /// <summary> Request identifier. Used to match this information to an existing requestWillBeSent event. </summary>
        public string RequestId { get; set; }
        /// <summary>
        /// A list of cookies potentially associated to the requested URL. This includes both cookies sent with
        /// the request and the ones not sent; the latter are distinguished by having blockedReason field set.
        /// </summary>
        public IList<TypeBlockedCookieWithReason> AssociatedCookies { get; }
        /// <summary> Raw request headers as they will be sent over the wire. </summary>
        public object Headers { get; set; }
        /// <summary> Connection timing information for the request. </summary>
        public TypeConnectTiming ConnectTiming { get; set; }
        /// <summary> The client security state set for the request. </summary>
        public TypeClientSecurityState ClientSecurityState { get; set; }
        /// <summary> Whether the site has partitioned cookies stored in a partition different than the current one. </summary>
        public bool? SiteHasCookieInOtherPartition { get; set; }
    }
}
