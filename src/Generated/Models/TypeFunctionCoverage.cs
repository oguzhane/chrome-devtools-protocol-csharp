// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> Coverage data for a JavaScript function. </summary>
    public partial class TypeFunctionCoverage
    {
        /// <summary> Initializes a new instance of TypeFunctionCoverage. </summary>
        /// <param name="functionName"> JavaScript function name. </param>
        /// <param name="ranges"> Source ranges inside the function with coverage data. </param>
        /// <param name="isBlockCoverage"> Whether coverage data for this function has block granularity. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="functionName"/> or <paramref name="ranges"/> is null. </exception>
        public TypeFunctionCoverage(string functionName, IEnumerable<TypeCoverageRange> ranges, bool isBlockCoverage)
        {
            Argument.AssertNotNull(functionName, nameof(functionName));
            Argument.AssertNotNull(ranges, nameof(ranges));

            FunctionName = functionName;
            Ranges = ranges.ToList();
            IsBlockCoverage = isBlockCoverage;
        }

        /// <summary> Initializes a new instance of TypeFunctionCoverage. </summary>
        /// <param name="functionName"> JavaScript function name. </param>
        /// <param name="ranges"> Source ranges inside the function with coverage data. </param>
        /// <param name="isBlockCoverage"> Whether coverage data for this function has block granularity. </param>
        internal TypeFunctionCoverage(string functionName, IList<TypeCoverageRange> ranges, bool isBlockCoverage)
        {
            FunctionName = functionName;
            Ranges = ranges;
            IsBlockCoverage = isBlockCoverage;
        }

        /// <summary> JavaScript function name. </summary>
        public string FunctionName { get; set; }
        /// <summary> Source ranges inside the function with coverage data. </summary>
        public IList<TypeCoverageRange> Ranges { get; }
        /// <summary> Whether coverage data for this function has block granularity. </summary>
        public bool IsBlockCoverage { get; set; }
    }
}
