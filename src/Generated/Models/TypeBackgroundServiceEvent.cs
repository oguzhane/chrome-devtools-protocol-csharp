// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> The TypeBackgroundServiceEvent. </summary>
    public partial class TypeBackgroundServiceEvent
    {
        /// <summary> Initializes a new instance of TypeBackgroundServiceEvent. </summary>
        /// <param name="timestamp"> Timestamp of the event (in seconds). </param>
        /// <param name="origin"> The origin this event belongs to. </param>
        /// <param name="serviceWorkerRegistrationId"> The Service Worker ID that initiated the event. </param>
        /// <param name="service"> The Background Service this event belongs to. </param>
        /// <param name="eventName"> A description of the event. </param>
        /// <param name="instanceId"> An identifier that groups related events together. </param>
        /// <param name="eventMetadata"> A list of event-specific information. </param>
        /// <param name="storageKey"> Storage key this event belongs to. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="origin"/>, <paramref name="serviceWorkerRegistrationId"/>, <paramref name="service"/>, <paramref name="eventName"/>, <paramref name="instanceId"/>, <paramref name="eventMetadata"/> or <paramref name="storageKey"/> is null. </exception>
        public TypeBackgroundServiceEvent(float timestamp, string origin, string serviceWorkerRegistrationId, string service, string eventName, string instanceId, IEnumerable<TypeEventMetadata> eventMetadata, string storageKey)
        {
            Argument.AssertNotNull(origin, nameof(origin));
            Argument.AssertNotNull(serviceWorkerRegistrationId, nameof(serviceWorkerRegistrationId));
            Argument.AssertNotNull(service, nameof(service));
            Argument.AssertNotNull(eventName, nameof(eventName));
            Argument.AssertNotNull(instanceId, nameof(instanceId));
            Argument.AssertNotNull(eventMetadata, nameof(eventMetadata));
            Argument.AssertNotNull(storageKey, nameof(storageKey));

            Timestamp = timestamp;
            Origin = origin;
            ServiceWorkerRegistrationId = serviceWorkerRegistrationId;
            Service = service;
            EventName = eventName;
            InstanceId = instanceId;
            EventMetadata = eventMetadata.ToList();
            StorageKey = storageKey;
        }

        /// <summary> Initializes a new instance of TypeBackgroundServiceEvent. </summary>
        /// <param name="timestamp"> Timestamp of the event (in seconds). </param>
        /// <param name="origin"> The origin this event belongs to. </param>
        /// <param name="serviceWorkerRegistrationId"> The Service Worker ID that initiated the event. </param>
        /// <param name="service"> The Background Service this event belongs to. </param>
        /// <param name="eventName"> A description of the event. </param>
        /// <param name="instanceId"> An identifier that groups related events together. </param>
        /// <param name="eventMetadata"> A list of event-specific information. </param>
        /// <param name="storageKey"> Storage key this event belongs to. </param>
        internal TypeBackgroundServiceEvent(float timestamp, string origin, string serviceWorkerRegistrationId, string service, string eventName, string instanceId, IList<TypeEventMetadata> eventMetadata, string storageKey)
        {
            Timestamp = timestamp;
            Origin = origin;
            ServiceWorkerRegistrationId = serviceWorkerRegistrationId;
            Service = service;
            EventName = eventName;
            InstanceId = instanceId;
            EventMetadata = eventMetadata;
            StorageKey = storageKey;
        }

        /// <summary> Timestamp of the event (in seconds). </summary>
        public float Timestamp { get; set; }
        /// <summary> The origin this event belongs to. </summary>
        public string Origin { get; set; }
        /// <summary> The Service Worker ID that initiated the event. </summary>
        public string ServiceWorkerRegistrationId { get; set; }
        /// <summary> The Background Service this event belongs to. </summary>
        public string Service { get; set; }
        /// <summary> A description of the event. </summary>
        public string EventName { get; set; }
        /// <summary> An identifier that groups related events together. </summary>
        public string InstanceId { get; set; }
        /// <summary> A list of event-specific information. </summary>
        public IList<TypeEventMetadata> EventMetadata { get; }
        /// <summary> Storage key this event belongs to. </summary>
        public string StorageKey { get; set; }
    }
}
