// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventSecurityStateChangedParamsConverter))]
    public partial class EventSecurityStateChangedParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("securityState"u8);
            writer.WriteStringValue(SecurityState);
            writer.WritePropertyName("schemeIsCryptographic"u8);
            writer.WriteBooleanValue(SchemeIsCryptographic);
            writer.WritePropertyName("explanations"u8);
            writer.WriteStartArray();
            foreach (var item in Explanations)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("insecureContentStatus"u8);
            writer.WriteObjectValue(InsecureContentStatus);
            if (Optional.IsDefined(Summary))
            {
                writer.WritePropertyName("summary"u8);
                writer.WriteStringValue(Summary);
            }
            writer.WriteEndObject();
        }

        internal static EventSecurityStateChangedParams DeserializeEventSecurityStateChangedParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string securityState = default;
            bool schemeIsCryptographic = default;
            IList<TypeSecurityStateExplanation> explanations = default;
            TypeInsecureContentStatus insecureContentStatus = default;
            Optional<string> summary = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("securityState"u8))
                {
                    securityState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("schemeIsCryptographic"u8))
                {
                    schemeIsCryptographic = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("explanations"u8))
                {
                    List<TypeSecurityStateExplanation> array = new List<TypeSecurityStateExplanation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeSecurityStateExplanation.DeserializeTypeSecurityStateExplanation(item));
                    }
                    explanations = array;
                    continue;
                }
                if (property.NameEquals("insecureContentStatus"u8))
                {
                    insecureContentStatus = TypeInsecureContentStatus.DeserializeTypeInsecureContentStatus(property.Value);
                    continue;
                }
                if (property.NameEquals("summary"u8))
                {
                    summary = property.Value.GetString();
                    continue;
                }
            }
            return new EventSecurityStateChangedParams(securityState, schemeIsCryptographic, explanations, insecureContentStatus, summary.Value);
        }

        internal partial class EventSecurityStateChangedParamsConverter : JsonConverter<EventSecurityStateChangedParams>
        {
            public override void Write(Utf8JsonWriter writer, EventSecurityStateChangedParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventSecurityStateChangedParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventSecurityStateChangedParams(document.RootElement);
            }
        }
    }
}
