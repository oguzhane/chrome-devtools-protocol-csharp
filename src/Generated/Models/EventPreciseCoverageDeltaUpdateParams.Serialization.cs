// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventPreciseCoverageDeltaUpdateParamsConverter))]
    public partial class EventPreciseCoverageDeltaUpdateParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("timestamp"u8);
            writer.WriteNumberValue(Timestamp);
            writer.WritePropertyName("occasion"u8);
            writer.WriteStringValue(Occasion);
            writer.WritePropertyName("result"u8);
            writer.WriteStartArray();
            foreach (var item in Result)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static EventPreciseCoverageDeltaUpdateParams DeserializeEventPreciseCoverageDeltaUpdateParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            float timestamp = default;
            string occasion = default;
            IList<TypeScriptCoverage> result = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("timestamp"u8))
                {
                    timestamp = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("occasion"u8))
                {
                    occasion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("result"u8))
                {
                    List<TypeScriptCoverage> array = new List<TypeScriptCoverage>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeScriptCoverage.DeserializeTypeScriptCoverage(item));
                    }
                    result = array;
                    continue;
                }
            }
            return new EventPreciseCoverageDeltaUpdateParams(timestamp, occasion, result);
        }

        internal partial class EventPreciseCoverageDeltaUpdateParamsConverter : JsonConverter<EventPreciseCoverageDeltaUpdateParams>
        {
            public override void Write(Utf8JsonWriter writer, EventPreciseCoverageDeltaUpdateParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventPreciseCoverageDeltaUpdateParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventPreciseCoverageDeltaUpdateParams(document.RootElement);
            }
        }
    }
}
