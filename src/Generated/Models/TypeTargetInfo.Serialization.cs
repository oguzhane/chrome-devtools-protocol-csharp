// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeTargetInfoConverter))]
    public partial class TypeTargetInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("targetId"u8);
            writer.WriteStringValue(TargetId);
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            writer.WritePropertyName("title"u8);
            writer.WriteStringValue(Title);
            writer.WritePropertyName("url"u8);
            writer.WriteStringValue(Url);
            writer.WritePropertyName("attached"u8);
            writer.WriteBooleanValue(Attached);
            if (Optional.IsDefined(OpenerId))
            {
                writer.WritePropertyName("openerId"u8);
                writer.WriteStringValue(OpenerId);
            }
            writer.WritePropertyName("canAccessOpener"u8);
            writer.WriteBooleanValue(CanAccessOpener);
            if (Optional.IsDefined(OpenerFrameId))
            {
                writer.WritePropertyName("openerFrameId"u8);
                writer.WriteStringValue(OpenerFrameId);
            }
            if (Optional.IsDefined(BrowserContextId))
            {
                writer.WritePropertyName("browserContextId"u8);
                writer.WriteStringValue(BrowserContextId);
            }
            if (Optional.IsDefined(Subtype))
            {
                writer.WritePropertyName("subtype"u8);
                writer.WriteStringValue(Subtype);
            }
            writer.WriteEndObject();
        }

        internal static TypeTargetInfo DeserializeTypeTargetInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string targetId = default;
            string type = default;
            string title = default;
            string url = default;
            bool attached = default;
            Optional<string> openerId = default;
            bool canAccessOpener = default;
            Optional<string> openerFrameId = default;
            Optional<string> browserContextId = default;
            Optional<string> subtype = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetId"u8))
                {
                    targetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("attached"u8))
                {
                    attached = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("openerId"u8))
                {
                    openerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("canAccessOpener"u8))
                {
                    canAccessOpener = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("openerFrameId"u8))
                {
                    openerFrameId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("browserContextId"u8))
                {
                    browserContextId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subtype"u8))
                {
                    subtype = property.Value.GetString();
                    continue;
                }
            }
            return new TypeTargetInfo(targetId, type, title, url, attached, openerId.Value, canAccessOpener, openerFrameId.Value, browserContextId.Value, subtype.Value);
        }

        internal partial class TypeTargetInfoConverter : JsonConverter<TypeTargetInfo>
        {
            public override void Write(Utf8JsonWriter writer, TypeTargetInfo model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeTargetInfo Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeTargetInfo(document.RootElement);
            }
        }
    }
}
