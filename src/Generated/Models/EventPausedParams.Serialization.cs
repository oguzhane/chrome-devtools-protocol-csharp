// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventPausedParamsConverter))]
    public partial class EventPausedParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("callFrames"u8);
            writer.WriteStartArray();
            foreach (var item in CallFrames)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("reason"u8);
            writer.WriteStringValue(Reason);
            if (Optional.IsDefined(Data))
            {
                writer.WritePropertyName("data"u8);
                writer.WriteObjectValue(Data);
            }
            if (Optional.IsCollectionDefined(HitBreakpoints))
            {
                writer.WritePropertyName("hitBreakpoints"u8);
                writer.WriteStartArray();
                foreach (var item in HitBreakpoints)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AsyncStackTrace))
            {
                writer.WritePropertyName("asyncStackTrace"u8);
                writer.WriteObjectValue(AsyncStackTrace);
            }
            if (Optional.IsDefined(AsyncStackTraceId))
            {
                writer.WritePropertyName("asyncStackTraceId"u8);
                writer.WriteObjectValue(AsyncStackTraceId);
            }
            if (Optional.IsDefined(AsyncCallStackTraceId))
            {
                writer.WritePropertyName("asyncCallStackTraceId"u8);
                writer.WriteObjectValue(AsyncCallStackTraceId);
            }
            writer.WriteEndObject();
        }

        internal static EventPausedParams DeserializeEventPausedParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<TypeCallFrame> callFrames = default;
            string reason = default;
            Optional<object> data = default;
            Optional<IList<string>> hitBreakpoints = default;
            Optional<TypeStackTrace> asyncStackTrace = default;
            Optional<TypeStackTraceId> asyncStackTraceId = default;
            Optional<TypeStackTraceId> asyncCallStackTraceId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("callFrames"u8))
                {
                    List<TypeCallFrame> array = new List<TypeCallFrame>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeCallFrame.DeserializeTypeCallFrame(item));
                    }
                    callFrames = array;
                    continue;
                }
                if (property.NameEquals("reason"u8))
                {
                    reason = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("data"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    data = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("hitBreakpoints"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    hitBreakpoints = array;
                    continue;
                }
                if (property.NameEquals("asyncStackTrace"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    asyncStackTrace = TypeStackTrace.DeserializeTypeStackTrace(property.Value);
                    continue;
                }
                if (property.NameEquals("asyncStackTraceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    asyncStackTraceId = TypeStackTraceId.DeserializeTypeStackTraceId(property.Value);
                    continue;
                }
                if (property.NameEquals("asyncCallStackTraceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    asyncCallStackTraceId = TypeStackTraceId.DeserializeTypeStackTraceId(property.Value);
                    continue;
                }
            }
            return new EventPausedParams(callFrames, reason, data.Value, Optional.ToList(hitBreakpoints), asyncStackTrace.Value, asyncStackTraceId.Value, asyncCallStackTraceId.Value);
        }

        internal partial class EventPausedParamsConverter : JsonConverter<EventPausedParams>
        {
            public override void Write(Utf8JsonWriter writer, EventPausedParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventPausedParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventPausedParams(document.RootElement);
            }
        }
    }
}
