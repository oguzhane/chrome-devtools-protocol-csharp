// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventPrerenderAttemptCompletedParamsConverter))]
    public partial class EventPrerenderAttemptCompletedParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("initiatingFrameId"u8);
            writer.WriteStringValue(InitiatingFrameId);
            writer.WritePropertyName("prerenderingUrl"u8);
            writer.WriteStringValue(PrerenderingUrl);
            writer.WritePropertyName("finalStatus"u8);
            writer.WriteStringValue(FinalStatus);
            if (Optional.IsDefined(DisallowedApiMethod))
            {
                writer.WritePropertyName("disallowedApiMethod"u8);
                writer.WriteStringValue(DisallowedApiMethod);
            }
            writer.WriteEndObject();
        }

        internal static EventPrerenderAttemptCompletedParams DeserializeEventPrerenderAttemptCompletedParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string initiatingFrameId = default;
            string prerenderingUrl = default;
            string finalStatus = default;
            Optional<string> disallowedApiMethod = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("initiatingFrameId"u8))
                {
                    initiatingFrameId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("prerenderingUrl"u8))
                {
                    prerenderingUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("finalStatus"u8))
                {
                    finalStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("disallowedApiMethod"u8))
                {
                    disallowedApiMethod = property.Value.GetString();
                    continue;
                }
            }
            return new EventPrerenderAttemptCompletedParams(initiatingFrameId, prerenderingUrl, finalStatus, disallowedApiMethod.Value);
        }

        internal partial class EventPrerenderAttemptCompletedParamsConverter : JsonConverter<EventPrerenderAttemptCompletedParams>
        {
            public override void Write(Utf8JsonWriter writer, EventPrerenderAttemptCompletedParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventPrerenderAttemptCompletedParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventPrerenderAttemptCompletedParams(document.RootElement);
            }
        }
    }
}
