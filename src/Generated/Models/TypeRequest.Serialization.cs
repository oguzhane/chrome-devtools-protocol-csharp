// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeRequestConverter))]
    public partial class TypeRequest : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("url"u8);
            writer.WriteStringValue(Url);
            if (Optional.IsDefined(UrlFragment))
            {
                writer.WritePropertyName("urlFragment"u8);
                writer.WriteStringValue(UrlFragment);
            }
            writer.WritePropertyName("method"u8);
            writer.WriteStringValue(Method);
            writer.WritePropertyName("headers"u8);
            writer.WriteObjectValue(Headers);
            if (Optional.IsDefined(PostData))
            {
                writer.WritePropertyName("postData"u8);
                writer.WriteStringValue(PostData);
            }
            if (Optional.IsDefined(HasPostData))
            {
                writer.WritePropertyName("hasPostData"u8);
                writer.WriteBooleanValue(HasPostData.Value);
            }
            if (Optional.IsCollectionDefined(PostDataEntries))
            {
                writer.WritePropertyName("postDataEntries"u8);
                writer.WriteStartArray();
                foreach (var item in PostDataEntries)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(MixedContentType))
            {
                writer.WritePropertyName("mixedContentType"u8);
                writer.WriteStringValue(MixedContentType);
            }
            writer.WritePropertyName("initialPriority"u8);
            writer.WriteStringValue(InitialPriority);
            writer.WritePropertyName("referrerPolicy"u8);
            writer.WriteStringValue(ReferrerPolicy);
            if (Optional.IsDefined(IsLinkPreload))
            {
                writer.WritePropertyName("isLinkPreload"u8);
                writer.WriteBooleanValue(IsLinkPreload.Value);
            }
            if (Optional.IsDefined(TrustTokenParams))
            {
                writer.WritePropertyName("trustTokenParams"u8);
                writer.WriteObjectValue(TrustTokenParams);
            }
            if (Optional.IsDefined(IsSameSite))
            {
                writer.WritePropertyName("isSameSite"u8);
                writer.WriteBooleanValue(IsSameSite.Value);
            }
            writer.WriteEndObject();
        }

        internal static TypeRequest DeserializeTypeRequest(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string url = default;
            Optional<string> urlFragment = default;
            string method = default;
            object headers = default;
            Optional<string> postData = default;
            Optional<bool> hasPostData = default;
            Optional<IList<TypePostDataEntry>> postDataEntries = default;
            Optional<string> mixedContentType = default;
            string initialPriority = default;
            string referrerPolicy = default;
            Optional<bool> isLinkPreload = default;
            Optional<TypeTrustTokenParams> trustTokenParams = default;
            Optional<bool> isSameSite = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("urlFragment"u8))
                {
                    urlFragment = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("method"u8))
                {
                    method = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("headers"u8))
                {
                    headers = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("postData"u8))
                {
                    postData = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hasPostData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hasPostData = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("postDataEntries"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypePostDataEntry> array = new List<TypePostDataEntry>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypePostDataEntry.DeserializeTypePostDataEntry(item));
                    }
                    postDataEntries = array;
                    continue;
                }
                if (property.NameEquals("mixedContentType"u8))
                {
                    mixedContentType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("initialPriority"u8))
                {
                    initialPriority = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("referrerPolicy"u8))
                {
                    referrerPolicy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isLinkPreload"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isLinkPreload = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("trustTokenParams"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    trustTokenParams = TypeTrustTokenParams.DeserializeTypeTrustTokenParams(property.Value);
                    continue;
                }
                if (property.NameEquals("isSameSite"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isSameSite = property.Value.GetBoolean();
                    continue;
                }
            }
            return new TypeRequest(url, urlFragment.Value, method, headers, postData.Value, Optional.ToNullable(hasPostData), Optional.ToList(postDataEntries), mixedContentType.Value, initialPriority, referrerPolicy, Optional.ToNullable(isLinkPreload), trustTokenParams.Value, Optional.ToNullable(isSameSite));
        }

        internal partial class TypeRequestConverter : JsonConverter<TypeRequest>
        {
            public override void Write(Utf8JsonWriter writer, TypeRequest model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeRequest Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeRequest(document.RootElement);
            }
        }
    }
}
