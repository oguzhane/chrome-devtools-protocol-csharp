// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeBackgroundServiceEventConverter))]
    public partial class TypeBackgroundServiceEvent : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("timestamp"u8);
            writer.WriteNumberValue(Timestamp);
            writer.WritePropertyName("origin"u8);
            writer.WriteStringValue(Origin);
            writer.WritePropertyName("serviceWorkerRegistrationId"u8);
            writer.WriteStringValue(ServiceWorkerRegistrationId);
            writer.WritePropertyName("service"u8);
            writer.WriteStringValue(Service);
            writer.WritePropertyName("eventName"u8);
            writer.WriteStringValue(EventName);
            writer.WritePropertyName("instanceId"u8);
            writer.WriteStringValue(InstanceId);
            writer.WritePropertyName("eventMetadata"u8);
            writer.WriteStartArray();
            foreach (var item in EventMetadata)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("storageKey"u8);
            writer.WriteStringValue(StorageKey);
            writer.WriteEndObject();
        }

        internal static TypeBackgroundServiceEvent DeserializeTypeBackgroundServiceEvent(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            float timestamp = default;
            string origin = default;
            string serviceWorkerRegistrationId = default;
            string service = default;
            string eventName = default;
            string instanceId = default;
            IList<TypeEventMetadata> eventMetadata = default;
            string storageKey = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("timestamp"u8))
                {
                    timestamp = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("origin"u8))
                {
                    origin = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serviceWorkerRegistrationId"u8))
                {
                    serviceWorkerRegistrationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("service"u8))
                {
                    service = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eventName"u8))
                {
                    eventName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("instanceId"u8))
                {
                    instanceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eventMetadata"u8))
                {
                    List<TypeEventMetadata> array = new List<TypeEventMetadata>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeEventMetadata.DeserializeTypeEventMetadata(item));
                    }
                    eventMetadata = array;
                    continue;
                }
                if (property.NameEquals("storageKey"u8))
                {
                    storageKey = property.Value.GetString();
                    continue;
                }
            }
            return new TypeBackgroundServiceEvent(timestamp, origin, serviceWorkerRegistrationId, service, eventName, instanceId, eventMetadata, storageKey);
        }

        internal partial class TypeBackgroundServiceEventConverter : JsonConverter<TypeBackgroundServiceEvent>
        {
            public override void Write(Utf8JsonWriter writer, TypeBackgroundServiceEvent model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeBackgroundServiceEvent Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeBackgroundServiceEvent(document.RootElement);
            }
        }
    }
}
