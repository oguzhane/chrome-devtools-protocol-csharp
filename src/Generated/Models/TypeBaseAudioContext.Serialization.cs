// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeBaseAudioContextConverter))]
    public partial class TypeBaseAudioContext : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("contextId"u8);
            writer.WriteStringValue(ContextId);
            writer.WritePropertyName("contextType"u8);
            writer.WriteStringValue(ContextType);
            writer.WritePropertyName("contextState"u8);
            writer.WriteStringValue(ContextState);
            if (Optional.IsDefined(RealtimeData))
            {
                writer.WritePropertyName("realtimeData"u8);
                writer.WriteObjectValue(RealtimeData);
            }
            writer.WritePropertyName("callbackBufferSize"u8);
            writer.WriteNumberValue(CallbackBufferSize);
            writer.WritePropertyName("maxOutputChannelCount"u8);
            writer.WriteNumberValue(MaxOutputChannelCount);
            writer.WritePropertyName("sampleRate"u8);
            writer.WriteNumberValue(SampleRate);
            writer.WriteEndObject();
        }

        internal static TypeBaseAudioContext DeserializeTypeBaseAudioContext(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string contextId = default;
            string contextType = default;
            string contextState = default;
            Optional<TypeContextRealtimeData> realtimeData = default;
            float callbackBufferSize = default;
            float maxOutputChannelCount = default;
            float sampleRate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("contextId"u8))
                {
                    contextId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("contextType"u8))
                {
                    contextType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("contextState"u8))
                {
                    contextState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("realtimeData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    realtimeData = TypeContextRealtimeData.DeserializeTypeContextRealtimeData(property.Value);
                    continue;
                }
                if (property.NameEquals("callbackBufferSize"u8))
                {
                    callbackBufferSize = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("maxOutputChannelCount"u8))
                {
                    maxOutputChannelCount = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("sampleRate"u8))
                {
                    sampleRate = property.Value.GetSingle();
                    continue;
                }
            }
            return new TypeBaseAudioContext(contextId, contextType, contextState, realtimeData.Value, callbackBufferSize, maxOutputChannelCount, sampleRate);
        }

        internal partial class TypeBaseAudioContextConverter : JsonConverter<TypeBaseAudioContext>
        {
            public override void Write(Utf8JsonWriter writer, TypeBaseAudioContext model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeBaseAudioContext Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeBaseAudioContext(document.RootElement);
            }
        }
    }
}
