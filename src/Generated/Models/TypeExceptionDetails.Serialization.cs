// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeExceptionDetailsConverter))]
    public partial class TypeExceptionDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("exceptionId"u8);
            writer.WriteNumberValue(ExceptionId);
            writer.WritePropertyName("text"u8);
            writer.WriteStringValue(Text);
            writer.WritePropertyName("lineNumber"u8);
            writer.WriteNumberValue(LineNumber);
            writer.WritePropertyName("columnNumber"u8);
            writer.WriteNumberValue(ColumnNumber);
            if (Optional.IsDefined(ScriptId))
            {
                writer.WritePropertyName("scriptId"u8);
                writer.WriteStringValue(ScriptId);
            }
            if (Optional.IsDefined(Url))
            {
                writer.WritePropertyName("url"u8);
                writer.WriteStringValue(Url);
            }
            if (Optional.IsDefined(StackTrace))
            {
                writer.WritePropertyName("stackTrace"u8);
                writer.WriteObjectValue(StackTrace);
            }
            if (Optional.IsDefined(Exception))
            {
                writer.WritePropertyName("exception"u8);
                writer.WriteObjectValue(Exception);
            }
            if (Optional.IsDefined(ExecutionContextId))
            {
                writer.WritePropertyName("executionContextId"u8);
                writer.WriteNumberValue(ExecutionContextId.Value);
            }
            if (Optional.IsDefined(ExceptionMetaData))
            {
                writer.WritePropertyName("exceptionMetaData"u8);
                writer.WriteObjectValue(ExceptionMetaData);
            }
            writer.WriteEndObject();
        }

        internal static TypeExceptionDetails DeserializeTypeExceptionDetails(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int exceptionId = default;
            string text = default;
            int lineNumber = default;
            int columnNumber = default;
            Optional<string> scriptId = default;
            Optional<string> url = default;
            Optional<TypeStackTrace> stackTrace = default;
            Optional<TypeRemoteObject> exception = default;
            Optional<int> executionContextId = default;
            Optional<object> exceptionMetaData = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("exceptionId"u8))
                {
                    exceptionId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("text"u8))
                {
                    text = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lineNumber"u8))
                {
                    lineNumber = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("columnNumber"u8))
                {
                    columnNumber = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("scriptId"u8))
                {
                    scriptId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stackTrace"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    stackTrace = TypeStackTrace.DeserializeTypeStackTrace(property.Value);
                    continue;
                }
                if (property.NameEquals("exception"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    exception = TypeRemoteObject.DeserializeTypeRemoteObject(property.Value);
                    continue;
                }
                if (property.NameEquals("executionContextId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    executionContextId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("exceptionMetaData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    exceptionMetaData = property.Value.GetObject();
                    continue;
                }
            }
            return new TypeExceptionDetails(exceptionId, text, lineNumber, columnNumber, scriptId.Value, url.Value, stackTrace.Value, exception.Value, Optional.ToNullable(executionContextId), exceptionMetaData.Value);
        }

        internal partial class TypeExceptionDetailsConverter : JsonConverter<TypeExceptionDetails>
        {
            public override void Write(Utf8JsonWriter writer, TypeExceptionDetails model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeExceptionDetails Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeExceptionDetails(document.RootElement);
            }
        }
    }
}
