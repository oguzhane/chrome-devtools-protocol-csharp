// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventSubresourceWebBundleInnerResponseErrorParamsConverter))]
    public partial class EventSubresourceWebBundleInnerResponseErrorParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("innerRequestId"u8);
            writer.WriteStringValue(InnerRequestId);
            writer.WritePropertyName("innerRequestURL"u8);
            writer.WriteStringValue(InnerRequestURL);
            writer.WritePropertyName("errorMessage"u8);
            writer.WriteStringValue(ErrorMessage);
            if (Optional.IsDefined(BundleRequestId))
            {
                writer.WritePropertyName("bundleRequestId"u8);
                writer.WriteStringValue(BundleRequestId);
            }
            writer.WriteEndObject();
        }

        internal static EventSubresourceWebBundleInnerResponseErrorParams DeserializeEventSubresourceWebBundleInnerResponseErrorParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string innerRequestId = default;
            string innerRequestURL = default;
            string errorMessage = default;
            Optional<string> bundleRequestId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("innerRequestId"u8))
                {
                    innerRequestId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("innerRequestURL"u8))
                {
                    innerRequestURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorMessage"u8))
                {
                    errorMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("bundleRequestId"u8))
                {
                    bundleRequestId = property.Value.GetString();
                    continue;
                }
            }
            return new EventSubresourceWebBundleInnerResponseErrorParams(innerRequestId, innerRequestURL, errorMessage, bundleRequestId.Value);
        }

        internal partial class EventSubresourceWebBundleInnerResponseErrorParamsConverter : JsonConverter<EventSubresourceWebBundleInnerResponseErrorParams>
        {
            public override void Write(Utf8JsonWriter writer, EventSubresourceWebBundleInnerResponseErrorParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventSubresourceWebBundleInnerResponseErrorParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventSubresourceWebBundleInnerResponseErrorParams(document.RootElement);
            }
        }
    }
}
