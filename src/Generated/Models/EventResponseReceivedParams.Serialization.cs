// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventResponseReceivedParamsConverter))]
    public partial class EventResponseReceivedParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("requestId"u8);
            writer.WriteStringValue(RequestId);
            writer.WritePropertyName("loaderId"u8);
            writer.WriteStringValue(LoaderId);
            writer.WritePropertyName("timestamp"u8);
            writer.WriteNumberValue(Timestamp);
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            writer.WritePropertyName("response"u8);
            writer.WriteObjectValue(Response);
            writer.WritePropertyName("hasExtraInfo"u8);
            writer.WriteBooleanValue(HasExtraInfo);
            if (Optional.IsDefined(FrameId))
            {
                writer.WritePropertyName("frameId"u8);
                writer.WriteStringValue(FrameId);
            }
            writer.WriteEndObject();
        }

        internal static EventResponseReceivedParams DeserializeEventResponseReceivedParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string requestId = default;
            string loaderId = default;
            float timestamp = default;
            string type = default;
            TypeResponse response = default;
            bool hasExtraInfo = default;
            Optional<string> frameId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requestId"u8))
                {
                    requestId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("loaderId"u8))
                {
                    loaderId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timestamp"u8))
                {
                    timestamp = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("response"u8))
                {
                    response = TypeResponse.DeserializeTypeResponse(property.Value);
                    continue;
                }
                if (property.NameEquals("hasExtraInfo"u8))
                {
                    hasExtraInfo = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("frameId"u8))
                {
                    frameId = property.Value.GetString();
                    continue;
                }
            }
            return new EventResponseReceivedParams(requestId, loaderId, timestamp, type, response, hasExtraInfo, frameId.Value);
        }

        internal partial class EventResponseReceivedParamsConverter : JsonConverter<EventResponseReceivedParams>
        {
            public override void Write(Utf8JsonWriter writer, EventResponseReceivedParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventResponseReceivedParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventResponseReceivedParams(document.RootElement);
            }
        }
    }
}
