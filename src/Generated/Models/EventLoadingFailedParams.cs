// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> Fired when HTTP request has failed to load. </summary>
    public partial class EventLoadingFailedParams
    {
        /// <summary> Initializes a new instance of EventLoadingFailedParams. </summary>
        /// <param name="requestId"> Request identifier. </param>
        /// <param name="timestamp"> Timestamp. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="errorText"> User friendly error message. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestId"/>, <paramref name="type"/> or <paramref name="errorText"/> is null. </exception>
        public EventLoadingFailedParams(string requestId, float timestamp, string type, string errorText)
        {
            Argument.AssertNotNull(requestId, nameof(requestId));
            Argument.AssertNotNull(type, nameof(type));
            Argument.AssertNotNull(errorText, nameof(errorText));

            RequestId = requestId;
            Timestamp = timestamp;
            Type = type;
            ErrorText = errorText;
        }

        /// <summary> Initializes a new instance of EventLoadingFailedParams. </summary>
        /// <param name="requestId"> Request identifier. </param>
        /// <param name="timestamp"> Timestamp. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="errorText"> User friendly error message. </param>
        /// <param name="canceled"> True if loading was canceled. </param>
        /// <param name="blockedReason"> The reason why loading was blocked, if any. </param>
        /// <param name="corsErrorStatus"> The reason why loading was blocked by CORS, if any. </param>
        internal EventLoadingFailedParams(string requestId, float timestamp, string type, string errorText, bool? canceled, string blockedReason, TypeCorsErrorStatus corsErrorStatus)
        {
            RequestId = requestId;
            Timestamp = timestamp;
            Type = type;
            ErrorText = errorText;
            Canceled = canceled;
            BlockedReason = blockedReason;
            CorsErrorStatus = corsErrorStatus;
        }

        /// <summary> Request identifier. </summary>
        public string RequestId { get; set; }
        /// <summary> Timestamp. </summary>
        public float Timestamp { get; set; }
        /// <summary> Resource type. </summary>
        public string Type { get; set; }
        /// <summary> User friendly error message. </summary>
        public string ErrorText { get; set; }
        /// <summary> True if loading was canceled. </summary>
        public bool? Canceled { get; set; }
        /// <summary> The reason why loading was blocked, if any. </summary>
        public string BlockedReason { get; set; }
        /// <summary> The reason why loading was blocked by CORS, if any. </summary>
        public TypeCorsErrorStatus CorsErrorStatus { get; set; }
    }
}
