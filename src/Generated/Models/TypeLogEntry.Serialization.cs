// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeLogEntryConverter))]
    public partial class TypeLogEntry : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("source"u8);
            writer.WriteStringValue(Source);
            writer.WritePropertyName("level"u8);
            writer.WriteStringValue(Level);
            writer.WritePropertyName("text"u8);
            writer.WriteStringValue(Text);
            if (Optional.IsDefined(Category))
            {
                writer.WritePropertyName("category"u8);
                writer.WriteStringValue(Category);
            }
            writer.WritePropertyName("timestamp"u8);
            writer.WriteNumberValue(Timestamp);
            if (Optional.IsDefined(Url))
            {
                writer.WritePropertyName("url"u8);
                writer.WriteStringValue(Url);
            }
            if (Optional.IsDefined(LineNumber))
            {
                writer.WritePropertyName("lineNumber"u8);
                writer.WriteNumberValue(LineNumber.Value);
            }
            if (Optional.IsDefined(StackTrace))
            {
                writer.WritePropertyName("stackTrace"u8);
                writer.WriteObjectValue(StackTrace);
            }
            if (Optional.IsDefined(NetworkRequestId))
            {
                writer.WritePropertyName("networkRequestId"u8);
                writer.WriteStringValue(NetworkRequestId);
            }
            if (Optional.IsDefined(WorkerId))
            {
                writer.WritePropertyName("workerId"u8);
                writer.WriteStringValue(WorkerId);
            }
            if (Optional.IsCollectionDefined(Args))
            {
                writer.WritePropertyName("args"u8);
                writer.WriteStartArray();
                foreach (var item in Args)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static TypeLogEntry DeserializeTypeLogEntry(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string source = default;
            string level = default;
            string text = default;
            Optional<string> category = default;
            float timestamp = default;
            Optional<string> url = default;
            Optional<int> lineNumber = default;
            Optional<TypeStackTrace> stackTrace = default;
            Optional<string> networkRequestId = default;
            Optional<string> workerId = default;
            Optional<IList<TypeRemoteObject>> args = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("source"u8))
                {
                    source = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("level"u8))
                {
                    level = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("text"u8))
                {
                    text = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("category"u8))
                {
                    category = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timestamp"u8))
                {
                    timestamp = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lineNumber"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lineNumber = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("stackTrace"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    stackTrace = TypeStackTrace.DeserializeTypeStackTrace(property.Value);
                    continue;
                }
                if (property.NameEquals("networkRequestId"u8))
                {
                    networkRequestId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("workerId"u8))
                {
                    workerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("args"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypeRemoteObject> array = new List<TypeRemoteObject>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeRemoteObject.DeserializeTypeRemoteObject(item));
                    }
                    args = array;
                    continue;
                }
            }
            return new TypeLogEntry(source, level, text, category.Value, timestamp, url.Value, Optional.ToNullable(lineNumber), stackTrace.Value, networkRequestId.Value, workerId.Value, Optional.ToList(args));
        }

        internal partial class TypeLogEntryConverter : JsonConverter<TypeLogEntry>
        {
            public override void Write(Utf8JsonWriter writer, TypeLogEntry model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeLogEntry Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeLogEntry(document.RootElement);
            }
        }
    }
}
