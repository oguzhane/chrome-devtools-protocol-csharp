// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventReportHeapSnapshotProgressParamsConverter))]
    public partial class EventReportHeapSnapshotProgressParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("done"u8);
            writer.WriteNumberValue(Done);
            writer.WritePropertyName("total"u8);
            writer.WriteNumberValue(Total);
            if (Optional.IsDefined(Finished))
            {
                writer.WritePropertyName("finished"u8);
                writer.WriteBooleanValue(Finished.Value);
            }
            writer.WriteEndObject();
        }

        internal static EventReportHeapSnapshotProgressParams DeserializeEventReportHeapSnapshotProgressParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int done = default;
            int total = default;
            Optional<bool> finished = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("done"u8))
                {
                    done = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("total"u8))
                {
                    total = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("finished"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    finished = property.Value.GetBoolean();
                    continue;
                }
            }
            return new EventReportHeapSnapshotProgressParams(done, total, Optional.ToNullable(finished));
        }

        internal partial class EventReportHeapSnapshotProgressParamsConverter : JsonConverter<EventReportHeapSnapshotProgressParams>
        {
            public override void Write(Utf8JsonWriter writer, EventReportHeapSnapshotProgressParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventReportHeapSnapshotProgressParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventReportHeapSnapshotProgressParams(document.RootElement);
            }
        }
    }
}
