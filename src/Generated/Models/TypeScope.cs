// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> Scope description. </summary>
    public partial class TypeScope
    {
        /// <summary> Initializes a new instance of TypeScope. </summary>
        /// <param name="type"> Scope type. </param>
        /// <param name="object">
        /// Object representing the scope. For `global` and `with` scopes it represents the actual
        /// object; for the rest of the scopes, it is artificial transient object enumerating scope
        /// variables as its properties.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="type"/> or <paramref name="object"/> is null. </exception>
        public TypeScope(string type, TypeRemoteObject @object)
        {
            Argument.AssertNotNull(type, nameof(type));
            Argument.AssertNotNull(@object, nameof(@object));

            Type = type;
            Object = @object;
        }

        /// <summary> Initializes a new instance of TypeScope. </summary>
        /// <param name="type"> Scope type. </param>
        /// <param name="object">
        /// Object representing the scope. For `global` and `with` scopes it represents the actual
        /// object; for the rest of the scopes, it is artificial transient object enumerating scope
        /// variables as its properties.
        /// </param>
        /// <param name="name"></param>
        /// <param name="startLocation"> Location in the source code where scope starts. </param>
        /// <param name="endLocation"> Location in the source code where scope ends. </param>
        internal TypeScope(string type, TypeRemoteObject @object, string name, TypeLocation startLocation, TypeLocation endLocation)
        {
            Type = type;
            Object = @object;
            Name = name;
            StartLocation = startLocation;
            EndLocation = endLocation;
        }

        /// <summary> Scope type. </summary>
        public string Type { get; set; }
        /// <summary>
        /// Object representing the scope. For `global` and `with` scopes it represents the actual
        /// object; for the rest of the scopes, it is artificial transient object enumerating scope
        /// variables as its properties.
        /// </summary>
        public TypeRemoteObject Object { get; set; }
        /// <summary> Gets or sets the name. </summary>
        public string Name { get; set; }
        /// <summary> Location in the source code where scope starts. </summary>
        public TypeLocation StartLocation { get; set; }
        /// <summary> Location in the source code where scope ends. </summary>
        public TypeLocation EndLocation { get; set; }
    }
}
