// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeBackendNodeConverter))]
    public partial class TypeBackendNode : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("nodeType"u8);
            writer.WriteNumberValue(NodeType);
            writer.WritePropertyName("nodeName"u8);
            writer.WriteStringValue(NodeName);
            writer.WritePropertyName("backendNodeId"u8);
            writer.WriteNumberValue(BackendNodeId);
            writer.WriteEndObject();
        }

        internal static TypeBackendNode DeserializeTypeBackendNode(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int nodeType = default;
            string nodeName = default;
            int backendNodeId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("nodeType"u8))
                {
                    nodeType = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("nodeName"u8))
                {
                    nodeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("backendNodeId"u8))
                {
                    backendNodeId = property.Value.GetInt32();
                    continue;
                }
            }
            return new TypeBackendNode(nodeType, nodeName, backendNodeId);
        }

        internal partial class TypeBackendNodeConverter : JsonConverter<TypeBackendNode>
        {
            public override void Write(Utf8JsonWriter writer, TypeBackendNode model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeBackendNode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeBackendNode(document.RootElement);
            }
        }
    }
}
