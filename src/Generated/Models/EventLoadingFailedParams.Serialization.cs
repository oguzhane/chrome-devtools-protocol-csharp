// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventLoadingFailedParamsConverter))]
    public partial class EventLoadingFailedParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("requestId"u8);
            writer.WriteStringValue(RequestId);
            writer.WritePropertyName("timestamp"u8);
            writer.WriteNumberValue(Timestamp);
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            writer.WritePropertyName("errorText"u8);
            writer.WriteStringValue(ErrorText);
            if (Optional.IsDefined(Canceled))
            {
                writer.WritePropertyName("canceled"u8);
                writer.WriteBooleanValue(Canceled.Value);
            }
            if (Optional.IsDefined(BlockedReason))
            {
                writer.WritePropertyName("blockedReason"u8);
                writer.WriteStringValue(BlockedReason);
            }
            if (Optional.IsDefined(CorsErrorStatus))
            {
                writer.WritePropertyName("corsErrorStatus"u8);
                writer.WriteObjectValue(CorsErrorStatus);
            }
            writer.WriteEndObject();
        }

        internal static EventLoadingFailedParams DeserializeEventLoadingFailedParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string requestId = default;
            float timestamp = default;
            string type = default;
            string errorText = default;
            Optional<bool> canceled = default;
            Optional<string> blockedReason = default;
            Optional<TypeCorsErrorStatus> corsErrorStatus = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requestId"u8))
                {
                    requestId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timestamp"u8))
                {
                    timestamp = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorText"u8))
                {
                    errorText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("canceled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    canceled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("blockedReason"u8))
                {
                    blockedReason = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("corsErrorStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    corsErrorStatus = TypeCorsErrorStatus.DeserializeTypeCorsErrorStatus(property.Value);
                    continue;
                }
            }
            return new EventLoadingFailedParams(requestId, timestamp, type, errorText, Optional.ToNullable(canceled), blockedReason.Value, corsErrorStatus.Value);
        }

        internal partial class EventLoadingFailedParamsConverter : JsonConverter<EventLoadingFailedParams>
        {
            public override void Write(Utf8JsonWriter writer, EventLoadingFailedParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventLoadingFailedParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventLoadingFailedParams(document.RootElement);
            }
        }
    }
}
