// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeAudioParamConverter))]
    public partial class TypeAudioParam : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("paramId"u8);
            writer.WriteStringValue(ParamId);
            writer.WritePropertyName("nodeId"u8);
            writer.WriteStringValue(NodeId);
            writer.WritePropertyName("contextId"u8);
            writer.WriteStringValue(ContextId);
            writer.WritePropertyName("paramType"u8);
            writer.WriteStringValue(ParamType);
            writer.WritePropertyName("rate"u8);
            writer.WriteStringValue(Rate);
            writer.WritePropertyName("defaultValue"u8);
            writer.WriteNumberValue(DefaultValue);
            writer.WritePropertyName("minValue"u8);
            writer.WriteNumberValue(MinValue);
            writer.WritePropertyName("maxValue"u8);
            writer.WriteNumberValue(MaxValue);
            writer.WriteEndObject();
        }

        internal static TypeAudioParam DeserializeTypeAudioParam(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string paramId = default;
            string nodeId = default;
            string contextId = default;
            string paramType = default;
            string rate = default;
            float defaultValue = default;
            float minValue = default;
            float maxValue = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("paramId"u8))
                {
                    paramId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nodeId"u8))
                {
                    nodeId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("contextId"u8))
                {
                    contextId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("paramType"u8))
                {
                    paramType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rate"u8))
                {
                    rate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("defaultValue"u8))
                {
                    defaultValue = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("minValue"u8))
                {
                    minValue = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("maxValue"u8))
                {
                    maxValue = property.Value.GetSingle();
                    continue;
                }
            }
            return new TypeAudioParam(paramId, nodeId, contextId, paramType, rate, defaultValue, minValue, maxValue);
        }

        internal partial class TypeAudioParamConverter : JsonConverter<TypeAudioParam>
        {
            public override void Write(Utf8JsonWriter writer, TypeAudioParam model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeAudioParam Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeAudioParam(document.RootElement);
            }
        }
    }
}
