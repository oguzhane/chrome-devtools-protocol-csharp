// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeFrameConverter))]
    public partial class TypeFrame : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            if (Optional.IsDefined(ParentId))
            {
                writer.WritePropertyName("parentId"u8);
                writer.WriteStringValue(ParentId);
            }
            writer.WritePropertyName("loaderId"u8);
            writer.WriteStringValue(LoaderId);
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            writer.WritePropertyName("url"u8);
            writer.WriteStringValue(Url);
            if (Optional.IsDefined(UrlFragment))
            {
                writer.WritePropertyName("urlFragment"u8);
                writer.WriteStringValue(UrlFragment);
            }
            writer.WritePropertyName("domainAndRegistry"u8);
            writer.WriteStringValue(DomainAndRegistry);
            writer.WritePropertyName("securityOrigin"u8);
            writer.WriteStringValue(SecurityOrigin);
            writer.WritePropertyName("mimeType"u8);
            writer.WriteStringValue(MimeType);
            if (Optional.IsDefined(UnreachableUrl))
            {
                writer.WritePropertyName("unreachableUrl"u8);
                writer.WriteStringValue(UnreachableUrl);
            }
            if (Optional.IsDefined(AdFrameStatus))
            {
                writer.WritePropertyName("adFrameStatus"u8);
                writer.WriteObjectValue(AdFrameStatus);
            }
            writer.WritePropertyName("secureContextType"u8);
            writer.WriteStringValue(SecureContextType);
            writer.WritePropertyName("crossOriginIsolatedContextType"u8);
            writer.WriteStringValue(CrossOriginIsolatedContextType);
            writer.WritePropertyName("gatedAPIFeatures"u8);
            writer.WriteStartArray();
            foreach (var item in GatedAPIFeatures)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static TypeFrame DeserializeTypeFrame(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string id = default;
            Optional<string> parentId = default;
            string loaderId = default;
            Optional<string> name = default;
            string url = default;
            Optional<string> urlFragment = default;
            string domainAndRegistry = default;
            string securityOrigin = default;
            string mimeType = default;
            Optional<string> unreachableUrl = default;
            Optional<TypeAdFrameStatus> adFrameStatus = default;
            string secureContextType = default;
            string crossOriginIsolatedContextType = default;
            IList<string> gatedAPIFeatures = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parentId"u8))
                {
                    parentId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("loaderId"u8))
                {
                    loaderId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("urlFragment"u8))
                {
                    urlFragment = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("domainAndRegistry"u8))
                {
                    domainAndRegistry = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("securityOrigin"u8))
                {
                    securityOrigin = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mimeType"u8))
                {
                    mimeType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unreachableUrl"u8))
                {
                    unreachableUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("adFrameStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    adFrameStatus = TypeAdFrameStatus.DeserializeTypeAdFrameStatus(property.Value);
                    continue;
                }
                if (property.NameEquals("secureContextType"u8))
                {
                    secureContextType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("crossOriginIsolatedContextType"u8))
                {
                    crossOriginIsolatedContextType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("gatedAPIFeatures"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    gatedAPIFeatures = array;
                    continue;
                }
            }
            return new TypeFrame(id, parentId.Value, loaderId, name.Value, url, urlFragment.Value, domainAndRegistry, securityOrigin, mimeType, unreachableUrl.Value, adFrameStatus.Value, secureContextType, crossOriginIsolatedContextType, gatedAPIFeatures);
        }

        internal partial class TypeFrameConverter : JsonConverter<TypeFrame>
        {
            public override void Write(Utf8JsonWriter writer, TypeFrame model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeFrame Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeFrame(document.RootElement);
            }
        }
    }
}
