// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeInitiatorConverter))]
    public partial class TypeInitiator : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            if (Optional.IsDefined(Stack))
            {
                writer.WritePropertyName("stack"u8);
                writer.WriteObjectValue(Stack);
            }
            if (Optional.IsDefined(Url))
            {
                writer.WritePropertyName("url"u8);
                writer.WriteStringValue(Url);
            }
            if (Optional.IsDefined(LineNumber))
            {
                writer.WritePropertyName("lineNumber"u8);
                writer.WriteNumberValue(LineNumber.Value);
            }
            if (Optional.IsDefined(ColumnNumber))
            {
                writer.WritePropertyName("columnNumber"u8);
                writer.WriteNumberValue(ColumnNumber.Value);
            }
            if (Optional.IsDefined(RequestId))
            {
                writer.WritePropertyName("requestId"u8);
                writer.WriteStringValue(RequestId);
            }
            writer.WriteEndObject();
        }

        internal static TypeInitiator DeserializeTypeInitiator(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string type = default;
            Optional<TypeStackTrace> stack = default;
            Optional<string> url = default;
            Optional<float> lineNumber = default;
            Optional<float> columnNumber = default;
            Optional<string> requestId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stack"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    stack = TypeStackTrace.DeserializeTypeStackTrace(property.Value);
                    continue;
                }
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lineNumber"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lineNumber = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("columnNumber"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    columnNumber = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("requestId"u8))
                {
                    requestId = property.Value.GetString();
                    continue;
                }
            }
            return new TypeInitiator(type, stack.Value, url.Value, Optional.ToNullable(lineNumber), Optional.ToNullable(columnNumber), requestId.Value);
        }

        internal partial class TypeInitiatorConverter : JsonConverter<TypeInitiator>
        {
            public override void Write(Utf8JsonWriter writer, TypeInitiator model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeInitiator Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeInitiator(document.RootElement);
            }
        }
    }
}
