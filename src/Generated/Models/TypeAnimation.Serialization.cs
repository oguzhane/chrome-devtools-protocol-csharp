// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeAnimationConverter))]
    public partial class TypeAnimation : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("pausedState"u8);
            writer.WriteBooleanValue(PausedState);
            writer.WritePropertyName("playState"u8);
            writer.WriteStringValue(PlayState);
            writer.WritePropertyName("playbackRate"u8);
            writer.WriteNumberValue(PlaybackRate);
            writer.WritePropertyName("startTime"u8);
            writer.WriteNumberValue(StartTime);
            writer.WritePropertyName("currentTime"u8);
            writer.WriteNumberValue(CurrentTime);
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            if (Optional.IsDefined(Source))
            {
                writer.WritePropertyName("source"u8);
                writer.WriteObjectValue(Source);
            }
            if (Optional.IsDefined(CssId))
            {
                writer.WritePropertyName("cssId"u8);
                writer.WriteStringValue(CssId);
            }
            writer.WriteEndObject();
        }

        internal static TypeAnimation DeserializeTypeAnimation(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string id = default;
            string name = default;
            bool pausedState = default;
            string playState = default;
            float playbackRate = default;
            float startTime = default;
            float currentTime = default;
            string type = default;
            Optional<TypeAnimationEffect> source = default;
            Optional<string> cssId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pausedState"u8))
                {
                    pausedState = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("playState"u8))
                {
                    playState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("playbackRate"u8))
                {
                    playbackRate = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("startTime"u8))
                {
                    startTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("currentTime"u8))
                {
                    currentTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("source"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    source = TypeAnimationEffect.DeserializeTypeAnimationEffect(property.Value);
                    continue;
                }
                if (property.NameEquals("cssId"u8))
                {
                    cssId = property.Value.GetString();
                    continue;
                }
            }
            return new TypeAnimation(id, name, pausedState, playState, playbackRate, startTime, currentTime, type, source.Value, cssId.Value);
        }

        internal partial class TypeAnimationConverter : JsonConverter<TypeAnimation>
        {
            public override void Write(Utf8JsonWriter writer, TypeAnimation model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeAnimation Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeAnimation(document.RootElement);
            }
        }
    }
}
