// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> The TypeContentSecurityPolicyIssueDetails. </summary>
    public partial class TypeContentSecurityPolicyIssueDetails
    {
        /// <summary> Initializes a new instance of TypeContentSecurityPolicyIssueDetails. </summary>
        /// <param name="violatedDirective"> Specific directive that is violated, causing the CSP issue. </param>
        /// <param name="isReportOnly"></param>
        /// <param name="contentSecurityPolicyViolationType"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="violatedDirective"/> or <paramref name="contentSecurityPolicyViolationType"/> is null. </exception>
        public TypeContentSecurityPolicyIssueDetails(string violatedDirective, bool isReportOnly, string contentSecurityPolicyViolationType)
        {
            Argument.AssertNotNull(violatedDirective, nameof(violatedDirective));
            Argument.AssertNotNull(contentSecurityPolicyViolationType, nameof(contentSecurityPolicyViolationType));

            ViolatedDirective = violatedDirective;
            IsReportOnly = isReportOnly;
            ContentSecurityPolicyViolationType = contentSecurityPolicyViolationType;
        }

        /// <summary> Initializes a new instance of TypeContentSecurityPolicyIssueDetails. </summary>
        /// <param name="blockedURL"> The url not included in allowed sources. </param>
        /// <param name="violatedDirective"> Specific directive that is violated, causing the CSP issue. </param>
        /// <param name="isReportOnly"></param>
        /// <param name="contentSecurityPolicyViolationType"></param>
        /// <param name="frameAncestor"> Information about the frame affected by an inspector issue. </param>
        /// <param name="sourceCodeLocation"></param>
        /// <param name="violatingNodeId">
        /// Unique DOM node identifier used to reference a node that may not have been pushed to the
        /// front-end.
        /// </param>
        internal TypeContentSecurityPolicyIssueDetails(string blockedURL, string violatedDirective, bool isReportOnly, string contentSecurityPolicyViolationType, TypeAffectedFrame frameAncestor, TypeSourceCodeLocation sourceCodeLocation, int? violatingNodeId)
        {
            BlockedURL = blockedURL;
            ViolatedDirective = violatedDirective;
            IsReportOnly = isReportOnly;
            ContentSecurityPolicyViolationType = contentSecurityPolicyViolationType;
            FrameAncestor = frameAncestor;
            SourceCodeLocation = sourceCodeLocation;
            ViolatingNodeId = violatingNodeId;
        }

        /// <summary> The url not included in allowed sources. </summary>
        public string BlockedURL { get; set; }
        /// <summary> Specific directive that is violated, causing the CSP issue. </summary>
        public string ViolatedDirective { get; set; }
        /// <summary> Gets or sets the is report only. </summary>
        public bool IsReportOnly { get; set; }
        /// <summary> Gets or sets the content security policy violation type. </summary>
        public string ContentSecurityPolicyViolationType { get; set; }
        /// <summary> Information about the frame affected by an inspector issue. </summary>
        public TypeAffectedFrame FrameAncestor { get; set; }
        /// <summary> Gets or sets the source code location. </summary>
        public TypeSourceCodeLocation SourceCodeLocation { get; set; }
        /// <summary>
        /// Unique DOM node identifier used to reference a node that may not have been pushed to the
        /// front-end.
        /// </summary>
        public int? ViolatingNodeId { get; set; }
    }
}
