// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventRequestInterceptedParamsConverter))]
    public partial class EventRequestInterceptedParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("interceptionId"u8);
            writer.WriteStringValue(InterceptionId);
            writer.WritePropertyName("request"u8);
            writer.WriteObjectValue(Request);
            writer.WritePropertyName("frameId"u8);
            writer.WriteStringValue(FrameId);
            writer.WritePropertyName("resourceType"u8);
            writer.WriteStringValue(ResourceType);
            writer.WritePropertyName("isNavigationRequest"u8);
            writer.WriteBooleanValue(IsNavigationRequest);
            if (Optional.IsDefined(IsDownload))
            {
                writer.WritePropertyName("isDownload"u8);
                writer.WriteBooleanValue(IsDownload.Value);
            }
            if (Optional.IsDefined(RedirectUrl))
            {
                writer.WritePropertyName("redirectUrl"u8);
                writer.WriteStringValue(RedirectUrl);
            }
            if (Optional.IsDefined(AuthChallenge))
            {
                writer.WritePropertyName("authChallenge"u8);
                writer.WriteObjectValue(AuthChallenge);
            }
            if (Optional.IsDefined(ResponseErrorReason))
            {
                writer.WritePropertyName("responseErrorReason"u8);
                writer.WriteStringValue(ResponseErrorReason);
            }
            if (Optional.IsDefined(ResponseStatusCode))
            {
                writer.WritePropertyName("responseStatusCode"u8);
                writer.WriteNumberValue(ResponseStatusCode.Value);
            }
            if (Optional.IsDefined(ResponseHeaders))
            {
                writer.WritePropertyName("responseHeaders"u8);
                writer.WriteObjectValue(ResponseHeaders);
            }
            if (Optional.IsDefined(RequestId))
            {
                writer.WritePropertyName("requestId"u8);
                writer.WriteStringValue(RequestId);
            }
            writer.WriteEndObject();
        }

        internal static EventRequestInterceptedParams DeserializeEventRequestInterceptedParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string interceptionId = default;
            TypeRequest request = default;
            string frameId = default;
            string resourceType = default;
            bool isNavigationRequest = default;
            Optional<bool> isDownload = default;
            Optional<string> redirectUrl = default;
            Optional<TypeAuthChallenge> authChallenge = default;
            Optional<string> responseErrorReason = default;
            Optional<int> responseStatusCode = default;
            Optional<object> responseHeaders = default;
            Optional<string> requestId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("interceptionId"u8))
                {
                    interceptionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("request"u8))
                {
                    request = TypeRequest.DeserializeTypeRequest(property.Value);
                    continue;
                }
                if (property.NameEquals("frameId"u8))
                {
                    frameId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceType"u8))
                {
                    resourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isNavigationRequest"u8))
                {
                    isNavigationRequest = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isDownload"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDownload = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("redirectUrl"u8))
                {
                    redirectUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authChallenge"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    authChallenge = TypeAuthChallenge.DeserializeTypeAuthChallenge(property.Value);
                    continue;
                }
                if (property.NameEquals("responseErrorReason"u8))
                {
                    responseErrorReason = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("responseStatusCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    responseStatusCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("responseHeaders"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    responseHeaders = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("requestId"u8))
                {
                    requestId = property.Value.GetString();
                    continue;
                }
            }
            return new EventRequestInterceptedParams(interceptionId, request, frameId, resourceType, isNavigationRequest, Optional.ToNullable(isDownload), redirectUrl.Value, authChallenge.Value, responseErrorReason.Value, Optional.ToNullable(responseStatusCode), responseHeaders.Value, requestId.Value);
        }

        internal partial class EventRequestInterceptedParamsConverter : JsonConverter<EventRequestInterceptedParams>
        {
            public override void Write(Utf8JsonWriter writer, EventRequestInterceptedParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventRequestInterceptedParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventRequestInterceptedParams(document.RootElement);
            }
        }
    }
}
