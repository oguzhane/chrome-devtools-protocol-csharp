// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeSecurityStateExplanationConverter))]
    public partial class TypeSecurityStateExplanation : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("securityState"u8);
            writer.WriteStringValue(SecurityState);
            writer.WritePropertyName("title"u8);
            writer.WriteStringValue(Title);
            writer.WritePropertyName("summary"u8);
            writer.WriteStringValue(Summary);
            writer.WritePropertyName("description"u8);
            writer.WriteStringValue(Description);
            writer.WritePropertyName("mixedContentType"u8);
            writer.WriteStringValue(MixedContentType);
            writer.WritePropertyName("certificate"u8);
            writer.WriteStartArray();
            foreach (var item in Certificate)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(Recommendations))
            {
                writer.WritePropertyName("recommendations"u8);
                writer.WriteStartArray();
                foreach (var item in Recommendations)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static TypeSecurityStateExplanation DeserializeTypeSecurityStateExplanation(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string securityState = default;
            string title = default;
            string summary = default;
            string description = default;
            string mixedContentType = default;
            IList<string> certificate = default;
            Optional<IList<string>> recommendations = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("securityState"u8))
                {
                    securityState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("summary"u8))
                {
                    summary = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mixedContentType"u8))
                {
                    mixedContentType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("certificate"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    certificate = array;
                    continue;
                }
                if (property.NameEquals("recommendations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    recommendations = array;
                    continue;
                }
            }
            return new TypeSecurityStateExplanation(securityState, title, summary, description, mixedContentType, certificate, Optional.ToList(recommendations));
        }

        internal partial class TypeSecurityStateExplanationConverter : JsonConverter<TypeSecurityStateExplanation>
        {
            public override void Write(Utf8JsonWriter writer, TypeSecurityStateExplanation model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeSecurityStateExplanation Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeSecurityStateExplanation(document.RootElement);
            }
        }
    }
}
