// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeGenericIssueDetailsConverter))]
    public partial class TypeGenericIssueDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("errorType"u8);
            writer.WriteStringValue(ErrorType);
            if (Optional.IsDefined(FrameId))
            {
                writer.WritePropertyName("frameId"u8);
                writer.WriteStringValue(FrameId);
            }
            if (Optional.IsDefined(ViolatingNodeId))
            {
                writer.WritePropertyName("violatingNodeId"u8);
                writer.WriteNumberValue(ViolatingNodeId.Value);
            }
            writer.WriteEndObject();
        }

        internal static TypeGenericIssueDetails DeserializeTypeGenericIssueDetails(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string errorType = default;
            Optional<string> frameId = default;
            Optional<int> violatingNodeId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("errorType"u8))
                {
                    errorType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("frameId"u8))
                {
                    frameId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("violatingNodeId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    violatingNodeId = property.Value.GetInt32();
                    continue;
                }
            }
            return new TypeGenericIssueDetails(errorType, frameId.Value, Optional.ToNullable(violatingNodeId));
        }

        internal partial class TypeGenericIssueDetailsConverter : JsonConverter<TypeGenericIssueDetails>
        {
            public override void Write(Utf8JsonWriter writer, TypeGenericIssueDetails model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeGenericIssueDetails Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeGenericIssueDetails(document.RootElement);
            }
        }
    }
}
