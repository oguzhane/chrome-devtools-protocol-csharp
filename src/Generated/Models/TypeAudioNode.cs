// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> Protocol object for AudioNode. </summary>
    public partial class TypeAudioNode
    {
        /// <summary> Initializes a new instance of TypeAudioNode. </summary>
        /// <param name="nodeId"> An unique ID for a graph object (AudioContext, AudioNode, AudioParam) in Web Audio API. </param>
        /// <param name="contextId"> An unique ID for a graph object (AudioContext, AudioNode, AudioParam) in Web Audio API. </param>
        /// <param name="nodeType"> Enum of AudioNode types. </param>
        /// <param name="numberOfInputs"></param>
        /// <param name="numberOfOutputs"></param>
        /// <param name="channelCount"></param>
        /// <param name="channelCountMode"> Enum of AudioNode::ChannelCountMode from the spec. </param>
        /// <param name="channelInterpretation"> Enum of AudioNode::ChannelInterpretation from the spec. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nodeId"/>, <paramref name="contextId"/>, <paramref name="nodeType"/>, <paramref name="channelCountMode"/> or <paramref name="channelInterpretation"/> is null. </exception>
        public TypeAudioNode(string nodeId, string contextId, string nodeType, float numberOfInputs, float numberOfOutputs, float channelCount, string channelCountMode, string channelInterpretation)
        {
            Argument.AssertNotNull(nodeId, nameof(nodeId));
            Argument.AssertNotNull(contextId, nameof(contextId));
            Argument.AssertNotNull(nodeType, nameof(nodeType));
            Argument.AssertNotNull(channelCountMode, nameof(channelCountMode));
            Argument.AssertNotNull(channelInterpretation, nameof(channelInterpretation));

            NodeId = nodeId;
            ContextId = contextId;
            NodeType = nodeType;
            NumberOfInputs = numberOfInputs;
            NumberOfOutputs = numberOfOutputs;
            ChannelCount = channelCount;
            ChannelCountMode = channelCountMode;
            ChannelInterpretation = channelInterpretation;
        }

        /// <summary> An unique ID for a graph object (AudioContext, AudioNode, AudioParam) in Web Audio API. </summary>
        public string NodeId { get; set; }
        /// <summary> An unique ID for a graph object (AudioContext, AudioNode, AudioParam) in Web Audio API. </summary>
        public string ContextId { get; set; }
        /// <summary> Enum of AudioNode types. </summary>
        public string NodeType { get; set; }
        /// <summary> Gets or sets the number of inputs. </summary>
        public float NumberOfInputs { get; set; }
        /// <summary> Gets or sets the number of outputs. </summary>
        public float NumberOfOutputs { get; set; }
        /// <summary> Gets or sets the channel count. </summary>
        public float ChannelCount { get; set; }
        /// <summary> Enum of AudioNode::ChannelCountMode from the spec. </summary>
        public string ChannelCountMode { get; set; }
        /// <summary> Enum of AudioNode::ChannelInterpretation from the spec. </summary>
        public string ChannelInterpretation { get; set; }
    }
}
