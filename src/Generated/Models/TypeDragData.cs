// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> The TypeDragData. </summary>
    public partial class TypeDragData
    {
        /// <summary> Initializes a new instance of TypeDragData. </summary>
        /// <param name="items"></param>
        /// <param name="dragOperationsMask"> Bit field representing allowed drag operations. Copy = 1, Link = 2, Move = 16. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="items"/> is null. </exception>
        public TypeDragData(IEnumerable<TypeDragDataItem> items, int dragOperationsMask)
        {
            Argument.AssertNotNull(items, nameof(items));

            Items = items.ToList();
            Files = new ChangeTrackingList<string>();
            DragOperationsMask = dragOperationsMask;
        }

        /// <summary> Initializes a new instance of TypeDragData. </summary>
        /// <param name="items"></param>
        /// <param name="files"> List of filenames that should be included when dropping. </param>
        /// <param name="dragOperationsMask"> Bit field representing allowed drag operations. Copy = 1, Link = 2, Move = 16. </param>
        internal TypeDragData(IList<TypeDragDataItem> items, IList<string> files, int dragOperationsMask)
        {
            Items = items;
            Files = files;
            DragOperationsMask = dragOperationsMask;
        }

        /// <summary> Gets the items. </summary>
        public IList<TypeDragDataItem> Items { get; }
        /// <summary> List of filenames that should be included when dropping. </summary>
        public IList<string> Files { get; }
        /// <summary> Bit field representing allowed drag operations. Copy = 1, Link = 2, Move = 16. </summary>
        public int DragOperationsMask { get; set; }
    }
}
