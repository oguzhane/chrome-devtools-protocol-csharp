// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventDownloadProgressParamsConverter))]
    public partial class EventDownloadProgressParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("guid"u8);
            writer.WriteStringValue(Guid);
            writer.WritePropertyName("totalBytes"u8);
            writer.WriteNumberValue(TotalBytes);
            writer.WritePropertyName("receivedBytes"u8);
            writer.WriteNumberValue(ReceivedBytes);
            writer.WritePropertyName("state"u8);
            writer.WriteStringValue(State);
            writer.WriteEndObject();
        }

        internal static EventDownloadProgressParams DeserializeEventDownloadProgressParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string guid = default;
            float totalBytes = default;
            float receivedBytes = default;
            string state = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("guid"u8))
                {
                    guid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("totalBytes"u8))
                {
                    totalBytes = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("receivedBytes"u8))
                {
                    receivedBytes = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    state = property.Value.GetString();
                    continue;
                }
            }
            return new EventDownloadProgressParams(guid, totalBytes, receivedBytes, state);
        }

        internal partial class EventDownloadProgressParamsConverter : JsonConverter<EventDownloadProgressParams>
        {
            public override void Write(Utf8JsonWriter writer, EventDownloadProgressParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventDownloadProgressParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventDownloadProgressParams(document.RootElement);
            }
        }
    }
}
