// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeAxValueConverter))]
    public partial class TypeAxValue : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value"u8);
                writer.WriteObjectValue(Value);
            }
            if (Optional.IsCollectionDefined(RelatedNodes))
            {
                writer.WritePropertyName("relatedNodes"u8);
                writer.WriteStartArray();
                foreach (var item in RelatedNodes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Sources))
            {
                writer.WritePropertyName("sources"u8);
                writer.WriteStartArray();
                foreach (var item in Sources)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static TypeAxValue DeserializeTypeAxValue(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string type = default;
            Optional<object> value = default;
            Optional<IList<TypeAxRelatedNode>> relatedNodes = default;
            Optional<IList<TypeAxValueSource>> sources = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    value = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("relatedNodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypeAxRelatedNode> array = new List<TypeAxRelatedNode>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeAxRelatedNode.DeserializeTypeAxRelatedNode(item));
                    }
                    relatedNodes = array;
                    continue;
                }
                if (property.NameEquals("sources"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypeAxValueSource> array = new List<TypeAxValueSource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeAxValueSource.DeserializeTypeAxValueSource(item));
                    }
                    sources = array;
                    continue;
                }
            }
            return new TypeAxValue(type, value.Value, Optional.ToList(relatedNodes), Optional.ToList(sources));
        }

        internal partial class TypeAxValueConverter : JsonConverter<TypeAxValue>
        {
            public override void Write(Utf8JsonWriter writer, TypeAxValue model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeAxValue Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeAxValue(document.RootElement);
            }
        }
    }
}
