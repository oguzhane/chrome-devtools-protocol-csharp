// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeExecutionContextDescriptionConverter))]
    public partial class TypeExecutionContextDescription : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("id"u8);
            writer.WriteNumberValue(Id);
            writer.WritePropertyName("origin"u8);
            writer.WriteStringValue(Origin);
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("uniqueId"u8);
            writer.WriteStringValue(UniqueId);
            if (Optional.IsDefined(AuxData))
            {
                writer.WritePropertyName("auxData"u8);
                writer.WriteObjectValue(AuxData);
            }
            writer.WriteEndObject();
        }

        internal static TypeExecutionContextDescription DeserializeTypeExecutionContextDescription(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int id = default;
            string origin = default;
            string name = default;
            string uniqueId = default;
            Optional<object> auxData = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("origin"u8))
                {
                    origin = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("uniqueId"u8))
                {
                    uniqueId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("auxData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    auxData = property.Value.GetObject();
                    continue;
                }
            }
            return new TypeExecutionContextDescription(id, origin, name, uniqueId, auxData.Value);
        }

        internal partial class TypeExecutionContextDescriptionConverter : JsonConverter<TypeExecutionContextDescription>
        {
            public override void Write(Utf8JsonWriter writer, TypeExecutionContextDescription model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeExecutionContextDescription Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeExecutionContextDescription(document.RootElement);
            }
        }
    }
}
