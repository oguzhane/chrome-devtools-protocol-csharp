// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> Fired when page is about to send HTTP request. </summary>
    public partial class EventRequestWillBeSentParams
    {
        /// <summary> Initializes a new instance of EventRequestWillBeSentParams. </summary>
        /// <param name="requestId"> Request identifier. </param>
        /// <param name="loaderId"> Loader identifier. Empty string if the request is fetched from worker. </param>
        /// <param name="documentURL"> URL of the document this request is loaded for. </param>
        /// <param name="request"> Request data. </param>
        /// <param name="timestamp"> Timestamp. </param>
        /// <param name="wallTime"> Timestamp. </param>
        /// <param name="initiator"> Request initiator. </param>
        /// <param name="redirectHasExtraInfo">
        /// In the case that redirectResponse is populated, this flag indicates whether
        /// requestWillBeSentExtraInfo and responseReceivedExtraInfo events will be or were emitted
        /// for the request which was just redirected.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestId"/>, <paramref name="loaderId"/>, <paramref name="documentURL"/>, <paramref name="request"/> or <paramref name="initiator"/> is null. </exception>
        public EventRequestWillBeSentParams(string requestId, string loaderId, string documentURL, TypeRequest request, float timestamp, float wallTime, TypeInitiator initiator, bool redirectHasExtraInfo)
        {
            Argument.AssertNotNull(requestId, nameof(requestId));
            Argument.AssertNotNull(loaderId, nameof(loaderId));
            Argument.AssertNotNull(documentURL, nameof(documentURL));
            Argument.AssertNotNull(request, nameof(request));
            Argument.AssertNotNull(initiator, nameof(initiator));

            RequestId = requestId;
            LoaderId = loaderId;
            DocumentURL = documentURL;
            Request = request;
            Timestamp = timestamp;
            WallTime = wallTime;
            Initiator = initiator;
            RedirectHasExtraInfo = redirectHasExtraInfo;
        }

        /// <summary> Initializes a new instance of EventRequestWillBeSentParams. </summary>
        /// <param name="requestId"> Request identifier. </param>
        /// <param name="loaderId"> Loader identifier. Empty string if the request is fetched from worker. </param>
        /// <param name="documentURL"> URL of the document this request is loaded for. </param>
        /// <param name="request"> Request data. </param>
        /// <param name="timestamp"> Timestamp. </param>
        /// <param name="wallTime"> Timestamp. </param>
        /// <param name="initiator"> Request initiator. </param>
        /// <param name="redirectHasExtraInfo">
        /// In the case that redirectResponse is populated, this flag indicates whether
        /// requestWillBeSentExtraInfo and responseReceivedExtraInfo events will be or were emitted
        /// for the request which was just redirected.
        /// </param>
        /// <param name="redirectResponse"> Redirect response data. </param>
        /// <param name="type"> Type of this resource. </param>
        /// <param name="frameId"> Frame identifier. </param>
        /// <param name="hasUserGesture"> Whether the request is initiated by a user gesture. Defaults to false. </param>
        internal EventRequestWillBeSentParams(string requestId, string loaderId, string documentURL, TypeRequest request, float timestamp, float wallTime, TypeInitiator initiator, bool redirectHasExtraInfo, TypeResponse redirectResponse, string type, string frameId, bool? hasUserGesture)
        {
            RequestId = requestId;
            LoaderId = loaderId;
            DocumentURL = documentURL;
            Request = request;
            Timestamp = timestamp;
            WallTime = wallTime;
            Initiator = initiator;
            RedirectHasExtraInfo = redirectHasExtraInfo;
            RedirectResponse = redirectResponse;
            Type = type;
            FrameId = frameId;
            HasUserGesture = hasUserGesture;
        }

        /// <summary> Request identifier. </summary>
        public string RequestId { get; set; }
        /// <summary> Loader identifier. Empty string if the request is fetched from worker. </summary>
        public string LoaderId { get; set; }
        /// <summary> URL of the document this request is loaded for. </summary>
        public string DocumentURL { get; set; }
        /// <summary> Request data. </summary>
        public TypeRequest Request { get; set; }
        /// <summary> Timestamp. </summary>
        public float Timestamp { get; set; }
        /// <summary> Timestamp. </summary>
        public float WallTime { get; set; }
        /// <summary> Request initiator. </summary>
        public TypeInitiator Initiator { get; set; }
        /// <summary>
        /// In the case that redirectResponse is populated, this flag indicates whether
        /// requestWillBeSentExtraInfo and responseReceivedExtraInfo events will be or were emitted
        /// for the request which was just redirected.
        /// </summary>
        public bool RedirectHasExtraInfo { get; set; }
        /// <summary> Redirect response data. </summary>
        public TypeResponse RedirectResponse { get; set; }
        /// <summary> Type of this resource. </summary>
        public string Type { get; set; }
        /// <summary> Frame identifier. </summary>
        public string FrameId { get; set; }
        /// <summary> Whether the request is initiated by a user gesture. Defaults to false. </summary>
        public bool? HasUserGesture { get; set; }
    }
}
