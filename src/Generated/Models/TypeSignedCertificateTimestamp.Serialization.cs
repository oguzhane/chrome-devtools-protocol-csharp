// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeSignedCertificateTimestampConverter))]
    public partial class TypeSignedCertificateTimestamp : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("status"u8);
            writer.WriteStringValue(Status);
            writer.WritePropertyName("origin"u8);
            writer.WriteStringValue(Origin);
            writer.WritePropertyName("logDescription"u8);
            writer.WriteStringValue(LogDescription);
            writer.WritePropertyName("logId"u8);
            writer.WriteStringValue(LogId);
            writer.WritePropertyName("timestamp"u8);
            writer.WriteNumberValue(Timestamp);
            writer.WritePropertyName("hashAlgorithm"u8);
            writer.WriteStringValue(HashAlgorithm);
            writer.WritePropertyName("signatureAlgorithm"u8);
            writer.WriteStringValue(SignatureAlgorithm);
            writer.WritePropertyName("signatureData"u8);
            writer.WriteStringValue(SignatureData);
            writer.WriteEndObject();
        }

        internal static TypeSignedCertificateTimestamp DeserializeTypeSignedCertificateTimestamp(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string status = default;
            string origin = default;
            string logDescription = default;
            string logId = default;
            float timestamp = default;
            string hashAlgorithm = default;
            string signatureAlgorithm = default;
            string signatureData = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("origin"u8))
                {
                    origin = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("logDescription"u8))
                {
                    logDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("logId"u8))
                {
                    logId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timestamp"u8))
                {
                    timestamp = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("hashAlgorithm"u8))
                {
                    hashAlgorithm = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("signatureAlgorithm"u8))
                {
                    signatureAlgorithm = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("signatureData"u8))
                {
                    signatureData = property.Value.GetString();
                    continue;
                }
            }
            return new TypeSignedCertificateTimestamp(status, origin, logDescription, logId, timestamp, hashAlgorithm, signatureAlgorithm, signatureData);
        }

        internal partial class TypeSignedCertificateTimestampConverter : JsonConverter<TypeSignedCertificateTimestamp>
        {
            public override void Write(Utf8JsonWriter writer, TypeSignedCertificateTimestamp model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeSignedCertificateTimestamp Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeSignedCertificateTimestamp(document.RootElement);
            }
        }
    }
}
