// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeLayerConverter))]
    public partial class TypeLayer : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("layerId"u8);
            writer.WriteStringValue(LayerId);
            if (Optional.IsDefined(ParentLayerId))
            {
                writer.WritePropertyName("parentLayerId"u8);
                writer.WriteStringValue(ParentLayerId);
            }
            if (Optional.IsDefined(BackendNodeId))
            {
                writer.WritePropertyName("backendNodeId"u8);
                writer.WriteNumberValue(BackendNodeId.Value);
            }
            writer.WritePropertyName("offsetX"u8);
            writer.WriteNumberValue(OffsetX);
            writer.WritePropertyName("offsetY"u8);
            writer.WriteNumberValue(OffsetY);
            writer.WritePropertyName("width"u8);
            writer.WriteNumberValue(Width);
            writer.WritePropertyName("height"u8);
            writer.WriteNumberValue(Height);
            if (Optional.IsCollectionDefined(Transform))
            {
                writer.WritePropertyName("transform"u8);
                writer.WriteStartArray();
                foreach (var item in Transform)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AnchorX))
            {
                writer.WritePropertyName("anchorX"u8);
                writer.WriteNumberValue(AnchorX.Value);
            }
            if (Optional.IsDefined(AnchorY))
            {
                writer.WritePropertyName("anchorY"u8);
                writer.WriteNumberValue(AnchorY.Value);
            }
            if (Optional.IsDefined(AnchorZ))
            {
                writer.WritePropertyName("anchorZ"u8);
                writer.WriteNumberValue(AnchorZ.Value);
            }
            writer.WritePropertyName("paintCount"u8);
            writer.WriteNumberValue(PaintCount);
            writer.WritePropertyName("drawsContent"u8);
            writer.WriteBooleanValue(DrawsContent);
            if (Optional.IsDefined(Invisible))
            {
                writer.WritePropertyName("invisible"u8);
                writer.WriteBooleanValue(Invisible.Value);
            }
            if (Optional.IsCollectionDefined(ScrollRects))
            {
                writer.WritePropertyName("scrollRects"u8);
                writer.WriteStartArray();
                foreach (var item in ScrollRects)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(StickyPositionConstraint))
            {
                writer.WritePropertyName("stickyPositionConstraint"u8);
                writer.WriteObjectValue(StickyPositionConstraint);
            }
            writer.WriteEndObject();
        }

        internal static TypeLayer DeserializeTypeLayer(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string layerId = default;
            Optional<string> parentLayerId = default;
            Optional<int> backendNodeId = default;
            float offsetX = default;
            float offsetY = default;
            float width = default;
            float height = default;
            Optional<IList<float>> transform = default;
            Optional<float> anchorX = default;
            Optional<float> anchorY = default;
            Optional<float> anchorZ = default;
            int paintCount = default;
            bool drawsContent = default;
            Optional<bool> invisible = default;
            Optional<IList<TypeScrollRect>> scrollRects = default;
            Optional<TypeStickyPositionConstraint> stickyPositionConstraint = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("layerId"u8))
                {
                    layerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parentLayerId"u8))
                {
                    parentLayerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("backendNodeId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    backendNodeId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("offsetX"u8))
                {
                    offsetX = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("offsetY"u8))
                {
                    offsetY = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("width"u8))
                {
                    width = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("height"u8))
                {
                    height = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("transform"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<float> array = new List<float>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetSingle());
                    }
                    transform = array;
                    continue;
                }
                if (property.NameEquals("anchorX"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    anchorX = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("anchorY"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    anchorY = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("anchorZ"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    anchorZ = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("paintCount"u8))
                {
                    paintCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("drawsContent"u8))
                {
                    drawsContent = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("invisible"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    invisible = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("scrollRects"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypeScrollRect> array = new List<TypeScrollRect>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeScrollRect.DeserializeTypeScrollRect(item));
                    }
                    scrollRects = array;
                    continue;
                }
                if (property.NameEquals("stickyPositionConstraint"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    stickyPositionConstraint = TypeStickyPositionConstraint.DeserializeTypeStickyPositionConstraint(property.Value);
                    continue;
                }
            }
            return new TypeLayer(layerId, parentLayerId.Value, Optional.ToNullable(backendNodeId), offsetX, offsetY, width, height, Optional.ToList(transform), Optional.ToNullable(anchorX), Optional.ToNullable(anchorY), Optional.ToNullable(anchorZ), paintCount, drawsContent, Optional.ToNullable(invisible), Optional.ToList(scrollRects), stickyPositionConstraint.Value);
        }

        internal partial class TypeLayerConverter : JsonConverter<TypeLayer>
        {
            public override void Write(Utf8JsonWriter writer, TypeLayer model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeLayer Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeLayer(document.RootElement);
            }
        }
    }
}
