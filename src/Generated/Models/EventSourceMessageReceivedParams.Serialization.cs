// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventSourceMessageReceivedParamsConverter))]
    public partial class EventSourceMessageReceivedParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("requestId"u8);
            writer.WriteStringValue(RequestId);
            writer.WritePropertyName("timestamp"u8);
            writer.WriteNumberValue(Timestamp);
            writer.WritePropertyName("eventName"u8);
            writer.WriteStringValue(EventName);
            writer.WritePropertyName("eventId"u8);
            writer.WriteStringValue(EventId);
            writer.WritePropertyName("data"u8);
            writer.WriteStringValue(Data);
            writer.WriteEndObject();
        }

        internal static EventSourceMessageReceivedParams DeserializeEventSourceMessageReceivedParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string requestId = default;
            float timestamp = default;
            string eventName = default;
            string eventId = default;
            string data = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requestId"u8))
                {
                    requestId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timestamp"u8))
                {
                    timestamp = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("eventName"u8))
                {
                    eventName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eventId"u8))
                {
                    eventId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("data"u8))
                {
                    data = property.Value.GetString();
                    continue;
                }
            }
            return new EventSourceMessageReceivedParams(requestId, timestamp, eventName, eventId, data);
        }

        internal partial class EventSourceMessageReceivedParamsConverter : JsonConverter<EventSourceMessageReceivedParams>
        {
            public override void Write(Utf8JsonWriter writer, EventSourceMessageReceivedParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventSourceMessageReceivedParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventSourceMessageReceivedParams(document.RootElement);
            }
        }
    }
}
