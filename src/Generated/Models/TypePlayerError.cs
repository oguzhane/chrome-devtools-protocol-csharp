// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> Corresponds to kMediaError. </summary>
    public partial class TypePlayerError
    {
        /// <summary> Initializes a new instance of TypePlayerError. </summary>
        /// <param name="errorType"></param>
        /// <param name="code">
        /// Code is the numeric enum entry for a specific set of error codes, such
        /// as PipelineStatusCodes in media/base/pipeline_status.h
        /// </param>
        /// <param name="stack"> A trace of where this error was caused / where it passed through. </param>
        /// <param name="cause">
        /// Errors potentially have a root cause error, ie, a DecoderError might be
        /// caused by an WindowsError
        /// </param>
        /// <param name="data"> Extra data attached to an error, such as an HRESULT, Video Codec, etc. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="errorType"/>, <paramref name="stack"/>, <paramref name="cause"/> or <paramref name="data"/> is null. </exception>
        public TypePlayerError(string errorType, int code, IEnumerable<TypePlayerErrorSourceLocation> stack, IEnumerable<TypePlayerError> cause, object data)
        {
            Argument.AssertNotNull(errorType, nameof(errorType));
            Argument.AssertNotNull(stack, nameof(stack));
            Argument.AssertNotNull(cause, nameof(cause));
            Argument.AssertNotNull(data, nameof(data));

            ErrorType = errorType;
            Code = code;
            Stack = stack.ToList();
            Cause = cause.ToList();
            Data = data;
        }

        /// <summary> Initializes a new instance of TypePlayerError. </summary>
        /// <param name="errorType"></param>
        /// <param name="code">
        /// Code is the numeric enum entry for a specific set of error codes, such
        /// as PipelineStatusCodes in media/base/pipeline_status.h
        /// </param>
        /// <param name="stack"> A trace of where this error was caused / where it passed through. </param>
        /// <param name="cause">
        /// Errors potentially have a root cause error, ie, a DecoderError might be
        /// caused by an WindowsError
        /// </param>
        /// <param name="data"> Extra data attached to an error, such as an HRESULT, Video Codec, etc. </param>
        internal TypePlayerError(string errorType, int code, IList<TypePlayerErrorSourceLocation> stack, IList<TypePlayerError> cause, object data)
        {
            ErrorType = errorType;
            Code = code;
            Stack = stack;
            Cause = cause;
            Data = data;
        }

        /// <summary> Gets or sets the error type. </summary>
        public string ErrorType { get; set; }
        /// <summary>
        /// Code is the numeric enum entry for a specific set of error codes, such
        /// as PipelineStatusCodes in media/base/pipeline_status.h
        /// </summary>
        public int Code { get; set; }
        /// <summary> A trace of where this error was caused / where it passed through. </summary>
        public IList<TypePlayerErrorSourceLocation> Stack { get; }
        /// <summary>
        /// Errors potentially have a root cause error, ie, a DecoderError might be
        /// caused by an WindowsError
        /// </summary>
        public IList<TypePlayerError> Cause { get; }
        /// <summary> Extra data attached to an error, such as an HRESULT, Video Codec, etc. </summary>
        public object Data { get; set; }
    }
}
