// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventScriptParsedParamsConverter))]
    public partial class EventScriptParsedParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("scriptId"u8);
            writer.WriteStringValue(ScriptId);
            writer.WritePropertyName("url"u8);
            writer.WriteStringValue(Url);
            writer.WritePropertyName("startLine"u8);
            writer.WriteNumberValue(StartLine);
            writer.WritePropertyName("startColumn"u8);
            writer.WriteNumberValue(StartColumn);
            writer.WritePropertyName("endLine"u8);
            writer.WriteNumberValue(EndLine);
            writer.WritePropertyName("endColumn"u8);
            writer.WriteNumberValue(EndColumn);
            writer.WritePropertyName("executionContextId"u8);
            writer.WriteNumberValue(ExecutionContextId);
            writer.WritePropertyName("hash"u8);
            writer.WriteStringValue(Hash);
            if (Optional.IsDefined(ExecutionContextAuxData))
            {
                writer.WritePropertyName("executionContextAuxData"u8);
                writer.WriteObjectValue(ExecutionContextAuxData);
            }
            if (Optional.IsDefined(IsLiveEdit))
            {
                writer.WritePropertyName("isLiveEdit"u8);
                writer.WriteBooleanValue(IsLiveEdit.Value);
            }
            if (Optional.IsDefined(SourceMapURL))
            {
                writer.WritePropertyName("sourceMapURL"u8);
                writer.WriteStringValue(SourceMapURL);
            }
            if (Optional.IsDefined(HasSourceURL))
            {
                writer.WritePropertyName("hasSourceURL"u8);
                writer.WriteBooleanValue(HasSourceURL.Value);
            }
            if (Optional.IsDefined(IsModule))
            {
                writer.WritePropertyName("isModule"u8);
                writer.WriteBooleanValue(IsModule.Value);
            }
            if (Optional.IsDefined(Length))
            {
                writer.WritePropertyName("length"u8);
                writer.WriteNumberValue(Length.Value);
            }
            if (Optional.IsDefined(StackTrace))
            {
                writer.WritePropertyName("stackTrace"u8);
                writer.WriteObjectValue(StackTrace);
            }
            if (Optional.IsDefined(CodeOffset))
            {
                writer.WritePropertyName("codeOffset"u8);
                writer.WriteNumberValue(CodeOffset.Value);
            }
            if (Optional.IsDefined(ScriptLanguage))
            {
                writer.WritePropertyName("scriptLanguage"u8);
                writer.WriteStringValue(ScriptLanguage);
            }
            if (Optional.IsDefined(DebugSymbols))
            {
                writer.WritePropertyName("debugSymbols"u8);
                writer.WriteObjectValue(DebugSymbols);
            }
            if (Optional.IsDefined(EmbedderName))
            {
                writer.WritePropertyName("embedderName"u8);
                writer.WriteStringValue(EmbedderName);
            }
            writer.WriteEndObject();
        }

        internal static EventScriptParsedParams DeserializeEventScriptParsedParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string scriptId = default;
            string url = default;
            int startLine = default;
            int startColumn = default;
            int endLine = default;
            int endColumn = default;
            int executionContextId = default;
            string hash = default;
            Optional<object> executionContextAuxData = default;
            Optional<bool> isLiveEdit = default;
            Optional<string> sourceMapURL = default;
            Optional<bool> hasSourceURL = default;
            Optional<bool> isModule = default;
            Optional<int> length = default;
            Optional<TypeStackTrace> stackTrace = default;
            Optional<int> codeOffset = default;
            Optional<string> scriptLanguage = default;
            Optional<TypeDebugSymbols> debugSymbols = default;
            Optional<string> embedderName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("scriptId"u8))
                {
                    scriptId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("startLine"u8))
                {
                    startLine = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("startColumn"u8))
                {
                    startColumn = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("endLine"u8))
                {
                    endLine = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("endColumn"u8))
                {
                    endColumn = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("executionContextId"u8))
                {
                    executionContextId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("hash"u8))
                {
                    hash = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("executionContextAuxData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    executionContextAuxData = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("isLiveEdit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isLiveEdit = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sourceMapURL"u8))
                {
                    sourceMapURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hasSourceURL"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hasSourceURL = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isModule"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isModule = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("length"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    length = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("stackTrace"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    stackTrace = TypeStackTrace.DeserializeTypeStackTrace(property.Value);
                    continue;
                }
                if (property.NameEquals("codeOffset"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    codeOffset = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("scriptLanguage"u8))
                {
                    scriptLanguage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("debugSymbols"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    debugSymbols = TypeDebugSymbols.DeserializeTypeDebugSymbols(property.Value);
                    continue;
                }
                if (property.NameEquals("embedderName"u8))
                {
                    embedderName = property.Value.GetString();
                    continue;
                }
            }
            return new EventScriptParsedParams(scriptId, url, startLine, startColumn, endLine, endColumn, executionContextId, hash, executionContextAuxData.Value, Optional.ToNullable(isLiveEdit), sourceMapURL.Value, Optional.ToNullable(hasSourceURL), Optional.ToNullable(isModule), Optional.ToNullable(length), stackTrace.Value, Optional.ToNullable(codeOffset), scriptLanguage.Value, debugSymbols.Value, embedderName.Value);
        }

        internal partial class EventScriptParsedParamsConverter : JsonConverter<EventScriptParsedParams>
        {
            public override void Write(Utf8JsonWriter writer, EventScriptParsedParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventScriptParsedParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventScriptParsedParams(document.RootElement);
            }
        }
    }
}
