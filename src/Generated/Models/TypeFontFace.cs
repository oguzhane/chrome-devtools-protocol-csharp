// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// Properties of a web font: https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions
    /// and additional information such as platformFontFamily and fontVariationAxes.
    /// </summary>
    public partial class TypeFontFace
    {
        /// <summary> Initializes a new instance of TypeFontFace. </summary>
        /// <param name="fontFamily"> The font-family. </param>
        /// <param name="fontStyle"> The font-style. </param>
        /// <param name="fontVariant"> The font-variant. </param>
        /// <param name="fontWeight"> The font-weight. </param>
        /// <param name="fontStretch"> The font-stretch. </param>
        /// <param name="fontDisplay"> The font-display. </param>
        /// <param name="unicodeRange"> The unicode-range. </param>
        /// <param name="src"> The src. </param>
        /// <param name="platformFontFamily"> The resolved platform font family. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fontFamily"/>, <paramref name="fontStyle"/>, <paramref name="fontVariant"/>, <paramref name="fontWeight"/>, <paramref name="fontStretch"/>, <paramref name="fontDisplay"/>, <paramref name="unicodeRange"/>, <paramref name="src"/> or <paramref name="platformFontFamily"/> is null. </exception>
        public TypeFontFace(string fontFamily, string fontStyle, string fontVariant, string fontWeight, string fontStretch, string fontDisplay, string unicodeRange, string src, string platformFontFamily)
        {
            Argument.AssertNotNull(fontFamily, nameof(fontFamily));
            Argument.AssertNotNull(fontStyle, nameof(fontStyle));
            Argument.AssertNotNull(fontVariant, nameof(fontVariant));
            Argument.AssertNotNull(fontWeight, nameof(fontWeight));
            Argument.AssertNotNull(fontStretch, nameof(fontStretch));
            Argument.AssertNotNull(fontDisplay, nameof(fontDisplay));
            Argument.AssertNotNull(unicodeRange, nameof(unicodeRange));
            Argument.AssertNotNull(src, nameof(src));
            Argument.AssertNotNull(platformFontFamily, nameof(platformFontFamily));

            FontFamily = fontFamily;
            FontStyle = fontStyle;
            FontVariant = fontVariant;
            FontWeight = fontWeight;
            FontStretch = fontStretch;
            FontDisplay = fontDisplay;
            UnicodeRange = unicodeRange;
            Src = src;
            PlatformFontFamily = platformFontFamily;
            FontVariationAxes = new ChangeTrackingList<TypeFontVariationAxis>();
        }

        /// <summary> Initializes a new instance of TypeFontFace. </summary>
        /// <param name="fontFamily"> The font-family. </param>
        /// <param name="fontStyle"> The font-style. </param>
        /// <param name="fontVariant"> The font-variant. </param>
        /// <param name="fontWeight"> The font-weight. </param>
        /// <param name="fontStretch"> The font-stretch. </param>
        /// <param name="fontDisplay"> The font-display. </param>
        /// <param name="unicodeRange"> The unicode-range. </param>
        /// <param name="src"> The src. </param>
        /// <param name="platformFontFamily"> The resolved platform font family. </param>
        /// <param name="fontVariationAxes"> Available variation settings (a.k.a. &quot;axes&quot;). </param>
        internal TypeFontFace(string fontFamily, string fontStyle, string fontVariant, string fontWeight, string fontStretch, string fontDisplay, string unicodeRange, string src, string platformFontFamily, IList<TypeFontVariationAxis> fontVariationAxes)
        {
            FontFamily = fontFamily;
            FontStyle = fontStyle;
            FontVariant = fontVariant;
            FontWeight = fontWeight;
            FontStretch = fontStretch;
            FontDisplay = fontDisplay;
            UnicodeRange = unicodeRange;
            Src = src;
            PlatformFontFamily = platformFontFamily;
            FontVariationAxes = fontVariationAxes;
        }

        /// <summary> The font-family. </summary>
        public string FontFamily { get; set; }
        /// <summary> The font-style. </summary>
        public string FontStyle { get; set; }
        /// <summary> The font-variant. </summary>
        public string FontVariant { get; set; }
        /// <summary> The font-weight. </summary>
        public string FontWeight { get; set; }
        /// <summary> The font-stretch. </summary>
        public string FontStretch { get; set; }
        /// <summary> The font-display. </summary>
        public string FontDisplay { get; set; }
        /// <summary> The unicode-range. </summary>
        public string UnicodeRange { get; set; }
        /// <summary> The src. </summary>
        public string Src { get; set; }
        /// <summary> The resolved platform font family. </summary>
        public string PlatformFontFamily { get; set; }
        /// <summary> Available variation settings (a.k.a. &quot;axes&quot;). </summary>
        public IList<TypeFontVariationAxis> FontVariationAxes { get; }
    }
}
