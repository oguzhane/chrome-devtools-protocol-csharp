// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventJavascriptDialogOpeningParamsConverter))]
    public partial class EventJavascriptDialogOpeningParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("url"u8);
            writer.WriteStringValue(Url);
            writer.WritePropertyName("message"u8);
            writer.WriteStringValue(Message);
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            writer.WritePropertyName("hasBrowserHandler"u8);
            writer.WriteBooleanValue(HasBrowserHandler);
            if (Optional.IsDefined(DefaultPrompt))
            {
                writer.WritePropertyName("defaultPrompt"u8);
                writer.WriteStringValue(DefaultPrompt);
            }
            writer.WriteEndObject();
        }

        internal static EventJavascriptDialogOpeningParams DeserializeEventJavascriptDialogOpeningParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string url = default;
            string message = default;
            string type = default;
            bool hasBrowserHandler = default;
            Optional<string> defaultPrompt = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("message"u8))
                {
                    message = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hasBrowserHandler"u8))
                {
                    hasBrowserHandler = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("defaultPrompt"u8))
                {
                    defaultPrompt = property.Value.GetString();
                    continue;
                }
            }
            return new EventJavascriptDialogOpeningParams(url, message, type, hasBrowserHandler, defaultPrompt.Value);
        }

        internal partial class EventJavascriptDialogOpeningParamsConverter : JsonConverter<EventJavascriptDialogOpeningParams>
        {
            public override void Write(Utf8JsonWriter writer, EventJavascriptDialogOpeningParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventJavascriptDialogOpeningParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventJavascriptDialogOpeningParams(document.RootElement);
            }
        }
    }
}
