// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// Fired exactly once for each Trust Token operation. Depending on
    /// the type of the operation and whether the operation succeeded or
    /// failed, the event is fired before the corresponding request was sent
    /// or after the response was received.
    /// </summary>
    public partial class EventTrustTokenOperationDoneParams
    {
        /// <summary> Initializes a new instance of EventTrustTokenOperationDoneParams. </summary>
        /// <param name="status">
        /// Detailed success or error status of the operation.
        /// &apos;AlreadyExists&apos; also signifies a successful operation, as the result
        /// of the operation already exists und thus, the operation was abort
        /// preemptively (e.g. a cache hit).
        /// </param>
        /// <param name="type"></param>
        /// <param name="requestId"> Device request id. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="status"/>, <paramref name="type"/> or <paramref name="requestId"/> is null. </exception>
        public EventTrustTokenOperationDoneParams(string status, string type, string requestId)
        {
            Argument.AssertNotNull(status, nameof(status));
            Argument.AssertNotNull(type, nameof(type));
            Argument.AssertNotNull(requestId, nameof(requestId));

            Status = status;
            Type = type;
            RequestId = requestId;
        }

        /// <summary> Initializes a new instance of EventTrustTokenOperationDoneParams. </summary>
        /// <param name="status">
        /// Detailed success or error status of the operation.
        /// &apos;AlreadyExists&apos; also signifies a successful operation, as the result
        /// of the operation already exists und thus, the operation was abort
        /// preemptively (e.g. a cache hit).
        /// </param>
        /// <param name="type"></param>
        /// <param name="requestId"> Device request id. </param>
        /// <param name="topLevelOrigin"> Top level origin. The context in which the operation was attempted. </param>
        /// <param name="issuerOrigin"> Origin of the issuer in case of a &quot;Issuance&quot; or &quot;Redemption&quot; operation. </param>
        /// <param name="issuedTokenCount"> The number of obtained Trust Tokens on a successful &quot;Issuance&quot; operation. </param>
        internal EventTrustTokenOperationDoneParams(string status, string type, string requestId, string topLevelOrigin, string issuerOrigin, int? issuedTokenCount)
        {
            Status = status;
            Type = type;
            RequestId = requestId;
            TopLevelOrigin = topLevelOrigin;
            IssuerOrigin = issuerOrigin;
            IssuedTokenCount = issuedTokenCount;
        }

        /// <summary>
        /// Detailed success or error status of the operation.
        /// &apos;AlreadyExists&apos; also signifies a successful operation, as the result
        /// of the operation already exists und thus, the operation was abort
        /// preemptively (e.g. a cache hit).
        /// </summary>
        public string Status { get; set; }
        /// <summary> Gets or sets the type. </summary>
        public string Type { get; set; }
        /// <summary> Device request id. </summary>
        public string RequestId { get; set; }
        /// <summary> Top level origin. The context in which the operation was attempted. </summary>
        public string TopLevelOrigin { get; set; }
        /// <summary> Origin of the issuer in case of a &quot;Issuance&quot; or &quot;Redemption&quot; operation. </summary>
        public string IssuerOrigin { get; set; }
        /// <summary> The number of obtained Trust Tokens on a successful &quot;Issuance&quot; operation. </summary>
        public int? IssuedTokenCount { get; set; }
    }
}
