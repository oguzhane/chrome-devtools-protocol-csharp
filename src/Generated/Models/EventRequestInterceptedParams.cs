// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    /// mocked.
    /// Deprecated, use Fetch.requestPaused instead.
    /// </summary>
    public partial class EventRequestInterceptedParams
    {
        /// <summary> Initializes a new instance of EventRequestInterceptedParams. </summary>
        /// <param name="interceptionId">
        /// Each request the page makes will have a unique id, however if any redirects are encountered
        /// while processing that fetch, they will be reported with the same id as the original fetch.
        /// Likewise if HTTP authentication is needed then the same fetch id will be used.
        /// </param>
        /// <param name="request"> HTTP request data. </param>
        /// <param name="frameId"> The id of the frame that initiated the request. </param>
        /// <param name="resourceType"> How the requested resource will be used. </param>
        /// <param name="isNavigationRequest"> Whether this is a navigation request, which can abort the navigation completely. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="interceptionId"/>, <paramref name="request"/>, <paramref name="frameId"/> or <paramref name="resourceType"/> is null. </exception>
        public EventRequestInterceptedParams(string interceptionId, TypeRequest request, string frameId, string resourceType, bool isNavigationRequest)
        {
            Argument.AssertNotNull(interceptionId, nameof(interceptionId));
            Argument.AssertNotNull(request, nameof(request));
            Argument.AssertNotNull(frameId, nameof(frameId));
            Argument.AssertNotNull(resourceType, nameof(resourceType));

            InterceptionId = interceptionId;
            Request = request;
            FrameId = frameId;
            ResourceType = resourceType;
            IsNavigationRequest = isNavigationRequest;
        }

        /// <summary> Initializes a new instance of EventRequestInterceptedParams. </summary>
        /// <param name="interceptionId">
        /// Each request the page makes will have a unique id, however if any redirects are encountered
        /// while processing that fetch, they will be reported with the same id as the original fetch.
        /// Likewise if HTTP authentication is needed then the same fetch id will be used.
        /// </param>
        /// <param name="request"> HTTP request data. </param>
        /// <param name="frameId"> The id of the frame that initiated the request. </param>
        /// <param name="resourceType"> How the requested resource will be used. </param>
        /// <param name="isNavigationRequest"> Whether this is a navigation request, which can abort the navigation completely. </param>
        /// <param name="isDownload">
        /// Set if the request is a navigation that will result in a download.
        /// Only present after response is received from the server (i.e. HeadersReceived stage).
        /// </param>
        /// <param name="redirectUrl"> Redirect location, only sent if a redirect was intercepted. </param>
        /// <param name="authChallenge">
        /// Details of the Authorization Challenge encountered. If this is set then
        /// continueInterceptedRequest must contain an authChallengeResponse.
        /// </param>
        /// <param name="responseErrorReason">
        /// Response error if intercepted at response stage or if redirect occurred while intercepting
        /// request.
        /// </param>
        /// <param name="responseStatusCode">
        /// Response code if intercepted at response stage or if redirect occurred while intercepting
        /// request or auth retry occurred.
        /// </param>
        /// <param name="responseHeaders">
        /// Response headers if intercepted at the response stage or if redirect occurred while
        /// intercepting request or auth retry occurred.
        /// </param>
        /// <param name="requestId">
        /// If the intercepted request had a corresponding requestWillBeSent event fired for it, then
        /// this requestId will be the same as the requestId present in the requestWillBeSent event.
        /// </param>
        internal EventRequestInterceptedParams(string interceptionId, TypeRequest request, string frameId, string resourceType, bool isNavigationRequest, bool? isDownload, string redirectUrl, TypeAuthChallenge authChallenge, string responseErrorReason, int? responseStatusCode, object responseHeaders, string requestId)
        {
            InterceptionId = interceptionId;
            Request = request;
            FrameId = frameId;
            ResourceType = resourceType;
            IsNavigationRequest = isNavigationRequest;
            IsDownload = isDownload;
            RedirectUrl = redirectUrl;
            AuthChallenge = authChallenge;
            ResponseErrorReason = responseErrorReason;
            ResponseStatusCode = responseStatusCode;
            ResponseHeaders = responseHeaders;
            RequestId = requestId;
        }

        /// <summary>
        /// Each request the page makes will have a unique id, however if any redirects are encountered
        /// while processing that fetch, they will be reported with the same id as the original fetch.
        /// Likewise if HTTP authentication is needed then the same fetch id will be used.
        /// </summary>
        public string InterceptionId { get; set; }
        /// <summary> HTTP request data. </summary>
        public TypeRequest Request { get; set; }
        /// <summary> The id of the frame that initiated the request. </summary>
        public string FrameId { get; set; }
        /// <summary> How the requested resource will be used. </summary>
        public string ResourceType { get; set; }
        /// <summary> Whether this is a navigation request, which can abort the navigation completely. </summary>
        public bool IsNavigationRequest { get; set; }
        /// <summary>
        /// Set if the request is a navigation that will result in a download.
        /// Only present after response is received from the server (i.e. HeadersReceived stage).
        /// </summary>
        public bool? IsDownload { get; set; }
        /// <summary> Redirect location, only sent if a redirect was intercepted. </summary>
        public string RedirectUrl { get; set; }
        /// <summary>
        /// Details of the Authorization Challenge encountered. If this is set then
        /// continueInterceptedRequest must contain an authChallengeResponse.
        /// </summary>
        public TypeAuthChallenge AuthChallenge { get; set; }
        /// <summary>
        /// Response error if intercepted at response stage or if redirect occurred while intercepting
        /// request.
        /// </summary>
        public string ResponseErrorReason { get; set; }
        /// <summary>
        /// Response code if intercepted at response stage or if redirect occurred while intercepting
        /// request or auth retry occurred.
        /// </summary>
        public int? ResponseStatusCode { get; set; }
        /// <summary>
        /// Response headers if intercepted at the response stage or if redirect occurred while
        /// intercepting request or auth retry occurred.
        /// </summary>
        public object ResponseHeaders { get; set; }
        /// <summary>
        /// If the intercepted request had a corresponding requestWillBeSent event fired for it, then
        /// this requestId will be the same as the requestId present in the requestWillBeSent event.
        /// </summary>
        public string RequestId { get; set; }
    }
}
