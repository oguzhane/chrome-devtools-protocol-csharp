// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeServiceWorkerErrorMessageConverter))]
    public partial class TypeServiceWorkerErrorMessage : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("errorMessage"u8);
            writer.WriteStringValue(ErrorMessage);
            writer.WritePropertyName("registrationId"u8);
            writer.WriteStringValue(RegistrationId);
            writer.WritePropertyName("versionId"u8);
            writer.WriteStringValue(VersionId);
            writer.WritePropertyName("sourceURL"u8);
            writer.WriteStringValue(SourceURL);
            writer.WritePropertyName("lineNumber"u8);
            writer.WriteNumberValue(LineNumber);
            writer.WritePropertyName("columnNumber"u8);
            writer.WriteNumberValue(ColumnNumber);
            writer.WriteEndObject();
        }

        internal static TypeServiceWorkerErrorMessage DeserializeTypeServiceWorkerErrorMessage(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string errorMessage = default;
            string registrationId = default;
            string versionId = default;
            string sourceURL = default;
            int lineNumber = default;
            int columnNumber = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("errorMessage"u8))
                {
                    errorMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("registrationId"u8))
                {
                    registrationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("versionId"u8))
                {
                    versionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceURL"u8))
                {
                    sourceURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lineNumber"u8))
                {
                    lineNumber = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("columnNumber"u8))
                {
                    columnNumber = property.Value.GetInt32();
                    continue;
                }
            }
            return new TypeServiceWorkerErrorMessage(errorMessage, registrationId, versionId, sourceURL, lineNumber, columnNumber);
        }

        internal partial class TypeServiceWorkerErrorMessageConverter : JsonConverter<TypeServiceWorkerErrorMessage>
        {
            public override void Write(Utf8JsonWriter writer, TypeServiceWorkerErrorMessage model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeServiceWorkerErrorMessage Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeServiceWorkerErrorMessage(document.RootElement);
            }
        }
    }
}
