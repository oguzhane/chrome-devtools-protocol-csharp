// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeInspectorIssueConverter))]
    public partial class TypeInspectorIssue : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("code"u8);
            writer.WriteStringValue(Code);
            writer.WritePropertyName("details"u8);
            writer.WriteObjectValue(Details);
            if (Optional.IsDefined(IssueId))
            {
                writer.WritePropertyName("issueId"u8);
                writer.WriteStringValue(IssueId);
            }
            writer.WriteEndObject();
        }

        internal static TypeInspectorIssue DeserializeTypeInspectorIssue(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string code = default;
            TypeInspectorIssueDetails details = default;
            Optional<string> issueId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("code"u8))
                {
                    code = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("details"u8))
                {
                    details = TypeInspectorIssueDetails.DeserializeTypeInspectorIssueDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("issueId"u8))
                {
                    issueId = property.Value.GetString();
                    continue;
                }
            }
            return new TypeInspectorIssue(code, details, issueId.Value);
        }

        internal partial class TypeInspectorIssueConverter : JsonConverter<TypeInspectorIssue>
        {
            public override void Write(Utf8JsonWriter writer, TypeInspectorIssue model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeInspectorIssue Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeInspectorIssue(document.RootElement);
            }
        }
    }
}
