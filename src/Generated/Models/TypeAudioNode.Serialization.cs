// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeAudioNodeConverter))]
    public partial class TypeAudioNode : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("nodeId"u8);
            writer.WriteStringValue(NodeId);
            writer.WritePropertyName("contextId"u8);
            writer.WriteStringValue(ContextId);
            writer.WritePropertyName("nodeType"u8);
            writer.WriteStringValue(NodeType);
            writer.WritePropertyName("numberOfInputs"u8);
            writer.WriteNumberValue(NumberOfInputs);
            writer.WritePropertyName("numberOfOutputs"u8);
            writer.WriteNumberValue(NumberOfOutputs);
            writer.WritePropertyName("channelCount"u8);
            writer.WriteNumberValue(ChannelCount);
            writer.WritePropertyName("channelCountMode"u8);
            writer.WriteStringValue(ChannelCountMode);
            writer.WritePropertyName("channelInterpretation"u8);
            writer.WriteStringValue(ChannelInterpretation);
            writer.WriteEndObject();
        }

        internal static TypeAudioNode DeserializeTypeAudioNode(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string nodeId = default;
            string contextId = default;
            string nodeType = default;
            float numberOfInputs = default;
            float numberOfOutputs = default;
            float channelCount = default;
            string channelCountMode = default;
            string channelInterpretation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("nodeId"u8))
                {
                    nodeId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("contextId"u8))
                {
                    contextId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nodeType"u8))
                {
                    nodeType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("numberOfInputs"u8))
                {
                    numberOfInputs = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("numberOfOutputs"u8))
                {
                    numberOfOutputs = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("channelCount"u8))
                {
                    channelCount = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("channelCountMode"u8))
                {
                    channelCountMode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("channelInterpretation"u8))
                {
                    channelInterpretation = property.Value.GetString();
                    continue;
                }
            }
            return new TypeAudioNode(nodeId, contextId, nodeType, numberOfInputs, numberOfOutputs, channelCount, channelCountMode, channelInterpretation);
        }

        internal partial class TypeAudioNodeConverter : JsonConverter<TypeAudioNode>
        {
            public override void Write(Utf8JsonWriter writer, TypeAudioNode model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeAudioNode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeAudioNode(document.RootElement);
            }
        }
    }
}
