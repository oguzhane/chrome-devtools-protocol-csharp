// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeCallFrameConverter))]
    public partial class TypeCallFrame : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("callFrameId"u8);
            writer.WriteStringValue(CallFrameId);
            writer.WritePropertyName("functionName"u8);
            writer.WriteStringValue(FunctionName);
            if (Optional.IsDefined(FunctionLocation))
            {
                writer.WritePropertyName("functionLocation"u8);
                writer.WriteObjectValue(FunctionLocation);
            }
            writer.WritePropertyName("location"u8);
            writer.WriteObjectValue(Location);
            writer.WritePropertyName("url"u8);
            writer.WriteStringValue(Url);
            writer.WritePropertyName("scopeChain"u8);
            writer.WriteStartArray();
            foreach (var item in ScopeChain)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("this"u8);
            writer.WriteObjectValue(This);
            if (Optional.IsDefined(ReturnValue))
            {
                writer.WritePropertyName("returnValue"u8);
                writer.WriteObjectValue(ReturnValue);
            }
            if (Optional.IsDefined(CanBeRestarted))
            {
                writer.WritePropertyName("canBeRestarted"u8);
                writer.WriteBooleanValue(CanBeRestarted.Value);
            }
            writer.WriteEndObject();
        }

        internal static TypeCallFrame DeserializeTypeCallFrame(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string callFrameId = default;
            string functionName = default;
            Optional<TypeLocation> functionLocation = default;
            TypeLocation location = default;
            string url = default;
            IList<TypeScope> scopeChain = default;
            TypeRemoteObject @this = default;
            Optional<TypeRemoteObject> returnValue = default;
            Optional<bool> canBeRestarted = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("callFrameId"u8))
                {
                    callFrameId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("functionName"u8))
                {
                    functionName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("functionLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    functionLocation = TypeLocation.DeserializeTypeLocation(property.Value);
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = TypeLocation.DeserializeTypeLocation(property.Value);
                    continue;
                }
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scopeChain"u8))
                {
                    List<TypeScope> array = new List<TypeScope>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeScope.DeserializeTypeScope(item));
                    }
                    scopeChain = array;
                    continue;
                }
                if (property.NameEquals("this"u8))
                {
                    @this = TypeRemoteObject.DeserializeTypeRemoteObject(property.Value);
                    continue;
                }
                if (property.NameEquals("returnValue"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    returnValue = TypeRemoteObject.DeserializeTypeRemoteObject(property.Value);
                    continue;
                }
                if (property.NameEquals("canBeRestarted"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    canBeRestarted = property.Value.GetBoolean();
                    continue;
                }
            }
            return new TypeCallFrame(callFrameId, functionName, functionLocation.Value, location, url, scopeChain, @this, returnValue.Value, Optional.ToNullable(canBeRestarted));
        }

        internal partial class TypeCallFrameConverter : JsonConverter<TypeCallFrame>
        {
            public override void Write(Utf8JsonWriter writer, TypeCallFrame model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeCallFrame Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeCallFrame(document.RootElement);
            }
        }
    }
}
