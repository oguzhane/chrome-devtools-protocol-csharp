// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeEntryPreviewConverter))]
    public partial class TypeEntryPreview : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Key))
            {
                writer.WritePropertyName("key"u8);
                writer.WriteObjectValue(Key);
            }
            writer.WritePropertyName("value"u8);
            writer.WriteObjectValue(Value);
            writer.WriteEndObject();
        }

        internal static TypeEntryPreview DeserializeTypeEntryPreview(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<TypeObjectPreview> key = default;
            TypeObjectPreview value = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("key"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    key = TypeObjectPreview.DeserializeTypeObjectPreview(property.Value);
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    value = TypeObjectPreview.DeserializeTypeObjectPreview(property.Value);
                    continue;
                }
            }
            return new TypeEntryPreview(key.Value, value);
        }

        internal partial class TypeEntryPreviewConverter : JsonConverter<TypeEntryPreview>
        {
            public override void Write(Utf8JsonWriter writer, TypeEntryPreview model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeEntryPreview Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeEntryPreview(document.RootElement);
            }
        }
    }
}
