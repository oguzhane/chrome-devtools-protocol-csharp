// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> Fired when HTTP response is available. </summary>
    public partial class EventResponseReceivedParams
    {
        /// <summary> Initializes a new instance of EventResponseReceivedParams. </summary>
        /// <param name="requestId"> Request identifier. </param>
        /// <param name="loaderId"> Loader identifier. Empty string if the request is fetched from worker. </param>
        /// <param name="timestamp"> Timestamp. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="response"> Response data. </param>
        /// <param name="hasExtraInfo">
        /// Indicates whether requestWillBeSentExtraInfo and responseReceivedExtraInfo events will be
        /// or were emitted for this request.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestId"/>, <paramref name="loaderId"/>, <paramref name="type"/> or <paramref name="response"/> is null. </exception>
        public EventResponseReceivedParams(string requestId, string loaderId, float timestamp, string type, TypeResponse response, bool hasExtraInfo)
        {
            Argument.AssertNotNull(requestId, nameof(requestId));
            Argument.AssertNotNull(loaderId, nameof(loaderId));
            Argument.AssertNotNull(type, nameof(type));
            Argument.AssertNotNull(response, nameof(response));

            RequestId = requestId;
            LoaderId = loaderId;
            Timestamp = timestamp;
            Type = type;
            Response = response;
            HasExtraInfo = hasExtraInfo;
        }

        /// <summary> Initializes a new instance of EventResponseReceivedParams. </summary>
        /// <param name="requestId"> Request identifier. </param>
        /// <param name="loaderId"> Loader identifier. Empty string if the request is fetched from worker. </param>
        /// <param name="timestamp"> Timestamp. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="response"> Response data. </param>
        /// <param name="hasExtraInfo">
        /// Indicates whether requestWillBeSentExtraInfo and responseReceivedExtraInfo events will be
        /// or were emitted for this request.
        /// </param>
        /// <param name="frameId"> Frame identifier. </param>
        internal EventResponseReceivedParams(string requestId, string loaderId, float timestamp, string type, TypeResponse response, bool hasExtraInfo, string frameId)
        {
            RequestId = requestId;
            LoaderId = loaderId;
            Timestamp = timestamp;
            Type = type;
            Response = response;
            HasExtraInfo = hasExtraInfo;
            FrameId = frameId;
        }

        /// <summary> Request identifier. </summary>
        public string RequestId { get; set; }
        /// <summary> Loader identifier. Empty string if the request is fetched from worker. </summary>
        public string LoaderId { get; set; }
        /// <summary> Timestamp. </summary>
        public float Timestamp { get; set; }
        /// <summary> Resource type. </summary>
        public string Type { get; set; }
        /// <summary> Response data. </summary>
        public TypeResponse Response { get; set; }
        /// <summary>
        /// Indicates whether requestWillBeSentExtraInfo and responseReceivedExtraInfo events will be
        /// or were emitted for this request.
        /// </summary>
        public bool HasExtraInfo { get; set; }
        /// <summary> Frame identifier. </summary>
        public string FrameId { get; set; }
    }
}
