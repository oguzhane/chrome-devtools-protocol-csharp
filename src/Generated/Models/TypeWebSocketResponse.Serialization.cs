// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeWebSocketResponseConverter))]
    public partial class TypeWebSocketResponse : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("status"u8);
            writer.WriteNumberValue(Status);
            writer.WritePropertyName("statusText"u8);
            writer.WriteStringValue(StatusText);
            writer.WritePropertyName("headers"u8);
            writer.WriteObjectValue(Headers);
            if (Optional.IsDefined(HeadersText))
            {
                writer.WritePropertyName("headersText"u8);
                writer.WriteStringValue(HeadersText);
            }
            if (Optional.IsDefined(RequestHeaders))
            {
                writer.WritePropertyName("requestHeaders"u8);
                writer.WriteObjectValue(RequestHeaders);
            }
            if (Optional.IsDefined(RequestHeadersText))
            {
                writer.WritePropertyName("requestHeadersText"u8);
                writer.WriteStringValue(RequestHeadersText);
            }
            writer.WriteEndObject();
        }

        internal static TypeWebSocketResponse DeserializeTypeWebSocketResponse(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int status = default;
            string statusText = default;
            object headers = default;
            Optional<string> headersText = default;
            Optional<object> requestHeaders = default;
            Optional<string> requestHeadersText = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("statusText"u8))
                {
                    statusText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("headers"u8))
                {
                    headers = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("headersText"u8))
                {
                    headersText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requestHeaders"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    requestHeaders = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("requestHeadersText"u8))
                {
                    requestHeadersText = property.Value.GetString();
                    continue;
                }
            }
            return new TypeWebSocketResponse(status, statusText, headers, headersText.Value, requestHeaders.Value, requestHeadersText.Value);
        }

        internal partial class TypeWebSocketResponseConverter : JsonConverter<TypeWebSocketResponse>
        {
            public override void Write(Utf8JsonWriter writer, TypeWebSocketResponse model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeWebSocketResponse Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeWebSocketResponse(document.RootElement);
            }
        }
    }
}
