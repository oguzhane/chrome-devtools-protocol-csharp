// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeAxValueSourceConverter))]
    public partial class TypeAxValueSource : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value"u8);
                writer.WriteObjectValue(Value);
            }
            if (Optional.IsDefined(Attribute))
            {
                writer.WritePropertyName("attribute"u8);
                writer.WriteStringValue(Attribute);
            }
            if (Optional.IsDefined(AttributeValue))
            {
                writer.WritePropertyName("attributeValue"u8);
                writer.WriteObjectValue(AttributeValue);
            }
            if (Optional.IsDefined(Superseded))
            {
                writer.WritePropertyName("superseded"u8);
                writer.WriteBooleanValue(Superseded.Value);
            }
            if (Optional.IsDefined(NativeSource))
            {
                writer.WritePropertyName("nativeSource"u8);
                writer.WriteStringValue(NativeSource);
            }
            if (Optional.IsDefined(NativeSourceValue))
            {
                writer.WritePropertyName("nativeSourceValue"u8);
                writer.WriteObjectValue(NativeSourceValue);
            }
            if (Optional.IsDefined(Invalid))
            {
                writer.WritePropertyName("invalid"u8);
                writer.WriteBooleanValue(Invalid.Value);
            }
            if (Optional.IsDefined(InvalidReason))
            {
                writer.WritePropertyName("invalidReason"u8);
                writer.WriteStringValue(InvalidReason);
            }
            writer.WriteEndObject();
        }

        internal static TypeAxValueSource DeserializeTypeAxValueSource(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string type = default;
            Optional<TypeAxValue> value = default;
            Optional<string> attribute = default;
            Optional<TypeAxValue> attributeValue = default;
            Optional<bool> superseded = default;
            Optional<string> nativeSource = default;
            Optional<TypeAxValue> nativeSourceValue = default;
            Optional<bool> invalid = default;
            Optional<string> invalidReason = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    value = TypeAxValue.DeserializeTypeAxValue(property.Value);
                    continue;
                }
                if (property.NameEquals("attribute"u8))
                {
                    attribute = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("attributeValue"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    attributeValue = TypeAxValue.DeserializeTypeAxValue(property.Value);
                    continue;
                }
                if (property.NameEquals("superseded"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    superseded = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("nativeSource"u8))
                {
                    nativeSource = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nativeSourceValue"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    nativeSourceValue = TypeAxValue.DeserializeTypeAxValue(property.Value);
                    continue;
                }
                if (property.NameEquals("invalid"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    invalid = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("invalidReason"u8))
                {
                    invalidReason = property.Value.GetString();
                    continue;
                }
            }
            return new TypeAxValueSource(type, value.Value, attribute.Value, attributeValue.Value, Optional.ToNullable(superseded), nativeSource.Value, nativeSourceValue.Value, Optional.ToNullable(invalid), invalidReason.Value);
        }

        internal partial class TypeAxValueSourceConverter : JsonConverter<TypeAxValueSource>
        {
            public override void Write(Utf8JsonWriter writer, TypeAxValueSource model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeAxValueSource Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeAxValueSource(document.RootElement);
            }
        }
    }
}
