// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeContentSecurityPolicyIssueDetailsConverter))]
    public partial class TypeContentSecurityPolicyIssueDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(BlockedURL))
            {
                writer.WritePropertyName("blockedURL"u8);
                writer.WriteStringValue(BlockedURL);
            }
            writer.WritePropertyName("violatedDirective"u8);
            writer.WriteStringValue(ViolatedDirective);
            writer.WritePropertyName("isReportOnly"u8);
            writer.WriteBooleanValue(IsReportOnly);
            writer.WritePropertyName("contentSecurityPolicyViolationType"u8);
            writer.WriteStringValue(ContentSecurityPolicyViolationType);
            if (Optional.IsDefined(FrameAncestor))
            {
                writer.WritePropertyName("frameAncestor"u8);
                writer.WriteObjectValue(FrameAncestor);
            }
            if (Optional.IsDefined(SourceCodeLocation))
            {
                writer.WritePropertyName("sourceCodeLocation"u8);
                writer.WriteObjectValue(SourceCodeLocation);
            }
            if (Optional.IsDefined(ViolatingNodeId))
            {
                writer.WritePropertyName("violatingNodeId"u8);
                writer.WriteNumberValue(ViolatingNodeId.Value);
            }
            writer.WriteEndObject();
        }

        internal static TypeContentSecurityPolicyIssueDetails DeserializeTypeContentSecurityPolicyIssueDetails(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> blockedURL = default;
            string violatedDirective = default;
            bool isReportOnly = default;
            string contentSecurityPolicyViolationType = default;
            Optional<TypeAffectedFrame> frameAncestor = default;
            Optional<TypeSourceCodeLocation> sourceCodeLocation = default;
            Optional<int> violatingNodeId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("blockedURL"u8))
                {
                    blockedURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("violatedDirective"u8))
                {
                    violatedDirective = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isReportOnly"u8))
                {
                    isReportOnly = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("contentSecurityPolicyViolationType"u8))
                {
                    contentSecurityPolicyViolationType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("frameAncestor"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    frameAncestor = TypeAffectedFrame.DeserializeTypeAffectedFrame(property.Value);
                    continue;
                }
                if (property.NameEquals("sourceCodeLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sourceCodeLocation = TypeSourceCodeLocation.DeserializeTypeSourceCodeLocation(property.Value);
                    continue;
                }
                if (property.NameEquals("violatingNodeId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    violatingNodeId = property.Value.GetInt32();
                    continue;
                }
            }
            return new TypeContentSecurityPolicyIssueDetails(blockedURL.Value, violatedDirective, isReportOnly, contentSecurityPolicyViolationType, frameAncestor.Value, sourceCodeLocation.Value, Optional.ToNullable(violatingNodeId));
        }

        internal partial class TypeContentSecurityPolicyIssueDetailsConverter : JsonConverter<TypeContentSecurityPolicyIssueDetails>
        {
            public override void Write(Utf8JsonWriter writer, TypeContentSecurityPolicyIssueDetails model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeContentSecurityPolicyIssueDetails Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeContentSecurityPolicyIssueDetails(document.RootElement);
            }
        }
    }
}
