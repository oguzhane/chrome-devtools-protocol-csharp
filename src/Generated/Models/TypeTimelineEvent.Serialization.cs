// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeTimelineEventConverter))]
    public partial class TypeTimelineEvent : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("frameId"u8);
            writer.WriteStringValue(FrameId);
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("time"u8);
            writer.WriteNumberValue(Time);
            if (Optional.IsDefined(Duration))
            {
                writer.WritePropertyName("duration"u8);
                writer.WriteNumberValue(Duration.Value);
            }
            if (Optional.IsDefined(LcpDetails))
            {
                writer.WritePropertyName("lcpDetails"u8);
                writer.WriteObjectValue(LcpDetails);
            }
            if (Optional.IsDefined(LayoutShiftDetails))
            {
                writer.WritePropertyName("layoutShiftDetails"u8);
                writer.WriteObjectValue(LayoutShiftDetails);
            }
            writer.WriteEndObject();
        }

        internal static TypeTimelineEvent DeserializeTypeTimelineEvent(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string frameId = default;
            string type = default;
            string name = default;
            float time = default;
            Optional<float> duration = default;
            Optional<TypeLargestContentfulPaint> lcpDetails = default;
            Optional<TypeLayoutShift> layoutShiftDetails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("frameId"u8))
                {
                    frameId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("time"u8))
                {
                    time = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("duration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    duration = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("lcpDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lcpDetails = TypeLargestContentfulPaint.DeserializeTypeLargestContentfulPaint(property.Value);
                    continue;
                }
                if (property.NameEquals("layoutShiftDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    layoutShiftDetails = TypeLayoutShift.DeserializeTypeLayoutShift(property.Value);
                    continue;
                }
            }
            return new TypeTimelineEvent(frameId, type, name, time, Optional.ToNullable(duration), lcpDetails.Value, layoutShiftDetails.Value);
        }

        internal partial class TypeTimelineEventConverter : JsonConverter<TypeTimelineEvent>
        {
            public override void Write(Utf8JsonWriter writer, TypeTimelineEvent model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeTimelineEvent Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeTimelineEvent(document.RootElement);
            }
        }
    }
}
