// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeProfileConverter))]
    public partial class TypeProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("nodes"u8);
            writer.WriteStartArray();
            foreach (var item in Nodes)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("startTime"u8);
            writer.WriteNumberValue(StartTime);
            writer.WritePropertyName("endTime"u8);
            writer.WriteNumberValue(EndTime);
            if (Optional.IsCollectionDefined(Samples))
            {
                writer.WritePropertyName("samples"u8);
                writer.WriteStartArray();
                foreach (var item in Samples)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(TimeDeltas))
            {
                writer.WritePropertyName("timeDeltas"u8);
                writer.WriteStartArray();
                foreach (var item in TimeDeltas)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static TypeProfile DeserializeTypeProfile(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<TypeProfileNode> nodes = default;
            float startTime = default;
            float endTime = default;
            Optional<IList<int>> samples = default;
            Optional<IList<int>> timeDeltas = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("nodes"u8))
                {
                    List<TypeProfileNode> array = new List<TypeProfileNode>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeProfileNode.DeserializeTypeProfileNode(item));
                    }
                    nodes = array;
                    continue;
                }
                if (property.NameEquals("startTime"u8))
                {
                    startTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("endTime"u8))
                {
                    endTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("samples"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    samples = array;
                    continue;
                }
                if (property.NameEquals("timeDeltas"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    timeDeltas = array;
                    continue;
                }
            }
            return new TypeProfile(nodes, startTime, endTime, Optional.ToList(samples), Optional.ToList(timeDeltas));
        }

        internal partial class TypeProfileConverter : JsonConverter<TypeProfile>
        {
            public override void Write(Utf8JsonWriter writer, TypeProfile model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeProfile Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeProfile(document.RootElement);
            }
        }
    }
}
