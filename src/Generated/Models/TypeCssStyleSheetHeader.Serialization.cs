// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeCssStyleSheetHeaderConverter))]
    public partial class TypeCssStyleSheetHeader : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("styleSheetId"u8);
            writer.WriteStringValue(StyleSheetId);
            writer.WritePropertyName("frameId"u8);
            writer.WriteStringValue(FrameId);
            writer.WritePropertyName("sourceURL"u8);
            writer.WriteStringValue(SourceURL);
            if (Optional.IsDefined(SourceMapURL))
            {
                writer.WritePropertyName("sourceMapURL"u8);
                writer.WriteStringValue(SourceMapURL);
            }
            writer.WritePropertyName("origin"u8);
            writer.WriteStringValue(Origin);
            writer.WritePropertyName("title"u8);
            writer.WriteStringValue(Title);
            if (Optional.IsDefined(OwnerNode))
            {
                writer.WritePropertyName("ownerNode"u8);
                writer.WriteNumberValue(OwnerNode.Value);
            }
            writer.WritePropertyName("disabled"u8);
            writer.WriteBooleanValue(Disabled);
            if (Optional.IsDefined(HasSourceURL))
            {
                writer.WritePropertyName("hasSourceURL"u8);
                writer.WriteBooleanValue(HasSourceURL.Value);
            }
            writer.WritePropertyName("isInline"u8);
            writer.WriteBooleanValue(IsInline);
            writer.WritePropertyName("isMutable"u8);
            writer.WriteBooleanValue(IsMutable);
            writer.WritePropertyName("isConstructed"u8);
            writer.WriteBooleanValue(IsConstructed);
            writer.WritePropertyName("startLine"u8);
            writer.WriteNumberValue(StartLine);
            writer.WritePropertyName("startColumn"u8);
            writer.WriteNumberValue(StartColumn);
            writer.WritePropertyName("length"u8);
            writer.WriteNumberValue(Length);
            writer.WritePropertyName("endLine"u8);
            writer.WriteNumberValue(EndLine);
            writer.WritePropertyName("endColumn"u8);
            writer.WriteNumberValue(EndColumn);
            writer.WriteEndObject();
        }

        internal static TypeCssStyleSheetHeader DeserializeTypeCssStyleSheetHeader(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string styleSheetId = default;
            string frameId = default;
            string sourceURL = default;
            Optional<string> sourceMapURL = default;
            string origin = default;
            string title = default;
            Optional<int> ownerNode = default;
            bool disabled = default;
            Optional<bool> hasSourceURL = default;
            bool isInline = default;
            bool isMutable = default;
            bool isConstructed = default;
            float startLine = default;
            float startColumn = default;
            float length = default;
            float endLine = default;
            float endColumn = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("styleSheetId"u8))
                {
                    styleSheetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("frameId"u8))
                {
                    frameId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceURL"u8))
                {
                    sourceURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceMapURL"u8))
                {
                    sourceMapURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("origin"u8))
                {
                    origin = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ownerNode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ownerNode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("disabled"u8))
                {
                    disabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("hasSourceURL"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hasSourceURL = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isInline"u8))
                {
                    isInline = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isMutable"u8))
                {
                    isMutable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isConstructed"u8))
                {
                    isConstructed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("startLine"u8))
                {
                    startLine = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("startColumn"u8))
                {
                    startColumn = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("length"u8))
                {
                    length = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("endLine"u8))
                {
                    endLine = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("endColumn"u8))
                {
                    endColumn = property.Value.GetSingle();
                    continue;
                }
            }
            return new TypeCssStyleSheetHeader(styleSheetId, frameId, sourceURL, sourceMapURL.Value, origin, title, Optional.ToNullable(ownerNode), disabled, Optional.ToNullable(hasSourceURL), isInline, isMutable, isConstructed, startLine, startColumn, length, endLine, endColumn);
        }

        internal partial class TypeCssStyleSheetHeaderConverter : JsonConverter<TypeCssStyleSheetHeader>
        {
            public override void Write(Utf8JsonWriter writer, TypeCssStyleSheetHeader model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeCssStyleSheetHeader Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeCssStyleSheetHeader(document.RootElement);
            }
        }
    }
}
