// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeRectConverter))]
    public partial class TypeRect : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("x"u8);
            writer.WriteNumberValue(X);
            writer.WritePropertyName("y"u8);
            writer.WriteNumberValue(Y);
            writer.WritePropertyName("width"u8);
            writer.WriteNumberValue(Width);
            writer.WritePropertyName("height"u8);
            writer.WriteNumberValue(Height);
            writer.WriteEndObject();
        }

        internal static TypeRect DeserializeTypeRect(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            float x = default;
            float y = default;
            float width = default;
            float height = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("x"u8))
                {
                    x = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("y"u8))
                {
                    y = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("width"u8))
                {
                    width = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("height"u8))
                {
                    height = property.Value.GetSingle();
                    continue;
                }
            }
            return new TypeRect(x, y, width, height);
        }

        internal partial class TypeRectConverter : JsonConverter<TypeRect>
        {
            public override void Write(Utf8JsonWriter writer, TypeRect model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeRect Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeRect(document.RootElement);
            }
        }
    }
}
