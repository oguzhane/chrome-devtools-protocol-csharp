// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeNodeConverter))]
    public partial class TypeNode : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("nodeId"u8);
            writer.WriteNumberValue(NodeId);
            if (Optional.IsDefined(ParentId))
            {
                writer.WritePropertyName("parentId"u8);
                writer.WriteNumberValue(ParentId.Value);
            }
            writer.WritePropertyName("backendNodeId"u8);
            writer.WriteNumberValue(BackendNodeId);
            writer.WritePropertyName("nodeType"u8);
            writer.WriteNumberValue(NodeType);
            writer.WritePropertyName("nodeName"u8);
            writer.WriteStringValue(NodeName);
            writer.WritePropertyName("localName"u8);
            writer.WriteStringValue(LocalName);
            writer.WritePropertyName("nodeValue"u8);
            writer.WriteStringValue(NodeValue);
            if (Optional.IsDefined(ChildNodeCount))
            {
                writer.WritePropertyName("childNodeCount"u8);
                writer.WriteNumberValue(ChildNodeCount.Value);
            }
            if (Optional.IsCollectionDefined(Children))
            {
                writer.WritePropertyName("children"u8);
                writer.WriteStartArray();
                foreach (var item in Children)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Attributes))
            {
                writer.WritePropertyName("attributes"u8);
                writer.WriteStartArray();
                foreach (var item in Attributes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DocumentURL))
            {
                writer.WritePropertyName("documentURL"u8);
                writer.WriteStringValue(DocumentURL);
            }
            if (Optional.IsDefined(BaseURL))
            {
                writer.WritePropertyName("baseURL"u8);
                writer.WriteStringValue(BaseURL);
            }
            if (Optional.IsDefined(PublicId))
            {
                writer.WritePropertyName("publicId"u8);
                writer.WriteStringValue(PublicId);
            }
            if (Optional.IsDefined(SystemId))
            {
                writer.WritePropertyName("systemId"u8);
                writer.WriteStringValue(SystemId);
            }
            if (Optional.IsDefined(InternalSubset))
            {
                writer.WritePropertyName("internalSubset"u8);
                writer.WriteStringValue(InternalSubset);
            }
            if (Optional.IsDefined(XmlVersion))
            {
                writer.WritePropertyName("xmlVersion"u8);
                writer.WriteStringValue(XmlVersion);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value"u8);
                writer.WriteStringValue(Value);
            }
            if (Optional.IsDefined(PseudoType))
            {
                writer.WritePropertyName("pseudoType"u8);
                writer.WriteStringValue(PseudoType);
            }
            if (Optional.IsDefined(PseudoIdentifier))
            {
                writer.WritePropertyName("pseudoIdentifier"u8);
                writer.WriteStringValue(PseudoIdentifier);
            }
            if (Optional.IsDefined(ShadowRootType))
            {
                writer.WritePropertyName("shadowRootType"u8);
                writer.WriteStringValue(ShadowRootType);
            }
            if (Optional.IsDefined(FrameId))
            {
                writer.WritePropertyName("frameId"u8);
                writer.WriteStringValue(FrameId);
            }
            if (Optional.IsDefined(ContentDocument))
            {
                writer.WritePropertyName("contentDocument"u8);
                writer.WriteObjectValue(ContentDocument);
            }
            if (Optional.IsCollectionDefined(ShadowRoots))
            {
                writer.WritePropertyName("shadowRoots"u8);
                writer.WriteStartArray();
                foreach (var item in ShadowRoots)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(TemplateContent))
            {
                writer.WritePropertyName("templateContent"u8);
                writer.WriteObjectValue(TemplateContent);
            }
            if (Optional.IsCollectionDefined(PseudoElements))
            {
                writer.WritePropertyName("pseudoElements"u8);
                writer.WriteStartArray();
                foreach (var item in PseudoElements)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ImportedDocument))
            {
                writer.WritePropertyName("importedDocument"u8);
                writer.WriteObjectValue(ImportedDocument);
            }
            if (Optional.IsCollectionDefined(DistributedNodes))
            {
                writer.WritePropertyName("distributedNodes"u8);
                writer.WriteStartArray();
                foreach (var item in DistributedNodes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(IsSVG))
            {
                writer.WritePropertyName("isSVG"u8);
                writer.WriteBooleanValue(IsSVG.Value);
            }
            if (Optional.IsDefined(CompatibilityMode))
            {
                writer.WritePropertyName("compatibilityMode"u8);
                writer.WriteStringValue(CompatibilityMode);
            }
            if (Optional.IsDefined(AssignedSlot))
            {
                writer.WritePropertyName("assignedSlot"u8);
                writer.WriteObjectValue(AssignedSlot);
            }
            writer.WriteEndObject();
        }

        internal static TypeNode DeserializeTypeNode(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int nodeId = default;
            Optional<int> parentId = default;
            int backendNodeId = default;
            int nodeType = default;
            string nodeName = default;
            string localName = default;
            string nodeValue = default;
            Optional<int> childNodeCount = default;
            Optional<IList<TypeNode>> children = default;
            Optional<IList<string>> attributes = default;
            Optional<string> documentURL = default;
            Optional<string> baseURL = default;
            Optional<string> publicId = default;
            Optional<string> systemId = default;
            Optional<string> internalSubset = default;
            Optional<string> xmlVersion = default;
            Optional<string> name = default;
            Optional<string> value = default;
            Optional<string> pseudoType = default;
            Optional<string> pseudoIdentifier = default;
            Optional<string> shadowRootType = default;
            Optional<string> frameId = default;
            Optional<TypeNode> contentDocument = default;
            Optional<IList<TypeNode>> shadowRoots = default;
            Optional<TypeNode> templateContent = default;
            Optional<IList<TypeNode>> pseudoElements = default;
            Optional<TypeNode> importedDocument = default;
            Optional<IList<TypeBackendNode>> distributedNodes = default;
            Optional<bool> isSVG = default;
            Optional<string> compatibilityMode = default;
            Optional<TypeBackendNode> assignedSlot = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("nodeId"u8))
                {
                    nodeId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("parentId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    parentId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("backendNodeId"u8))
                {
                    backendNodeId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("nodeType"u8))
                {
                    nodeType = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("nodeName"u8))
                {
                    nodeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("localName"u8))
                {
                    localName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nodeValue"u8))
                {
                    nodeValue = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("childNodeCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    childNodeCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("children"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypeNode> array = new List<TypeNode>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeTypeNode(item));
                    }
                    children = array;
                    continue;
                }
                if (property.NameEquals("attributes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    attributes = array;
                    continue;
                }
                if (property.NameEquals("documentURL"u8))
                {
                    documentURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("baseURL"u8))
                {
                    baseURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("publicId"u8))
                {
                    publicId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("systemId"u8))
                {
                    systemId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("internalSubset"u8))
                {
                    internalSubset = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("xmlVersion"u8))
                {
                    xmlVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    value = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pseudoType"u8))
                {
                    pseudoType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pseudoIdentifier"u8))
                {
                    pseudoIdentifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("shadowRootType"u8))
                {
                    shadowRootType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("frameId"u8))
                {
                    frameId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("contentDocument"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    contentDocument = DeserializeTypeNode(property.Value);
                    continue;
                }
                if (property.NameEquals("shadowRoots"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypeNode> array = new List<TypeNode>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeTypeNode(item));
                    }
                    shadowRoots = array;
                    continue;
                }
                if (property.NameEquals("templateContent"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    templateContent = DeserializeTypeNode(property.Value);
                    continue;
                }
                if (property.NameEquals("pseudoElements"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypeNode> array = new List<TypeNode>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeTypeNode(item));
                    }
                    pseudoElements = array;
                    continue;
                }
                if (property.NameEquals("importedDocument"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    importedDocument = DeserializeTypeNode(property.Value);
                    continue;
                }
                if (property.NameEquals("distributedNodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypeBackendNode> array = new List<TypeBackendNode>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeBackendNode.DeserializeTypeBackendNode(item));
                    }
                    distributedNodes = array;
                    continue;
                }
                if (property.NameEquals("isSVG"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isSVG = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("compatibilityMode"u8))
                {
                    compatibilityMode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("assignedSlot"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    assignedSlot = TypeBackendNode.DeserializeTypeBackendNode(property.Value);
                    continue;
                }
            }
            return new TypeNode(nodeId, Optional.ToNullable(parentId), backendNodeId, nodeType, nodeName, localName, nodeValue, Optional.ToNullable(childNodeCount), Optional.ToList(children), Optional.ToList(attributes), documentURL.Value, baseURL.Value, publicId.Value, systemId.Value, internalSubset.Value, xmlVersion.Value, name.Value, value.Value, pseudoType.Value, pseudoIdentifier.Value, shadowRootType.Value, frameId.Value, contentDocument.Value, Optional.ToList(shadowRoots), templateContent.Value, Optional.ToList(pseudoElements), importedDocument.Value, Optional.ToList(distributedNodes), Optional.ToNullable(isSVG), compatibilityMode.Value, assignedSlot.Value);
        }

        internal partial class TypeNodeConverter : JsonConverter<TypeNode>
        {
            public override void Write(Utf8JsonWriter writer, TypeNode model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeNode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeNode(document.RootElement);
            }
        }
    }
}
