// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// Have one type per entry in MediaLogRecord::Type
    /// Corresponds to kMessage
    /// </summary>
    public partial class TypePlayerMessage
    {
        /// <summary> Initializes a new instance of TypePlayerMessage. </summary>
        /// <param name="level">
        /// Keep in sync with MediaLogMessageLevel
        /// We are currently keeping the message level &apos;error&apos; separate from the
        /// PlayerError type because right now they represent different things,
        /// this one being a DVLOG(ERROR) style log message that gets printed
        /// based on what log level is selected in the UI, and the other is a
        /// representation of a media::PipelineStatus object. Soon however we&apos;re
        /// going to be moving away from using PipelineStatus for errors and
        /// introducing a new error type which should hopefully let us integrate
        /// the error log level into the PlayerError type.
        /// </param>
        /// <param name="message"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="level"/> or <paramref name="message"/> is null. </exception>
        public TypePlayerMessage(string level, string message)
        {
            Argument.AssertNotNull(level, nameof(level));
            Argument.AssertNotNull(message, nameof(message));

            Level = level;
            Message = message;
        }

        /// <summary>
        /// Keep in sync with MediaLogMessageLevel
        /// We are currently keeping the message level &apos;error&apos; separate from the
        /// PlayerError type because right now they represent different things,
        /// this one being a DVLOG(ERROR) style log message that gets printed
        /// based on what log level is selected in the UI, and the other is a
        /// representation of a media::PipelineStatus object. Soon however we&apos;re
        /// going to be moving away from using PipelineStatus for errors and
        /// introducing a new error type which should hopefully let us integrate
        /// the error log level into the PlayerError type.
        /// </summary>
        public string Level { get; set; }
        /// <summary> Gets or sets the message. </summary>
        public string Message { get; set; }
    }
}
