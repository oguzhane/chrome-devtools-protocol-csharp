// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> Security details about a request. </summary>
    public partial class TypeSecurityDetails
    {
        /// <summary> Initializes a new instance of TypeSecurityDetails. </summary>
        /// <param name="protocol"> Protocol name (e.g. &quot;TLS 1.2&quot; or &quot;QUIC&quot;). </param>
        /// <param name="keyExchange"> Key Exchange used by the connection, or the empty string if not applicable. </param>
        /// <param name="cipher"> Cipher name. </param>
        /// <param name="certificateId"> Certificate ID value. </param>
        /// <param name="subjectName"> Certificate subject name. </param>
        /// <param name="sanList"> Subject Alternative Name (SAN) DNS names and IP addresses. </param>
        /// <param name="issuer"> Name of the issuing CA. </param>
        /// <param name="validFrom"> Certificate valid from date. </param>
        /// <param name="validTo"> Certificate valid to (expiration) date. </param>
        /// <param name="signedCertificateTimestampList"> List of signed certificate timestamps (SCTs). </param>
        /// <param name="certificateTransparencyCompliance"> Whether the request complied with Certificate Transparency policy. </param>
        /// <param name="encryptedClientHello"> Whether the connection used Encrypted ClientHello. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="protocol"/>, <paramref name="keyExchange"/>, <paramref name="cipher"/>, <paramref name="subjectName"/>, <paramref name="sanList"/>, <paramref name="issuer"/>, <paramref name="signedCertificateTimestampList"/> or <paramref name="certificateTransparencyCompliance"/> is null. </exception>
        public TypeSecurityDetails(string protocol, string keyExchange, string cipher, int certificateId, string subjectName, IEnumerable<string> sanList, string issuer, float validFrom, float validTo, IEnumerable<TypeSignedCertificateTimestamp> signedCertificateTimestampList, string certificateTransparencyCompliance, bool encryptedClientHello)
        {
            Argument.AssertNotNull(protocol, nameof(protocol));
            Argument.AssertNotNull(keyExchange, nameof(keyExchange));
            Argument.AssertNotNull(cipher, nameof(cipher));
            Argument.AssertNotNull(subjectName, nameof(subjectName));
            Argument.AssertNotNull(sanList, nameof(sanList));
            Argument.AssertNotNull(issuer, nameof(issuer));
            Argument.AssertNotNull(signedCertificateTimestampList, nameof(signedCertificateTimestampList));
            Argument.AssertNotNull(certificateTransparencyCompliance, nameof(certificateTransparencyCompliance));

            Protocol = protocol;
            KeyExchange = keyExchange;
            Cipher = cipher;
            CertificateId = certificateId;
            SubjectName = subjectName;
            SanList = sanList.ToList();
            Issuer = issuer;
            ValidFrom = validFrom;
            ValidTo = validTo;
            SignedCertificateTimestampList = signedCertificateTimestampList.ToList();
            CertificateTransparencyCompliance = certificateTransparencyCompliance;
            EncryptedClientHello = encryptedClientHello;
        }

        /// <summary> Initializes a new instance of TypeSecurityDetails. </summary>
        /// <param name="protocol"> Protocol name (e.g. &quot;TLS 1.2&quot; or &quot;QUIC&quot;). </param>
        /// <param name="keyExchange"> Key Exchange used by the connection, or the empty string if not applicable. </param>
        /// <param name="keyExchangeGroup"> (EC)DH group used by the connection, if applicable. </param>
        /// <param name="cipher"> Cipher name. </param>
        /// <param name="mac"> TLS MAC. Note that AEAD ciphers do not have separate MACs. </param>
        /// <param name="certificateId"> Certificate ID value. </param>
        /// <param name="subjectName"> Certificate subject name. </param>
        /// <param name="sanList"> Subject Alternative Name (SAN) DNS names and IP addresses. </param>
        /// <param name="issuer"> Name of the issuing CA. </param>
        /// <param name="validFrom"> Certificate valid from date. </param>
        /// <param name="validTo"> Certificate valid to (expiration) date. </param>
        /// <param name="signedCertificateTimestampList"> List of signed certificate timestamps (SCTs). </param>
        /// <param name="certificateTransparencyCompliance"> Whether the request complied with Certificate Transparency policy. </param>
        /// <param name="serverSignatureAlgorithm">
        /// The signature algorithm used by the server in the TLS server signature,
        /// represented as a TLS SignatureScheme code point. Omitted if not
        /// applicable or not known.
        /// </param>
        /// <param name="encryptedClientHello"> Whether the connection used Encrypted ClientHello. </param>
        internal TypeSecurityDetails(string protocol, string keyExchange, string keyExchangeGroup, string cipher, string mac, int certificateId, string subjectName, IList<string> sanList, string issuer, float validFrom, float validTo, IList<TypeSignedCertificateTimestamp> signedCertificateTimestampList, string certificateTransparencyCompliance, int? serverSignatureAlgorithm, bool encryptedClientHello)
        {
            Protocol = protocol;
            KeyExchange = keyExchange;
            KeyExchangeGroup = keyExchangeGroup;
            Cipher = cipher;
            Mac = mac;
            CertificateId = certificateId;
            SubjectName = subjectName;
            SanList = sanList;
            Issuer = issuer;
            ValidFrom = validFrom;
            ValidTo = validTo;
            SignedCertificateTimestampList = signedCertificateTimestampList;
            CertificateTransparencyCompliance = certificateTransparencyCompliance;
            ServerSignatureAlgorithm = serverSignatureAlgorithm;
            EncryptedClientHello = encryptedClientHello;
        }

        /// <summary> Protocol name (e.g. &quot;TLS 1.2&quot; or &quot;QUIC&quot;). </summary>
        public string Protocol { get; set; }
        /// <summary> Key Exchange used by the connection, or the empty string if not applicable. </summary>
        public string KeyExchange { get; set; }
        /// <summary> (EC)DH group used by the connection, if applicable. </summary>
        public string KeyExchangeGroup { get; set; }
        /// <summary> Cipher name. </summary>
        public string Cipher { get; set; }
        /// <summary> TLS MAC. Note that AEAD ciphers do not have separate MACs. </summary>
        public string Mac { get; set; }
        /// <summary> Certificate ID value. </summary>
        public int CertificateId { get; set; }
        /// <summary> Certificate subject name. </summary>
        public string SubjectName { get; set; }
        /// <summary> Subject Alternative Name (SAN) DNS names and IP addresses. </summary>
        public IList<string> SanList { get; }
        /// <summary> Name of the issuing CA. </summary>
        public string Issuer { get; set; }
        /// <summary> Certificate valid from date. </summary>
        public float ValidFrom { get; set; }
        /// <summary> Certificate valid to (expiration) date. </summary>
        public float ValidTo { get; set; }
        /// <summary> List of signed certificate timestamps (SCTs). </summary>
        public IList<TypeSignedCertificateTimestamp> SignedCertificateTimestampList { get; }
        /// <summary> Whether the request complied with Certificate Transparency policy. </summary>
        public string CertificateTransparencyCompliance { get; set; }
        /// <summary>
        /// The signature algorithm used by the server in the TLS server signature,
        /// represented as a TLS SignatureScheme code point. Omitted if not
        /// applicable or not known.
        /// </summary>
        public int? ServerSignatureAlgorithm { get; set; }
        /// <summary> Whether the connection used Encrypted ClientHello. </summary>
        public bool EncryptedClientHello { get; set; }
    }
}
