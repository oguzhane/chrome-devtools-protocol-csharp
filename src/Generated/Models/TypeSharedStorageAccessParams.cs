// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// Bundles the parameters for shared storage access events whose
    /// presence/absence can vary according to SharedStorageAccessType.
    /// </summary>
    public partial class TypeSharedStorageAccessParams
    {
        /// <summary> Initializes a new instance of TypeSharedStorageAccessParams. </summary>
        public TypeSharedStorageAccessParams()
        {
            UrlsWithMetadata = new ChangeTrackingList<TypeSharedStorageUrlWithMetadata>();
        }

        /// <summary> Initializes a new instance of TypeSharedStorageAccessParams. </summary>
        /// <param name="scriptSourceUrl">
        /// Spec of the module script URL.
        /// Present only for SharedStorageAccessType.documentAddModule.
        /// </param>
        /// <param name="operationName">
        /// Name of the registered operation to be run.
        /// Present only for SharedStorageAccessType.documentRun and
        /// SharedStorageAccessType.documentSelectURL.
        /// </param>
        /// <param name="serializedData">
        /// The operation&apos;s serialized data in bytes (converted to a string).
        /// Present only for SharedStorageAccessType.documentRun and
        /// SharedStorageAccessType.documentSelectURL.
        /// </param>
        /// <param name="urlsWithMetadata">
        /// Array of candidate URLs&apos; specs, along with any associated metadata.
        /// Present only for SharedStorageAccessType.documentSelectURL.
        /// </param>
        /// <param name="key">
        /// Key for a specific entry in an origin&apos;s shared storage.
        /// Present only for SharedStorageAccessType.documentSet,
        /// SharedStorageAccessType.documentAppend,
        /// SharedStorageAccessType.documentDelete,
        /// SharedStorageAccessType.workletSet,
        /// SharedStorageAccessType.workletAppend,
        /// SharedStorageAccessType.workletDelete, and
        /// SharedStorageAccessType.workletGet.
        /// </param>
        /// <param name="value">
        /// Value for a specific entry in an origin&apos;s shared storage.
        /// Present only for SharedStorageAccessType.documentSet,
        /// SharedStorageAccessType.documentAppend,
        /// SharedStorageAccessType.workletSet, and
        /// SharedStorageAccessType.workletAppend.
        /// </param>
        /// <param name="ignoreIfPresent">
        /// Whether or not to set an entry for a key if that key is already present.
        /// Present only for SharedStorageAccessType.documentSet and
        /// SharedStorageAccessType.workletSet.
        /// </param>
        internal TypeSharedStorageAccessParams(string scriptSourceUrl, string operationName, string serializedData, IList<TypeSharedStorageUrlWithMetadata> urlsWithMetadata, string key, string value, bool? ignoreIfPresent)
        {
            ScriptSourceUrl = scriptSourceUrl;
            OperationName = operationName;
            SerializedData = serializedData;
            UrlsWithMetadata = urlsWithMetadata;
            Key = key;
            Value = value;
            IgnoreIfPresent = ignoreIfPresent;
        }

        /// <summary>
        /// Spec of the module script URL.
        /// Present only for SharedStorageAccessType.documentAddModule.
        /// </summary>
        public string ScriptSourceUrl { get; set; }
        /// <summary>
        /// Name of the registered operation to be run.
        /// Present only for SharedStorageAccessType.documentRun and
        /// SharedStorageAccessType.documentSelectURL.
        /// </summary>
        public string OperationName { get; set; }
        /// <summary>
        /// The operation&apos;s serialized data in bytes (converted to a string).
        /// Present only for SharedStorageAccessType.documentRun and
        /// SharedStorageAccessType.documentSelectURL.
        /// </summary>
        public string SerializedData { get; set; }
        /// <summary>
        /// Array of candidate URLs&apos; specs, along with any associated metadata.
        /// Present only for SharedStorageAccessType.documentSelectURL.
        /// </summary>
        public IList<TypeSharedStorageUrlWithMetadata> UrlsWithMetadata { get; }
        /// <summary>
        /// Key for a specific entry in an origin&apos;s shared storage.
        /// Present only for SharedStorageAccessType.documentSet,
        /// SharedStorageAccessType.documentAppend,
        /// SharedStorageAccessType.documentDelete,
        /// SharedStorageAccessType.workletSet,
        /// SharedStorageAccessType.workletAppend,
        /// SharedStorageAccessType.workletDelete, and
        /// SharedStorageAccessType.workletGet.
        /// </summary>
        public string Key { get; set; }
        /// <summary>
        /// Value for a specific entry in an origin&apos;s shared storage.
        /// Present only for SharedStorageAccessType.documentSet,
        /// SharedStorageAccessType.documentAppend,
        /// SharedStorageAccessType.workletSet, and
        /// SharedStorageAccessType.workletAppend.
        /// </summary>
        public string Value { get; set; }
        /// <summary>
        /// Whether or not to set an entry for a key if that key is already present.
        /// Present only for SharedStorageAccessType.documentSet and
        /// SharedStorageAccessType.workletSet.
        /// </summary>
        public bool? IgnoreIfPresent { get; set; }
    }
}
