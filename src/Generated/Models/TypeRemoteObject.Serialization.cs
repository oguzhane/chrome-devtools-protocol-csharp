// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeRemoteObjectConverter))]
    public partial class TypeRemoteObject : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            if (Optional.IsDefined(Subtype))
            {
                writer.WritePropertyName("subtype"u8);
                writer.WriteStringValue(Subtype);
            }
            if (Optional.IsDefined(ClassName))
            {
                writer.WritePropertyName("className"u8);
                writer.WriteStringValue(ClassName);
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value"u8);
                writer.WriteObjectValue(Value);
            }
            if (Optional.IsDefined(UnserializableValue))
            {
                writer.WritePropertyName("unserializableValue"u8);
                writer.WriteStringValue(UnserializableValue);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(WebDriverValue))
            {
                writer.WritePropertyName("webDriverValue"u8);
                writer.WriteObjectValue(WebDriverValue);
            }
            if (Optional.IsDefined(ObjectId))
            {
                writer.WritePropertyName("objectId"u8);
                writer.WriteStringValue(ObjectId);
            }
            if (Optional.IsDefined(Preview))
            {
                writer.WritePropertyName("preview"u8);
                writer.WriteObjectValue(Preview);
            }
            if (Optional.IsDefined(CustomPreview))
            {
                writer.WritePropertyName("customPreview"u8);
                writer.WriteObjectValue(CustomPreview);
            }
            writer.WriteEndObject();
        }

        internal static TypeRemoteObject DeserializeTypeRemoteObject(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string type = default;
            Optional<string> subtype = default;
            Optional<string> className = default;
            Optional<object> value = default;
            Optional<string> unserializableValue = default;
            Optional<string> description = default;
            Optional<TypeWebDriverValue> webDriverValue = default;
            Optional<string> objectId = default;
            Optional<TypeObjectPreview> preview = default;
            Optional<TypeCustomPreview> customPreview = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subtype"u8))
                {
                    subtype = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("className"u8))
                {
                    className = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    value = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("unserializableValue"u8))
                {
                    unserializableValue = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("webDriverValue"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    webDriverValue = TypeWebDriverValue.DeserializeTypeWebDriverValue(property.Value);
                    continue;
                }
                if (property.NameEquals("objectId"u8))
                {
                    objectId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("preview"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    preview = TypeObjectPreview.DeserializeTypeObjectPreview(property.Value);
                    continue;
                }
                if (property.NameEquals("customPreview"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    customPreview = TypeCustomPreview.DeserializeTypeCustomPreview(property.Value);
                    continue;
                }
            }
            return new TypeRemoteObject(type, subtype.Value, className.Value, value.Value, unserializableValue.Value, description.Value, webDriverValue.Value, objectId.Value, preview.Value, customPreview.Value);
        }

        internal partial class TypeRemoteObjectConverter : JsonConverter<TypeRemoteObject>
        {
            public override void Write(Utf8JsonWriter writer, TypeRemoteObject model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeRemoteObject Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeRemoteObject(document.RootElement);
            }
        }
    }
}
