// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// Fired when virtual machine parses script. This event is also fired for all known and uncollected
    /// scripts upon enabling debugger.
    /// </summary>
    public partial class EventScriptParsedParams
    {
        /// <summary> Initializes a new instance of EventScriptParsedParams. </summary>
        /// <param name="scriptId"> Identifier of the script parsed. </param>
        /// <param name="url"> URL or name of the script parsed (if any). </param>
        /// <param name="startLine"> Line offset of the script within the resource with given URL (for script tags). </param>
        /// <param name="startColumn"> Column offset of the script within the resource with given URL. </param>
        /// <param name="endLine"> Last line of the script. </param>
        /// <param name="endColumn"> Length of the last line of the script. </param>
        /// <param name="executionContextId"> Specifies script creation context. </param>
        /// <param name="hash"> Content hash of the script, SHA-256. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scriptId"/>, <paramref name="url"/> or <paramref name="hash"/> is null. </exception>
        public EventScriptParsedParams(string scriptId, string url, int startLine, int startColumn, int endLine, int endColumn, int executionContextId, string hash)
        {
            Argument.AssertNotNull(scriptId, nameof(scriptId));
            Argument.AssertNotNull(url, nameof(url));
            Argument.AssertNotNull(hash, nameof(hash));

            ScriptId = scriptId;
            Url = url;
            StartLine = startLine;
            StartColumn = startColumn;
            EndLine = endLine;
            EndColumn = endColumn;
            ExecutionContextId = executionContextId;
            Hash = hash;
        }

        /// <summary> Initializes a new instance of EventScriptParsedParams. </summary>
        /// <param name="scriptId"> Identifier of the script parsed. </param>
        /// <param name="url"> URL or name of the script parsed (if any). </param>
        /// <param name="startLine"> Line offset of the script within the resource with given URL (for script tags). </param>
        /// <param name="startColumn"> Column offset of the script within the resource with given URL. </param>
        /// <param name="endLine"> Last line of the script. </param>
        /// <param name="endColumn"> Length of the last line of the script. </param>
        /// <param name="executionContextId"> Specifies script creation context. </param>
        /// <param name="hash"> Content hash of the script, SHA-256. </param>
        /// <param name="executionContextAuxData"> Embedder-specific auxiliary data. </param>
        /// <param name="isLiveEdit"> True, if this script is generated as a result of the live edit operation. </param>
        /// <param name="sourceMapURL"> URL of source map associated with script (if any). </param>
        /// <param name="hasSourceURL"> True, if this script has sourceURL. </param>
        /// <param name="isModule"> True, if this script is ES6 module. </param>
        /// <param name="length"> This script length. </param>
        /// <param name="stackTrace"> JavaScript top stack frame of where the script parsed event was triggered if available. </param>
        /// <param name="codeOffset"> If the scriptLanguage is WebAssembly, the code section offset in the module. </param>
        /// <param name="scriptLanguage"> The language of the script. </param>
        /// <param name="debugSymbols"> If the scriptLanguage is WebASsembly, the source of debug symbols for the module. </param>
        /// <param name="embedderName"> The name the embedder supplied for this script. </param>
        internal EventScriptParsedParams(string scriptId, string url, int startLine, int startColumn, int endLine, int endColumn, int executionContextId, string hash, object executionContextAuxData, bool? isLiveEdit, string sourceMapURL, bool? hasSourceURL, bool? isModule, int? length, TypeStackTrace stackTrace, int? codeOffset, string scriptLanguage, TypeDebugSymbols debugSymbols, string embedderName)
        {
            ScriptId = scriptId;
            Url = url;
            StartLine = startLine;
            StartColumn = startColumn;
            EndLine = endLine;
            EndColumn = endColumn;
            ExecutionContextId = executionContextId;
            Hash = hash;
            ExecutionContextAuxData = executionContextAuxData;
            IsLiveEdit = isLiveEdit;
            SourceMapURL = sourceMapURL;
            HasSourceURL = hasSourceURL;
            IsModule = isModule;
            Length = length;
            StackTrace = stackTrace;
            CodeOffset = codeOffset;
            ScriptLanguage = scriptLanguage;
            DebugSymbols = debugSymbols;
            EmbedderName = embedderName;
        }

        /// <summary> Identifier of the script parsed. </summary>
        public string ScriptId { get; set; }
        /// <summary> URL or name of the script parsed (if any). </summary>
        public string Url { get; set; }
        /// <summary> Line offset of the script within the resource with given URL (for script tags). </summary>
        public int StartLine { get; set; }
        /// <summary> Column offset of the script within the resource with given URL. </summary>
        public int StartColumn { get; set; }
        /// <summary> Last line of the script. </summary>
        public int EndLine { get; set; }
        /// <summary> Length of the last line of the script. </summary>
        public int EndColumn { get; set; }
        /// <summary> Specifies script creation context. </summary>
        public int ExecutionContextId { get; set; }
        /// <summary> Content hash of the script, SHA-256. </summary>
        public string Hash { get; set; }
        /// <summary> Embedder-specific auxiliary data. </summary>
        public object ExecutionContextAuxData { get; set; }
        /// <summary> True, if this script is generated as a result of the live edit operation. </summary>
        public bool? IsLiveEdit { get; set; }
        /// <summary> URL of source map associated with script (if any). </summary>
        public string SourceMapURL { get; set; }
        /// <summary> True, if this script has sourceURL. </summary>
        public bool? HasSourceURL { get; set; }
        /// <summary> True, if this script is ES6 module. </summary>
        public bool? IsModule { get; set; }
        /// <summary> This script length. </summary>
        public int? Length { get; set; }
        /// <summary> JavaScript top stack frame of where the script parsed event was triggered if available. </summary>
        public TypeStackTrace StackTrace { get; set; }
        /// <summary> If the scriptLanguage is WebAssembly, the code section offset in the module. </summary>
        public int? CodeOffset { get; set; }
        /// <summary> The language of the script. </summary>
        public string ScriptLanguage { get; set; }
        /// <summary> If the scriptLanguage is WebASsembly, the source of debug symbols for the module. </summary>
        public TypeDebugSymbols DebugSymbols { get; set; }
        /// <summary> The name the embedder supplied for this script. </summary>
        public string EmbedderName { get; set; }
    }
}
