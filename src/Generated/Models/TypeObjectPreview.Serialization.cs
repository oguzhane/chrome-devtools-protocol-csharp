// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeObjectPreviewConverter))]
    public partial class TypeObjectPreview : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            if (Optional.IsDefined(Subtype))
            {
                writer.WritePropertyName("subtype"u8);
                writer.WriteStringValue(Subtype);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("overflow"u8);
            writer.WriteBooleanValue(Overflow);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartArray();
            foreach (var item in Properties)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(Entries))
            {
                writer.WritePropertyName("entries"u8);
                writer.WriteStartArray();
                foreach (var item in Entries)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static TypeObjectPreview DeserializeTypeObjectPreview(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string type = default;
            Optional<string> subtype = default;
            Optional<string> description = default;
            bool overflow = default;
            IList<TypePropertyPreview> properties = default;
            Optional<IList<TypeEntryPreview>> entries = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subtype"u8))
                {
                    subtype = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("overflow"u8))
                {
                    overflow = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    List<TypePropertyPreview> array = new List<TypePropertyPreview>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypePropertyPreview.DeserializeTypePropertyPreview(item));
                    }
                    properties = array;
                    continue;
                }
                if (property.NameEquals("entries"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypeEntryPreview> array = new List<TypeEntryPreview>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeEntryPreview.DeserializeTypeEntryPreview(item));
                    }
                    entries = array;
                    continue;
                }
            }
            return new TypeObjectPreview(type, subtype.Value, description.Value, overflow, properties, Optional.ToList(entries));
        }

        internal partial class TypeObjectPreviewConverter : JsonConverter<TypeObjectPreview>
        {
            public override void Write(Utf8JsonWriter writer, TypeObjectPreview model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeObjectPreview Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeObjectPreview(document.RootElement);
            }
        }
    }
}
