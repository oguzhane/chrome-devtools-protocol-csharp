// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// Detailed information about exception (or error) that was thrown during script compilation or
    /// execution.
    /// </summary>
    public partial class TypeExceptionDetails
    {
        /// <summary> Initializes a new instance of TypeExceptionDetails. </summary>
        /// <param name="exceptionId"> Exception id. </param>
        /// <param name="text"> Exception text, which should be used together with exception object when available. </param>
        /// <param name="lineNumber"> Line number of the exception location (0-based). </param>
        /// <param name="columnNumber"> Column number of the exception location (0-based). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> is null. </exception>
        public TypeExceptionDetails(int exceptionId, string text, int lineNumber, int columnNumber)
        {
            Argument.AssertNotNull(text, nameof(text));

            ExceptionId = exceptionId;
            Text = text;
            LineNumber = lineNumber;
            ColumnNumber = columnNumber;
        }

        /// <summary> Initializes a new instance of TypeExceptionDetails. </summary>
        /// <param name="exceptionId"> Exception id. </param>
        /// <param name="text"> Exception text, which should be used together with exception object when available. </param>
        /// <param name="lineNumber"> Line number of the exception location (0-based). </param>
        /// <param name="columnNumber"> Column number of the exception location (0-based). </param>
        /// <param name="scriptId"> Script ID of the exception location. </param>
        /// <param name="url"> URL of the exception location, to be used when the script was not reported. </param>
        /// <param name="stackTrace"> JavaScript stack trace if available. </param>
        /// <param name="exception"> Exception object if available. </param>
        /// <param name="executionContextId"> Identifier of the context where exception happened. </param>
        /// <param name="exceptionMetaData">
        /// Dictionary with entries of meta data that the client associated
        /// with this exception, such as information about associated network
        /// requests, etc.
        /// </param>
        internal TypeExceptionDetails(int exceptionId, string text, int lineNumber, int columnNumber, string scriptId, string url, TypeStackTrace stackTrace, TypeRemoteObject exception, int? executionContextId, object exceptionMetaData)
        {
            ExceptionId = exceptionId;
            Text = text;
            LineNumber = lineNumber;
            ColumnNumber = columnNumber;
            ScriptId = scriptId;
            Url = url;
            StackTrace = stackTrace;
            Exception = exception;
            ExecutionContextId = executionContextId;
            ExceptionMetaData = exceptionMetaData;
        }

        /// <summary> Exception id. </summary>
        public int ExceptionId { get; set; }
        /// <summary> Exception text, which should be used together with exception object when available. </summary>
        public string Text { get; set; }
        /// <summary> Line number of the exception location (0-based). </summary>
        public int LineNumber { get; set; }
        /// <summary> Column number of the exception location (0-based). </summary>
        public int ColumnNumber { get; set; }
        /// <summary> Script ID of the exception location. </summary>
        public string ScriptId { get; set; }
        /// <summary> URL of the exception location, to be used when the script was not reported. </summary>
        public string Url { get; set; }
        /// <summary> JavaScript stack trace if available. </summary>
        public TypeStackTrace StackTrace { get; set; }
        /// <summary> Exception object if available. </summary>
        public TypeRemoteObject Exception { get; set; }
        /// <summary> Identifier of the context where exception happened. </summary>
        public int? ExecutionContextId { get; set; }
        /// <summary>
        /// Dictionary with entries of meta data that the client associated
        /// with this exception, such as information about associated network
        /// requests, etc.
        /// </summary>
        public object ExceptionMetaData { get; set; }
    }
}
