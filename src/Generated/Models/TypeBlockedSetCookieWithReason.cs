// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> A cookie which was not stored from a response with the corresponding reason. </summary>
    public partial class TypeBlockedSetCookieWithReason
    {
        /// <summary> Initializes a new instance of TypeBlockedSetCookieWithReason. </summary>
        /// <param name="blockedReasons"> The reason(s) this cookie was blocked. </param>
        /// <param name="cookieLine">
        /// The string representing this individual cookie as it would appear in the header.
        /// This is not the entire &quot;cookie&quot; or &quot;set-cookie&quot; header which could have multiple cookies.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="blockedReasons"/> or <paramref name="cookieLine"/> is null. </exception>
        public TypeBlockedSetCookieWithReason(IEnumerable<string> blockedReasons, string cookieLine)
        {
            Argument.AssertNotNull(blockedReasons, nameof(blockedReasons));
            Argument.AssertNotNull(cookieLine, nameof(cookieLine));

            BlockedReasons = blockedReasons.ToList();
            CookieLine = cookieLine;
        }

        /// <summary> Initializes a new instance of TypeBlockedSetCookieWithReason. </summary>
        /// <param name="blockedReasons"> The reason(s) this cookie was blocked. </param>
        /// <param name="cookieLine">
        /// The string representing this individual cookie as it would appear in the header.
        /// This is not the entire &quot;cookie&quot; or &quot;set-cookie&quot; header which could have multiple cookies.
        /// </param>
        /// <param name="cookie">
        /// The cookie object which represents the cookie which was not stored. It is optional because
        /// sometimes complete cookie information is not available, such as in the case of parsing
        /// errors.
        /// </param>
        internal TypeBlockedSetCookieWithReason(IList<string> blockedReasons, string cookieLine, TypeCookie cookie)
        {
            BlockedReasons = blockedReasons;
            CookieLine = cookieLine;
            Cookie = cookie;
        }

        /// <summary> The reason(s) this cookie was blocked. </summary>
        public IList<string> BlockedReasons { get; }
        /// <summary>
        /// The string representing this individual cookie as it would appear in the header.
        /// This is not the entire &quot;cookie&quot; or &quot;set-cookie&quot; header which could have multiple cookies.
        /// </summary>
        public string CookieLine { get; set; }
        /// <summary>
        /// The cookie object which represents the cookie which was not stored. It is optional because
        /// sometimes complete cookie information is not available, such as in the case of parsing
        /// errors.
        /// </summary>
        public TypeCookie Cookie { get; set; }
    }
}
