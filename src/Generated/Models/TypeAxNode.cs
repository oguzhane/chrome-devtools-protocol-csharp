// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> A node in the accessibility tree. </summary>
    public partial class TypeAxNode
    {
        /// <summary> Initializes a new instance of TypeAxNode. </summary>
        /// <param name="nodeId"> Unique identifier for this node. </param>
        /// <param name="ignored"> Whether this node is ignored for accessibility. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nodeId"/> is null. </exception>
        public TypeAxNode(string nodeId, bool ignored)
        {
            Argument.AssertNotNull(nodeId, nameof(nodeId));

            NodeId = nodeId;
            Ignored = ignored;
            IgnoredReasons = new ChangeTrackingList<TypeAxProperty>();
            Properties = new ChangeTrackingList<TypeAxProperty>();
            ChildIds = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of TypeAxNode. </summary>
        /// <param name="nodeId"> Unique identifier for this node. </param>
        /// <param name="ignored"> Whether this node is ignored for accessibility. </param>
        /// <param name="ignoredReasons"> Collection of reasons why this node is hidden. </param>
        /// <param name="role"> This `Node`&apos;s role, whether explicit or implicit. </param>
        /// <param name="chromeRole"> This `Node`&apos;s Chrome raw role. </param>
        /// <param name="name"> The accessible name for this `Node`. </param>
        /// <param name="description"> The accessible description for this `Node`. </param>
        /// <param name="value"> The value for this `Node`. </param>
        /// <param name="properties"> All other properties. </param>
        /// <param name="parentId"> ID for this node&apos;s parent. </param>
        /// <param name="childIds"> IDs for each of this node&apos;s child nodes. </param>
        /// <param name="backendDOMNodeId"> The backend ID for the associated DOM node, if any. </param>
        /// <param name="frameId"> The frame ID for the frame associated with this nodes document. </param>
        internal TypeAxNode(string nodeId, bool ignored, IList<TypeAxProperty> ignoredReasons, TypeAxValue role, TypeAxValue chromeRole, TypeAxValue name, TypeAxValue description, TypeAxValue value, IList<TypeAxProperty> properties, string parentId, IList<string> childIds, int? backendDOMNodeId, string frameId)
        {
            NodeId = nodeId;
            Ignored = ignored;
            IgnoredReasons = ignoredReasons;
            Role = role;
            ChromeRole = chromeRole;
            Name = name;
            Description = description;
            Value = value;
            Properties = properties;
            ParentId = parentId;
            ChildIds = childIds;
            BackendDOMNodeId = backendDOMNodeId;
            FrameId = frameId;
        }

        /// <summary> Unique identifier for this node. </summary>
        public string NodeId { get; set; }
        /// <summary> Whether this node is ignored for accessibility. </summary>
        public bool Ignored { get; set; }
        /// <summary> Collection of reasons why this node is hidden. </summary>
        public IList<TypeAxProperty> IgnoredReasons { get; }
        /// <summary> This `Node`&apos;s role, whether explicit or implicit. </summary>
        public TypeAxValue Role { get; set; }
        /// <summary> This `Node`&apos;s Chrome raw role. </summary>
        public TypeAxValue ChromeRole { get; set; }
        /// <summary> The accessible name for this `Node`. </summary>
        public TypeAxValue Name { get; set; }
        /// <summary> The accessible description for this `Node`. </summary>
        public TypeAxValue Description { get; set; }
        /// <summary> The value for this `Node`. </summary>
        public TypeAxValue Value { get; set; }
        /// <summary> All other properties. </summary>
        public IList<TypeAxProperty> Properties { get; }
        /// <summary> ID for this node&apos;s parent. </summary>
        public string ParentId { get; set; }
        /// <summary> IDs for each of this node&apos;s child nodes. </summary>
        public IList<string> ChildIds { get; }
        /// <summary> The backend ID for the associated DOM node, if any. </summary>
        public int? BackendDOMNodeId { get; set; }
        /// <summary> The frame ID for the frame associated with this nodes document. </summary>
        public string FrameId { get; set; }
    }
}
