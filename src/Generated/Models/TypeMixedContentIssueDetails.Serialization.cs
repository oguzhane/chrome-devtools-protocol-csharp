// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeMixedContentIssueDetailsConverter))]
    public partial class TypeMixedContentIssueDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ResourceType))
            {
                writer.WritePropertyName("resourceType"u8);
                writer.WriteStringValue(ResourceType);
            }
            writer.WritePropertyName("resolutionStatus"u8);
            writer.WriteStringValue(ResolutionStatus);
            writer.WritePropertyName("insecureURL"u8);
            writer.WriteStringValue(InsecureURL);
            writer.WritePropertyName("mainResourceURL"u8);
            writer.WriteStringValue(MainResourceURL);
            if (Optional.IsDefined(Request))
            {
                writer.WritePropertyName("request"u8);
                writer.WriteObjectValue(Request);
            }
            if (Optional.IsDefined(Frame))
            {
                writer.WritePropertyName("frame"u8);
                writer.WriteObjectValue(Frame);
            }
            writer.WriteEndObject();
        }

        internal static TypeMixedContentIssueDetails DeserializeTypeMixedContentIssueDetails(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> resourceType = default;
            string resolutionStatus = default;
            string insecureURL = default;
            string mainResourceURL = default;
            Optional<TypeAffectedRequest> request = default;
            Optional<TypeAffectedFrame> frame = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("resourceType"u8))
                {
                    resourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resolutionStatus"u8))
                {
                    resolutionStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("insecureURL"u8))
                {
                    insecureURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mainResourceURL"u8))
                {
                    mainResourceURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("request"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    request = TypeAffectedRequest.DeserializeTypeAffectedRequest(property.Value);
                    continue;
                }
                if (property.NameEquals("frame"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    frame = TypeAffectedFrame.DeserializeTypeAffectedFrame(property.Value);
                    continue;
                }
            }
            return new TypeMixedContentIssueDetails(resourceType.Value, resolutionStatus, insecureURL, mainResourceURL, request.Value, frame.Value);
        }

        internal partial class TypeMixedContentIssueDetailsConverter : JsonConverter<TypeMixedContentIssueDetails>
        {
            public override void Write(Utf8JsonWriter writer, TypeMixedContentIssueDetails model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeMixedContentIssueDetails Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeMixedContentIssueDetails(document.RootElement);
            }
        }
    }
}
