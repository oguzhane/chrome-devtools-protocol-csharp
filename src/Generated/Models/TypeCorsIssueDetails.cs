// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// Details for a CORS related issue, e.g. a warning or error related to
    /// CORS RFC1918 enforcement.
    /// </summary>
    public partial class TypeCorsIssueDetails
    {
        /// <summary> Initializes a new instance of TypeCorsIssueDetails. </summary>
        /// <param name="corsErrorStatus"></param>
        /// <param name="isWarning"></param>
        /// <param name="request"> Information about a request that is affected by an inspector issue. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="corsErrorStatus"/> or <paramref name="request"/> is null. </exception>
        public TypeCorsIssueDetails(TypeCorsErrorStatus corsErrorStatus, bool isWarning, TypeAffectedRequest request)
        {
            Argument.AssertNotNull(corsErrorStatus, nameof(corsErrorStatus));
            Argument.AssertNotNull(request, nameof(request));

            CorsErrorStatus = corsErrorStatus;
            IsWarning = isWarning;
            Request = request;
        }

        /// <summary> Initializes a new instance of TypeCorsIssueDetails. </summary>
        /// <param name="corsErrorStatus"></param>
        /// <param name="isWarning"></param>
        /// <param name="request"> Information about a request that is affected by an inspector issue. </param>
        /// <param name="location"></param>
        /// <param name="initiatorOrigin"></param>
        /// <param name="resourceIPAddressSpace"></param>
        /// <param name="clientSecurityState"></param>
        internal TypeCorsIssueDetails(TypeCorsErrorStatus corsErrorStatus, bool isWarning, TypeAffectedRequest request, TypeSourceCodeLocation location, string initiatorOrigin, string resourceIPAddressSpace, TypeClientSecurityState clientSecurityState)
        {
            CorsErrorStatus = corsErrorStatus;
            IsWarning = isWarning;
            Request = request;
            Location = location;
            InitiatorOrigin = initiatorOrigin;
            ResourceIPAddressSpace = resourceIPAddressSpace;
            ClientSecurityState = clientSecurityState;
        }

        /// <summary> Gets or sets the cors error status. </summary>
        public TypeCorsErrorStatus CorsErrorStatus { get; set; }
        /// <summary> Gets or sets the is warning. </summary>
        public bool IsWarning { get; set; }
        /// <summary> Information about a request that is affected by an inspector issue. </summary>
        public TypeAffectedRequest Request { get; set; }
        /// <summary> Gets or sets the location. </summary>
        public TypeSourceCodeLocation Location { get; set; }
        /// <summary> Gets or sets the initiator origin. </summary>
        public string InitiatorOrigin { get; set; }
        /// <summary> Gets or sets the resource ip address space. </summary>
        public string ResourceIPAddressSpace { get; set; }
        /// <summary> Gets or sets the client security state. </summary>
        public TypeClientSecurityState ClientSecurityState { get; set; }
    }
}
