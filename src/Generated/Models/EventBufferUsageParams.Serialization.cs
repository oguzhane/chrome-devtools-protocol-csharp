// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventBufferUsageParamsConverter))]
    public partial class EventBufferUsageParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PercentFull))
            {
                writer.WritePropertyName("percentFull"u8);
                writer.WriteNumberValue(PercentFull.Value);
            }
            if (Optional.IsDefined(EventCount))
            {
                writer.WritePropertyName("eventCount"u8);
                writer.WriteNumberValue(EventCount.Value);
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value"u8);
                writer.WriteNumberValue(Value.Value);
            }
            writer.WriteEndObject();
        }

        internal static EventBufferUsageParams DeserializeEventBufferUsageParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<float> percentFull = default;
            Optional<float> eventCount = default;
            Optional<float> value = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("percentFull"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    percentFull = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("eventCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    eventCount = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    value = property.Value.GetSingle();
                    continue;
                }
            }
            return new EventBufferUsageParams(Optional.ToNullable(percentFull), Optional.ToNullable(eventCount), Optional.ToNullable(value));
        }

        internal partial class EventBufferUsageParamsConverter : JsonConverter<EventBufferUsageParams>
        {
            public override void Write(Utf8JsonWriter writer, EventBufferUsageParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventBufferUsageParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventBufferUsageParams(document.RootElement);
            }
        }
    }
}
