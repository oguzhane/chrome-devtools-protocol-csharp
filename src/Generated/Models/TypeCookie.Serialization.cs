// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeCookieConverter))]
    public partial class TypeCookie : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("value"u8);
            writer.WriteStringValue(Value);
            writer.WritePropertyName("domain"u8);
            writer.WriteStringValue(Domain);
            writer.WritePropertyName("path"u8);
            writer.WriteStringValue(Path);
            writer.WritePropertyName("expires"u8);
            writer.WriteNumberValue(Expires);
            writer.WritePropertyName("size"u8);
            writer.WriteNumberValue(Size);
            writer.WritePropertyName("httpOnly"u8);
            writer.WriteBooleanValue(HttpOnly);
            writer.WritePropertyName("secure"u8);
            writer.WriteBooleanValue(Secure);
            writer.WritePropertyName("session"u8);
            writer.WriteBooleanValue(Session);
            if (Optional.IsDefined(SameSite))
            {
                writer.WritePropertyName("sameSite"u8);
                writer.WriteStringValue(SameSite);
            }
            writer.WritePropertyName("priority"u8);
            writer.WriteStringValue(Priority);
            writer.WritePropertyName("sameParty"u8);
            writer.WriteBooleanValue(SameParty);
            writer.WritePropertyName("sourceScheme"u8);
            writer.WriteStringValue(SourceScheme);
            writer.WritePropertyName("sourcePort"u8);
            writer.WriteNumberValue(SourcePort);
            if (Optional.IsDefined(PartitionKey))
            {
                writer.WritePropertyName("partitionKey"u8);
                writer.WriteStringValue(PartitionKey);
            }
            if (Optional.IsDefined(PartitionKeyOpaque))
            {
                writer.WritePropertyName("partitionKeyOpaque"u8);
                writer.WriteBooleanValue(PartitionKeyOpaque.Value);
            }
            writer.WriteEndObject();
        }

        internal static TypeCookie DeserializeTypeCookie(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            string value = default;
            string domain = default;
            string path = default;
            float expires = default;
            int size = default;
            bool httpOnly = default;
            bool secure = default;
            bool session = default;
            Optional<string> sameSite = default;
            string priority = default;
            bool sameParty = default;
            string sourceScheme = default;
            int sourcePort = default;
            Optional<string> partitionKey = default;
            Optional<bool> partitionKeyOpaque = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    value = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("domain"u8))
                {
                    domain = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("path"u8))
                {
                    path = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("expires"u8))
                {
                    expires = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("size"u8))
                {
                    size = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("httpOnly"u8))
                {
                    httpOnly = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("secure"u8))
                {
                    secure = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("session"u8))
                {
                    session = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sameSite"u8))
                {
                    sameSite = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("priority"u8))
                {
                    priority = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sameParty"u8))
                {
                    sameParty = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sourceScheme"u8))
                {
                    sourceScheme = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourcePort"u8))
                {
                    sourcePort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("partitionKey"u8))
                {
                    partitionKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("partitionKeyOpaque"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    partitionKeyOpaque = property.Value.GetBoolean();
                    continue;
                }
            }
            return new TypeCookie(name, value, domain, path, expires, size, httpOnly, secure, session, sameSite.Value, priority, sameParty, sourceScheme, sourcePort, partitionKey.Value, Optional.ToNullable(partitionKeyOpaque));
        }

        internal partial class TypeCookieConverter : JsonConverter<TypeCookie>
        {
            public override void Write(Utf8JsonWriter writer, TypeCookie model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeCookie Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeCookie(document.RootElement);
            }
        }
    }
}
