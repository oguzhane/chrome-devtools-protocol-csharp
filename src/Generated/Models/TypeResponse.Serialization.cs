// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeResponseConverter))]
    public partial class TypeResponse : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("url"u8);
            writer.WriteStringValue(Url);
            writer.WritePropertyName("status"u8);
            writer.WriteNumberValue(Status);
            writer.WritePropertyName("statusText"u8);
            writer.WriteStringValue(StatusText);
            writer.WritePropertyName("headers"u8);
            writer.WriteObjectValue(Headers);
            if (Optional.IsDefined(HeadersText))
            {
                writer.WritePropertyName("headersText"u8);
                writer.WriteStringValue(HeadersText);
            }
            writer.WritePropertyName("mimeType"u8);
            writer.WriteStringValue(MimeType);
            if (Optional.IsDefined(RequestHeaders))
            {
                writer.WritePropertyName("requestHeaders"u8);
                writer.WriteObjectValue(RequestHeaders);
            }
            if (Optional.IsDefined(RequestHeadersText))
            {
                writer.WritePropertyName("requestHeadersText"u8);
                writer.WriteStringValue(RequestHeadersText);
            }
            writer.WritePropertyName("connectionReused"u8);
            writer.WriteBooleanValue(ConnectionReused);
            writer.WritePropertyName("connectionId"u8);
            writer.WriteNumberValue(ConnectionId);
            if (Optional.IsDefined(RemoteIPAddress))
            {
                writer.WritePropertyName("remoteIPAddress"u8);
                writer.WriteStringValue(RemoteIPAddress);
            }
            if (Optional.IsDefined(RemotePort))
            {
                writer.WritePropertyName("remotePort"u8);
                writer.WriteNumberValue(RemotePort.Value);
            }
            if (Optional.IsDefined(FromDiskCache))
            {
                writer.WritePropertyName("fromDiskCache"u8);
                writer.WriteBooleanValue(FromDiskCache.Value);
            }
            if (Optional.IsDefined(FromServiceWorker))
            {
                writer.WritePropertyName("fromServiceWorker"u8);
                writer.WriteBooleanValue(FromServiceWorker.Value);
            }
            if (Optional.IsDefined(FromPrefetchCache))
            {
                writer.WritePropertyName("fromPrefetchCache"u8);
                writer.WriteBooleanValue(FromPrefetchCache.Value);
            }
            writer.WritePropertyName("encodedDataLength"u8);
            writer.WriteNumberValue(EncodedDataLength);
            if (Optional.IsDefined(Timing))
            {
                writer.WritePropertyName("timing"u8);
                writer.WriteObjectValue(Timing);
            }
            if (Optional.IsDefined(ServiceWorkerResponseSource))
            {
                writer.WritePropertyName("serviceWorkerResponseSource"u8);
                writer.WriteStringValue(ServiceWorkerResponseSource);
            }
            if (Optional.IsDefined(ResponseTime))
            {
                writer.WritePropertyName("responseTime"u8);
                writer.WriteNumberValue(ResponseTime.Value);
            }
            if (Optional.IsDefined(CacheStorageCacheName))
            {
                writer.WritePropertyName("cacheStorageCacheName"u8);
                writer.WriteStringValue(CacheStorageCacheName);
            }
            if (Optional.IsDefined(Protocol))
            {
                writer.WritePropertyName("protocol"u8);
                writer.WriteStringValue(Protocol);
            }
            if (Optional.IsDefined(AlternateProtocolUsage))
            {
                writer.WritePropertyName("alternateProtocolUsage"u8);
                writer.WriteStringValue(AlternateProtocolUsage);
            }
            writer.WritePropertyName("securityState"u8);
            writer.WriteStringValue(SecurityState);
            if (Optional.IsDefined(SecurityDetails))
            {
                writer.WritePropertyName("securityDetails"u8);
                writer.WriteObjectValue(SecurityDetails);
            }
            writer.WriteEndObject();
        }

        internal static TypeResponse DeserializeTypeResponse(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string url = default;
            int status = default;
            string statusText = default;
            object headers = default;
            Optional<string> headersText = default;
            string mimeType = default;
            Optional<object> requestHeaders = default;
            Optional<string> requestHeadersText = default;
            bool connectionReused = default;
            float connectionId = default;
            Optional<string> remoteIPAddress = default;
            Optional<int> remotePort = default;
            Optional<bool> fromDiskCache = default;
            Optional<bool> fromServiceWorker = default;
            Optional<bool> fromPrefetchCache = default;
            float encodedDataLength = default;
            Optional<TypeResourceTiming> timing = default;
            Optional<string> serviceWorkerResponseSource = default;
            Optional<float> responseTime = default;
            Optional<string> cacheStorageCacheName = default;
            Optional<string> protocol = default;
            Optional<string> alternateProtocolUsage = default;
            string securityState = default;
            Optional<TypeSecurityDetails> securityDetails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("statusText"u8))
                {
                    statusText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("headers"u8))
                {
                    headers = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("headersText"u8))
                {
                    headersText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mimeType"u8))
                {
                    mimeType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requestHeaders"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    requestHeaders = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("requestHeadersText"u8))
                {
                    requestHeadersText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("connectionReused"u8))
                {
                    connectionReused = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("connectionId"u8))
                {
                    connectionId = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("remoteIPAddress"u8))
                {
                    remoteIPAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("remotePort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    remotePort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fromDiskCache"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    fromDiskCache = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("fromServiceWorker"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    fromServiceWorker = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("fromPrefetchCache"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    fromPrefetchCache = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("encodedDataLength"u8))
                {
                    encodedDataLength = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("timing"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    timing = TypeResourceTiming.DeserializeTypeResourceTiming(property.Value);
                    continue;
                }
                if (property.NameEquals("serviceWorkerResponseSource"u8))
                {
                    serviceWorkerResponseSource = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("responseTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    responseTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("cacheStorageCacheName"u8))
                {
                    cacheStorageCacheName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("protocol"u8))
                {
                    protocol = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("alternateProtocolUsage"u8))
                {
                    alternateProtocolUsage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("securityState"u8))
                {
                    securityState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("securityDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    securityDetails = TypeSecurityDetails.DeserializeTypeSecurityDetails(property.Value);
                    continue;
                }
            }
            return new TypeResponse(url, status, statusText, headers, headersText.Value, mimeType, requestHeaders.Value, requestHeadersText.Value, connectionReused, connectionId, remoteIPAddress.Value, Optional.ToNullable(remotePort), Optional.ToNullable(fromDiskCache), Optional.ToNullable(fromServiceWorker), Optional.ToNullable(fromPrefetchCache), encodedDataLength, timing.Value, serviceWorkerResponseSource.Value, Optional.ToNullable(responseTime), cacheStorageCacheName.Value, protocol.Value, alternateProtocolUsage.Value, securityState, securityDetails.Value);
        }

        internal partial class TypeResponseConverter : JsonConverter<TypeResponse>
        {
            public override void Write(Utf8JsonWriter writer, TypeResponse model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeResponse Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeResponse(document.RootElement);
            }
        }
    }
}
