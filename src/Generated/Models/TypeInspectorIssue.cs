// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> An inspector issue reported from the back-end. </summary>
    public partial class TypeInspectorIssue
    {
        /// <summary> Initializes a new instance of TypeInspectorIssue. </summary>
        /// <param name="code">
        /// A unique identifier for the type of issue. Each type may use one of the
        /// optional fields in InspectorIssueDetails to convey more specific
        /// information about the kind of issue.
        /// </param>
        /// <param name="details">
        /// This struct holds a list of optional fields with additional information
        /// specific to the kind of issue. When adding a new issue code, please also
        /// add a new optional field to this type.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="code"/> or <paramref name="details"/> is null. </exception>
        public TypeInspectorIssue(string code, TypeInspectorIssueDetails details)
        {
            Argument.AssertNotNull(code, nameof(code));
            Argument.AssertNotNull(details, nameof(details));

            Code = code;
            Details = details;
        }

        /// <summary> Initializes a new instance of TypeInspectorIssue. </summary>
        /// <param name="code">
        /// A unique identifier for the type of issue. Each type may use one of the
        /// optional fields in InspectorIssueDetails to convey more specific
        /// information about the kind of issue.
        /// </param>
        /// <param name="details">
        /// This struct holds a list of optional fields with additional information
        /// specific to the kind of issue. When adding a new issue code, please also
        /// add a new optional field to this type.
        /// </param>
        /// <param name="issueId">
        /// A unique id for this issue. May be omitted if no other entity (e.g.
        /// exception, CDP message, etc.) is referencing this issue.
        /// </param>
        internal TypeInspectorIssue(string code, TypeInspectorIssueDetails details, string issueId)
        {
            Code = code;
            Details = details;
            IssueId = issueId;
        }

        /// <summary>
        /// A unique identifier for the type of issue. Each type may use one of the
        /// optional fields in InspectorIssueDetails to convey more specific
        /// information about the kind of issue.
        /// </summary>
        public string Code { get; set; }
        /// <summary>
        /// This struct holds a list of optional fields with additional information
        /// specific to the kind of issue. When adding a new issue code, please also
        /// add a new optional field to this type.
        /// </summary>
        public TypeInspectorIssueDetails Details { get; set; }
        /// <summary>
        /// A unique id for this issue. May be omitted if no other entity (e.g.
        /// exception, CDP message, etc.) is referencing this issue.
        /// </summary>
        public string IssueId { get; set; }
    }
}
