// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeCorsIssueDetailsConverter))]
    public partial class TypeCorsIssueDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("corsErrorStatus"u8);
            writer.WriteObjectValue(CorsErrorStatus);
            writer.WritePropertyName("isWarning"u8);
            writer.WriteBooleanValue(IsWarning);
            writer.WritePropertyName("request"u8);
            writer.WriteObjectValue(Request);
            if (Optional.IsDefined(Location))
            {
                writer.WritePropertyName("location"u8);
                writer.WriteObjectValue(Location);
            }
            if (Optional.IsDefined(InitiatorOrigin))
            {
                writer.WritePropertyName("initiatorOrigin"u8);
                writer.WriteStringValue(InitiatorOrigin);
            }
            if (Optional.IsDefined(ResourceIPAddressSpace))
            {
                writer.WritePropertyName("resourceIPAddressSpace"u8);
                writer.WriteStringValue(ResourceIPAddressSpace);
            }
            if (Optional.IsDefined(ClientSecurityState))
            {
                writer.WritePropertyName("clientSecurityState"u8);
                writer.WriteObjectValue(ClientSecurityState);
            }
            writer.WriteEndObject();
        }

        internal static TypeCorsIssueDetails DeserializeTypeCorsIssueDetails(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            TypeCorsErrorStatus corsErrorStatus = default;
            bool isWarning = default;
            TypeAffectedRequest request = default;
            Optional<TypeSourceCodeLocation> location = default;
            Optional<string> initiatorOrigin = default;
            Optional<string> resourceIPAddressSpace = default;
            Optional<TypeClientSecurityState> clientSecurityState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("corsErrorStatus"u8))
                {
                    corsErrorStatus = TypeCorsErrorStatus.DeserializeTypeCorsErrorStatus(property.Value);
                    continue;
                }
                if (property.NameEquals("isWarning"u8))
                {
                    isWarning = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("request"u8))
                {
                    request = TypeAffectedRequest.DeserializeTypeAffectedRequest(property.Value);
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    location = TypeSourceCodeLocation.DeserializeTypeSourceCodeLocation(property.Value);
                    continue;
                }
                if (property.NameEquals("initiatorOrigin"u8))
                {
                    initiatorOrigin = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceIPAddressSpace"u8))
                {
                    resourceIPAddressSpace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clientSecurityState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    clientSecurityState = TypeClientSecurityState.DeserializeTypeClientSecurityState(property.Value);
                    continue;
                }
            }
            return new TypeCorsIssueDetails(corsErrorStatus, isWarning, request, location.Value, initiatorOrigin.Value, resourceIPAddressSpace.Value, clientSecurityState.Value);
        }

        internal partial class TypeCorsIssueDetailsConverter : JsonConverter<TypeCorsIssueDetails>
        {
            public override void Write(Utf8JsonWriter writer, TypeCorsIssueDetails model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeCorsIssueDetails Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeCorsIssueDetails(document.RootElement);
            }
        }
    }
}
