// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> HTTP response data. </summary>
    public partial class TypeResponse
    {
        /// <summary> Initializes a new instance of TypeResponse. </summary>
        /// <param name="url"> Response URL. This URL can be different from CachedResource.url in case of redirect. </param>
        /// <param name="status"> HTTP response status code. </param>
        /// <param name="statusText"> HTTP response status text. </param>
        /// <param name="headers"> HTTP response headers. </param>
        /// <param name="mimeType"> Resource mimeType as determined by the browser. </param>
        /// <param name="connectionReused"> Specifies whether physical connection was actually reused for this request. </param>
        /// <param name="connectionId"> Physical connection id that was actually used for this request. </param>
        /// <param name="encodedDataLength"> Total number of bytes received for this request so far. </param>
        /// <param name="securityState"> Security state of the request resource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/>, <paramref name="statusText"/>, <paramref name="headers"/>, <paramref name="mimeType"/> or <paramref name="securityState"/> is null. </exception>
        public TypeResponse(string url, int status, string statusText, object headers, string mimeType, bool connectionReused, float connectionId, float encodedDataLength, string securityState)
        {
            Argument.AssertNotNull(url, nameof(url));
            Argument.AssertNotNull(statusText, nameof(statusText));
            Argument.AssertNotNull(headers, nameof(headers));
            Argument.AssertNotNull(mimeType, nameof(mimeType));
            Argument.AssertNotNull(securityState, nameof(securityState));

            Url = url;
            Status = status;
            StatusText = statusText;
            Headers = headers;
            MimeType = mimeType;
            ConnectionReused = connectionReused;
            ConnectionId = connectionId;
            EncodedDataLength = encodedDataLength;
            SecurityState = securityState;
        }

        /// <summary> Initializes a new instance of TypeResponse. </summary>
        /// <param name="url"> Response URL. This URL can be different from CachedResource.url in case of redirect. </param>
        /// <param name="status"> HTTP response status code. </param>
        /// <param name="statusText"> HTTP response status text. </param>
        /// <param name="headers"> HTTP response headers. </param>
        /// <param name="headersText"> HTTP response headers text. This has been replaced by the headers in Network.responseReceivedExtraInfo. </param>
        /// <param name="mimeType"> Resource mimeType as determined by the browser. </param>
        /// <param name="requestHeaders"> Refined HTTP request headers that were actually transmitted over the network. </param>
        /// <param name="requestHeadersText"> HTTP request headers text. This has been replaced by the headers in Network.requestWillBeSentExtraInfo. </param>
        /// <param name="connectionReused"> Specifies whether physical connection was actually reused for this request. </param>
        /// <param name="connectionId"> Physical connection id that was actually used for this request. </param>
        /// <param name="remoteIPAddress"> Remote IP address. </param>
        /// <param name="remotePort"> Remote port. </param>
        /// <param name="fromDiskCache"> Specifies that the request was served from the disk cache. </param>
        /// <param name="fromServiceWorker"> Specifies that the request was served from the ServiceWorker. </param>
        /// <param name="fromPrefetchCache"> Specifies that the request was served from the prefetch cache. </param>
        /// <param name="encodedDataLength"> Total number of bytes received for this request so far. </param>
        /// <param name="timing"> Timing information for the given request. </param>
        /// <param name="serviceWorkerResponseSource"> Response source of response from ServiceWorker. </param>
        /// <param name="responseTime"> The time at which the returned response was generated. </param>
        /// <param name="cacheStorageCacheName"> Cache Storage Cache Name. </param>
        /// <param name="protocol"> Protocol used to fetch this request. </param>
        /// <param name="alternateProtocolUsage"> The reason why Chrome uses a specific transport protocol for HTTP semantics. </param>
        /// <param name="securityState"> Security state of the request resource. </param>
        /// <param name="securityDetails"> Security details for the request. </param>
        internal TypeResponse(string url, int status, string statusText, object headers, string headersText, string mimeType, object requestHeaders, string requestHeadersText, bool connectionReused, float connectionId, string remoteIPAddress, int? remotePort, bool? fromDiskCache, bool? fromServiceWorker, bool? fromPrefetchCache, float encodedDataLength, TypeResourceTiming timing, string serviceWorkerResponseSource, float? responseTime, string cacheStorageCacheName, string protocol, string alternateProtocolUsage, string securityState, TypeSecurityDetails securityDetails)
        {
            Url = url;
            Status = status;
            StatusText = statusText;
            Headers = headers;
            HeadersText = headersText;
            MimeType = mimeType;
            RequestHeaders = requestHeaders;
            RequestHeadersText = requestHeadersText;
            ConnectionReused = connectionReused;
            ConnectionId = connectionId;
            RemoteIPAddress = remoteIPAddress;
            RemotePort = remotePort;
            FromDiskCache = fromDiskCache;
            FromServiceWorker = fromServiceWorker;
            FromPrefetchCache = fromPrefetchCache;
            EncodedDataLength = encodedDataLength;
            Timing = timing;
            ServiceWorkerResponseSource = serviceWorkerResponseSource;
            ResponseTime = responseTime;
            CacheStorageCacheName = cacheStorageCacheName;
            Protocol = protocol;
            AlternateProtocolUsage = alternateProtocolUsage;
            SecurityState = securityState;
            SecurityDetails = securityDetails;
        }

        /// <summary> Response URL. This URL can be different from CachedResource.url in case of redirect. </summary>
        public string Url { get; set; }
        /// <summary> HTTP response status code. </summary>
        public int Status { get; set; }
        /// <summary> HTTP response status text. </summary>
        public string StatusText { get; set; }
        /// <summary> HTTP response headers. </summary>
        public object Headers { get; set; }
        /// <summary> HTTP response headers text. This has been replaced by the headers in Network.responseReceivedExtraInfo. </summary>
        public string HeadersText { get; set; }
        /// <summary> Resource mimeType as determined by the browser. </summary>
        public string MimeType { get; set; }
        /// <summary> Refined HTTP request headers that were actually transmitted over the network. </summary>
        public object RequestHeaders { get; set; }
        /// <summary> HTTP request headers text. This has been replaced by the headers in Network.requestWillBeSentExtraInfo. </summary>
        public string RequestHeadersText { get; set; }
        /// <summary> Specifies whether physical connection was actually reused for this request. </summary>
        public bool ConnectionReused { get; set; }
        /// <summary> Physical connection id that was actually used for this request. </summary>
        public float ConnectionId { get; set; }
        /// <summary> Remote IP address. </summary>
        public string RemoteIPAddress { get; set; }
        /// <summary> Remote port. </summary>
        public int? RemotePort { get; set; }
        /// <summary> Specifies that the request was served from the disk cache. </summary>
        public bool? FromDiskCache { get; set; }
        /// <summary> Specifies that the request was served from the ServiceWorker. </summary>
        public bool? FromServiceWorker { get; set; }
        /// <summary> Specifies that the request was served from the prefetch cache. </summary>
        public bool? FromPrefetchCache { get; set; }
        /// <summary> Total number of bytes received for this request so far. </summary>
        public float EncodedDataLength { get; set; }
        /// <summary> Timing information for the given request. </summary>
        public TypeResourceTiming Timing { get; set; }
        /// <summary> Response source of response from ServiceWorker. </summary>
        public string ServiceWorkerResponseSource { get; set; }
        /// <summary> The time at which the returned response was generated. </summary>
        public float? ResponseTime { get; set; }
        /// <summary> Cache Storage Cache Name. </summary>
        public string CacheStorageCacheName { get; set; }
        /// <summary> Protocol used to fetch this request. </summary>
        public string Protocol { get; set; }
        /// <summary> The reason why Chrome uses a specific transport protocol for HTTP semantics. </summary>
        public string AlternateProtocolUsage { get; set; }
        /// <summary> Security state of the request resource. </summary>
        public string SecurityState { get; set; }
        /// <summary> Security details for the request. </summary>
        public TypeSecurityDetails SecurityDetails { get; set; }
    }
}
