// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeAxNodeConverter))]
    public partial class TypeAxNode : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("nodeId"u8);
            writer.WriteStringValue(NodeId);
            writer.WritePropertyName("ignored"u8);
            writer.WriteBooleanValue(Ignored);
            if (Optional.IsCollectionDefined(IgnoredReasons))
            {
                writer.WritePropertyName("ignoredReasons"u8);
                writer.WriteStartArray();
                foreach (var item in IgnoredReasons)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Role))
            {
                writer.WritePropertyName("role"u8);
                writer.WriteObjectValue(Role);
            }
            if (Optional.IsDefined(ChromeRole))
            {
                writer.WritePropertyName("chromeRole"u8);
                writer.WriteObjectValue(ChromeRole);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteObjectValue(Name);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteObjectValue(Description);
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value"u8);
                writer.WriteObjectValue(Value);
            }
            if (Optional.IsCollectionDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteStartArray();
                foreach (var item in Properties)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ParentId))
            {
                writer.WritePropertyName("parentId"u8);
                writer.WriteStringValue(ParentId);
            }
            if (Optional.IsCollectionDefined(ChildIds))
            {
                writer.WritePropertyName("childIds"u8);
                writer.WriteStartArray();
                foreach (var item in ChildIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(BackendDOMNodeId))
            {
                writer.WritePropertyName("backendDOMNodeId"u8);
                writer.WriteNumberValue(BackendDOMNodeId.Value);
            }
            if (Optional.IsDefined(FrameId))
            {
                writer.WritePropertyName("frameId"u8);
                writer.WriteStringValue(FrameId);
            }
            writer.WriteEndObject();
        }

        internal static TypeAxNode DeserializeTypeAxNode(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string nodeId = default;
            bool ignored = default;
            Optional<IList<TypeAxProperty>> ignoredReasons = default;
            Optional<TypeAxValue> role = default;
            Optional<TypeAxValue> chromeRole = default;
            Optional<TypeAxValue> name = default;
            Optional<TypeAxValue> description = default;
            Optional<TypeAxValue> value = default;
            Optional<IList<TypeAxProperty>> properties = default;
            Optional<string> parentId = default;
            Optional<IList<string>> childIds = default;
            Optional<int> backendDOMNodeId = default;
            Optional<string> frameId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("nodeId"u8))
                {
                    nodeId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ignored"u8))
                {
                    ignored = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("ignoredReasons"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypeAxProperty> array = new List<TypeAxProperty>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeAxProperty.DeserializeTypeAxProperty(item));
                    }
                    ignoredReasons = array;
                    continue;
                }
                if (property.NameEquals("role"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    role = TypeAxValue.DeserializeTypeAxValue(property.Value);
                    continue;
                }
                if (property.NameEquals("chromeRole"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    chromeRole = TypeAxValue.DeserializeTypeAxValue(property.Value);
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    name = TypeAxValue.DeserializeTypeAxValue(property.Value);
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    description = TypeAxValue.DeserializeTypeAxValue(property.Value);
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    value = TypeAxValue.DeserializeTypeAxValue(property.Value);
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypeAxProperty> array = new List<TypeAxProperty>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeAxProperty.DeserializeTypeAxProperty(item));
                    }
                    properties = array;
                    continue;
                }
                if (property.NameEquals("parentId"u8))
                {
                    parentId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("childIds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    childIds = array;
                    continue;
                }
                if (property.NameEquals("backendDOMNodeId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    backendDOMNodeId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("frameId"u8))
                {
                    frameId = property.Value.GetString();
                    continue;
                }
            }
            return new TypeAxNode(nodeId, ignored, Optional.ToList(ignoredReasons), role.Value, chromeRole.Value, name.Value, description.Value, value.Value, Optional.ToList(properties), parentId.Value, Optional.ToList(childIds), Optional.ToNullable(backendDOMNodeId), frameId.Value);
        }

        internal partial class TypeAxNodeConverter : JsonConverter<TypeAxNode>
        {
            public override void Write(Utf8JsonWriter writer, TypeAxNode model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeAxNode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeAxNode(document.RootElement);
            }
        }
    }
}
