// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.
    /// DOMNode is a base node mirror type.
    /// </summary>
    public partial class TypeNode
    {
        /// <summary> Initializes a new instance of TypeNode. </summary>
        /// <param name="nodeId">
        /// Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend
        /// will only push node with given `id` once. It is aware of all requested nodes and will only
        /// fire DOM events for nodes known to the client.
        /// </param>
        /// <param name="backendNodeId"> The BackendNodeId for this node. </param>
        /// <param name="nodeType"> `Node`&apos;s nodeType. </param>
        /// <param name="nodeName"> `Node`&apos;s nodeName. </param>
        /// <param name="localName"> `Node`&apos;s localName. </param>
        /// <param name="nodeValue"> `Node`&apos;s nodeValue. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nodeName"/>, <paramref name="localName"/> or <paramref name="nodeValue"/> is null. </exception>
        public TypeNode(int nodeId, int backendNodeId, int nodeType, string nodeName, string localName, string nodeValue)
        {
            Argument.AssertNotNull(nodeName, nameof(nodeName));
            Argument.AssertNotNull(localName, nameof(localName));
            Argument.AssertNotNull(nodeValue, nameof(nodeValue));

            NodeId = nodeId;
            BackendNodeId = backendNodeId;
            NodeType = nodeType;
            NodeName = nodeName;
            LocalName = localName;
            NodeValue = nodeValue;
            Children = new ChangeTrackingList<TypeNode>();
            Attributes = new ChangeTrackingList<string>();
            ShadowRoots = new ChangeTrackingList<TypeNode>();
            PseudoElements = new ChangeTrackingList<TypeNode>();
            DistributedNodes = new ChangeTrackingList<TypeBackendNode>();
        }

        /// <summary> Initializes a new instance of TypeNode. </summary>
        /// <param name="nodeId">
        /// Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend
        /// will only push node with given `id` once. It is aware of all requested nodes and will only
        /// fire DOM events for nodes known to the client.
        /// </param>
        /// <param name="parentId"> The id of the parent node if any. </param>
        /// <param name="backendNodeId"> The BackendNodeId for this node. </param>
        /// <param name="nodeType"> `Node`&apos;s nodeType. </param>
        /// <param name="nodeName"> `Node`&apos;s nodeName. </param>
        /// <param name="localName"> `Node`&apos;s localName. </param>
        /// <param name="nodeValue"> `Node`&apos;s nodeValue. </param>
        /// <param name="childNodeCount"> Child count for `Container` nodes. </param>
        /// <param name="children"> Child nodes of this node when requested with children. </param>
        /// <param name="attributes"> Attributes of the `Element` node in the form of flat array `[name1, value1, name2, value2]`. </param>
        /// <param name="documentURL"> Document URL that `Document` or `FrameOwner` node points to. </param>
        /// <param name="baseURL"> Base URL that `Document` or `FrameOwner` node uses for URL completion. </param>
        /// <param name="publicId"> `DocumentType`&apos;s publicId. </param>
        /// <param name="systemId"> `DocumentType`&apos;s systemId. </param>
        /// <param name="internalSubset"> `DocumentType`&apos;s internalSubset. </param>
        /// <param name="xmlVersion"> `Document`&apos;s XML version in case of XML documents. </param>
        /// <param name="name"> `Attr`&apos;s name. </param>
        /// <param name="value"> `Attr`&apos;s value. </param>
        /// <param name="pseudoType"> Pseudo element type for this node. </param>
        /// <param name="pseudoIdentifier">
        /// Pseudo element identifier for this node. Only present if there is a
        /// valid pseudoType.
        /// </param>
        /// <param name="shadowRootType"> Shadow root type. </param>
        /// <param name="frameId"> Frame ID for frame owner elements. </param>
        /// <param name="contentDocument"> Content document for frame owner elements. </param>
        /// <param name="shadowRoots"> Shadow root list for given element host. </param>
        /// <param name="templateContent"> Content document fragment for template elements. </param>
        /// <param name="pseudoElements"> Pseudo elements associated with this node. </param>
        /// <param name="importedDocument">
        /// Deprecated, as the HTML Imports API has been removed (crbug.com/937746).
        /// This property used to return the imported document for the HTMLImport links.
        /// The property is always undefined now.
        /// </param>
        /// <param name="distributedNodes"> Distributed nodes for given insertion point. </param>
        /// <param name="isSVG"> Whether the node is SVG. </param>
        /// <param name="compatibilityMode"> Document compatibility mode. </param>
        /// <param name="assignedSlot"> Backend node with a friendly name. </param>
        internal TypeNode(int nodeId, int? parentId, int backendNodeId, int nodeType, string nodeName, string localName, string nodeValue, int? childNodeCount, IList<TypeNode> children, IList<string> attributes, string documentURL, string baseURL, string publicId, string systemId, string internalSubset, string xmlVersion, string name, string value, string pseudoType, string pseudoIdentifier, string shadowRootType, string frameId, TypeNode contentDocument, IList<TypeNode> shadowRoots, TypeNode templateContent, IList<TypeNode> pseudoElements, TypeNode importedDocument, IList<TypeBackendNode> distributedNodes, bool? isSVG, string compatibilityMode, TypeBackendNode assignedSlot)
        {
            NodeId = nodeId;
            ParentId = parentId;
            BackendNodeId = backendNodeId;
            NodeType = nodeType;
            NodeName = nodeName;
            LocalName = localName;
            NodeValue = nodeValue;
            ChildNodeCount = childNodeCount;
            Children = children;
            Attributes = attributes;
            DocumentURL = documentURL;
            BaseURL = baseURL;
            PublicId = publicId;
            SystemId = systemId;
            InternalSubset = internalSubset;
            XmlVersion = xmlVersion;
            Name = name;
            Value = value;
            PseudoType = pseudoType;
            PseudoIdentifier = pseudoIdentifier;
            ShadowRootType = shadowRootType;
            FrameId = frameId;
            ContentDocument = contentDocument;
            ShadowRoots = shadowRoots;
            TemplateContent = templateContent;
            PseudoElements = pseudoElements;
            ImportedDocument = importedDocument;
            DistributedNodes = distributedNodes;
            IsSVG = isSVG;
            CompatibilityMode = compatibilityMode;
            AssignedSlot = assignedSlot;
        }

        /// <summary>
        /// Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend
        /// will only push node with given `id` once. It is aware of all requested nodes and will only
        /// fire DOM events for nodes known to the client.
        /// </summary>
        public int NodeId { get; set; }
        /// <summary> The id of the parent node if any. </summary>
        public int? ParentId { get; set; }
        /// <summary> The BackendNodeId for this node. </summary>
        public int BackendNodeId { get; set; }
        /// <summary> `Node`&apos;s nodeType. </summary>
        public int NodeType { get; set; }
        /// <summary> `Node`&apos;s nodeName. </summary>
        public string NodeName { get; set; }
        /// <summary> `Node`&apos;s localName. </summary>
        public string LocalName { get; set; }
        /// <summary> `Node`&apos;s nodeValue. </summary>
        public string NodeValue { get; set; }
        /// <summary> Child count for `Container` nodes. </summary>
        public int? ChildNodeCount { get; set; }
        /// <summary> Child nodes of this node when requested with children. </summary>
        public IList<TypeNode> Children { get; }
        /// <summary> Attributes of the `Element` node in the form of flat array `[name1, value1, name2, value2]`. </summary>
        public IList<string> Attributes { get; }
        /// <summary> Document URL that `Document` or `FrameOwner` node points to. </summary>
        public string DocumentURL { get; set; }
        /// <summary> Base URL that `Document` or `FrameOwner` node uses for URL completion. </summary>
        public string BaseURL { get; set; }
        /// <summary> `DocumentType`&apos;s publicId. </summary>
        public string PublicId { get; set; }
        /// <summary> `DocumentType`&apos;s systemId. </summary>
        public string SystemId { get; set; }
        /// <summary> `DocumentType`&apos;s internalSubset. </summary>
        public string InternalSubset { get; set; }
        /// <summary> `Document`&apos;s XML version in case of XML documents. </summary>
        public string XmlVersion { get; set; }
        /// <summary> `Attr`&apos;s name. </summary>
        public string Name { get; set; }
        /// <summary> `Attr`&apos;s value. </summary>
        public string Value { get; set; }
        /// <summary> Pseudo element type for this node. </summary>
        public string PseudoType { get; set; }
        /// <summary>
        /// Pseudo element identifier for this node. Only present if there is a
        /// valid pseudoType.
        /// </summary>
        public string PseudoIdentifier { get; set; }
        /// <summary> Shadow root type. </summary>
        public string ShadowRootType { get; set; }
        /// <summary> Frame ID for frame owner elements. </summary>
        public string FrameId { get; set; }
        /// <summary> Content document for frame owner elements. </summary>
        public TypeNode ContentDocument { get; set; }
        /// <summary> Shadow root list for given element host. </summary>
        public IList<TypeNode> ShadowRoots { get; }
        /// <summary> Content document fragment for template elements. </summary>
        public TypeNode TemplateContent { get; set; }
        /// <summary> Pseudo elements associated with this node. </summary>
        public IList<TypeNode> PseudoElements { get; }
        /// <summary>
        /// Deprecated, as the HTML Imports API has been removed (crbug.com/937746).
        /// This property used to return the imported document for the HTMLImport links.
        /// The property is always undefined now.
        /// </summary>
        public TypeNode ImportedDocument { get; set; }
        /// <summary> Distributed nodes for given insertion point. </summary>
        public IList<TypeBackendNode> DistributedNodes { get; }
        /// <summary> Whether the node is SVG. </summary>
        public bool? IsSVG { get; set; }
        /// <summary> Document compatibility mode. </summary>
        public string CompatibilityMode { get; set; }
        /// <summary> Backend node with a friendly name. </summary>
        public TypeBackendNode AssignedSlot { get; set; }
    }
}
