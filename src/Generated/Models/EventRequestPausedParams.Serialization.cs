// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventRequestPausedParamsConverter))]
    public partial class EventRequestPausedParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("requestId"u8);
            writer.WriteStringValue(RequestId);
            writer.WritePropertyName("request"u8);
            writer.WriteObjectValue(Request);
            writer.WritePropertyName("frameId"u8);
            writer.WriteStringValue(FrameId);
            writer.WritePropertyName("resourceType"u8);
            writer.WriteStringValue(ResourceType);
            if (Optional.IsDefined(ResponseErrorReason))
            {
                writer.WritePropertyName("responseErrorReason"u8);
                writer.WriteStringValue(ResponseErrorReason);
            }
            if (Optional.IsDefined(ResponseStatusCode))
            {
                writer.WritePropertyName("responseStatusCode"u8);
                writer.WriteNumberValue(ResponseStatusCode.Value);
            }
            if (Optional.IsDefined(ResponseStatusText))
            {
                writer.WritePropertyName("responseStatusText"u8);
                writer.WriteStringValue(ResponseStatusText);
            }
            if (Optional.IsCollectionDefined(ResponseHeaders))
            {
                writer.WritePropertyName("responseHeaders"u8);
                writer.WriteStartArray();
                foreach (var item in ResponseHeaders)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(NetworkId))
            {
                writer.WritePropertyName("networkId"u8);
                writer.WriteStringValue(NetworkId);
            }
            if (Optional.IsDefined(RedirectedRequestId))
            {
                writer.WritePropertyName("redirectedRequestId"u8);
                writer.WriteStringValue(RedirectedRequestId);
            }
            writer.WriteEndObject();
        }

        internal static EventRequestPausedParams DeserializeEventRequestPausedParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string requestId = default;
            TypeRequest request = default;
            string frameId = default;
            string resourceType = default;
            Optional<string> responseErrorReason = default;
            Optional<int> responseStatusCode = default;
            Optional<string> responseStatusText = default;
            Optional<IList<TypeHeaderEntry>> responseHeaders = default;
            Optional<string> networkId = default;
            Optional<string> redirectedRequestId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requestId"u8))
                {
                    requestId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("request"u8))
                {
                    request = TypeRequest.DeserializeTypeRequest(property.Value);
                    continue;
                }
                if (property.NameEquals("frameId"u8))
                {
                    frameId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceType"u8))
                {
                    resourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("responseErrorReason"u8))
                {
                    responseErrorReason = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("responseStatusCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    responseStatusCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("responseStatusText"u8))
                {
                    responseStatusText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("responseHeaders"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypeHeaderEntry> array = new List<TypeHeaderEntry>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeHeaderEntry.DeserializeTypeHeaderEntry(item));
                    }
                    responseHeaders = array;
                    continue;
                }
                if (property.NameEquals("networkId"u8))
                {
                    networkId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("redirectedRequestId"u8))
                {
                    redirectedRequestId = property.Value.GetString();
                    continue;
                }
            }
            return new EventRequestPausedParams(requestId, request, frameId, resourceType, responseErrorReason.Value, Optional.ToNullable(responseStatusCode), responseStatusText.Value, Optional.ToList(responseHeaders), networkId.Value, redirectedRequestId.Value);
        }

        internal partial class EventRequestPausedParamsConverter : JsonConverter<EventRequestPausedParams>
        {
            public override void Write(Utf8JsonWriter writer, EventRequestPausedParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventRequestPausedParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventRequestPausedParams(document.RootElement);
            }
        }
    }
}
