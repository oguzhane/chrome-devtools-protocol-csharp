// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// Fired when additional information about a responseReceived event is available from the network
    /// stack. Not every responseReceived event will have an additional responseReceivedExtraInfo for
    /// it, and responseReceivedExtraInfo may be fired before or after responseReceived.
    /// </summary>
    public partial class EventResponseReceivedExtraInfoParams
    {
        /// <summary> Initializes a new instance of EventResponseReceivedExtraInfoParams. </summary>
        /// <param name="requestId"> Request identifier. Used to match this information to another responseReceived event. </param>
        /// <param name="blockedCookies">
        /// A list of cookies which were not stored from the response along with the corresponding
        /// reasons for blocking. The cookies here may not be valid due to syntax errors, which
        /// are represented by the invalid cookie line string instead of a proper cookie.
        /// </param>
        /// <param name="headers"> Raw response headers as they were received over the wire. </param>
        /// <param name="resourceIPAddressSpace">
        /// The IP address space of the resource. The address space can only be determined once the transport
        /// established the connection, so we can&apos;t send it in `requestWillBeSentExtraInfo`.
        /// </param>
        /// <param name="statusCode">
        /// The status code of the response. This is useful in cases the request failed and no responseReceived
        /// event is triggered, which is the case for, e.g., CORS errors. This is also the correct status code
        /// for cached requests, where the status in responseReceived is a 200 and this will be 304.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestId"/>, <paramref name="blockedCookies"/>, <paramref name="headers"/> or <paramref name="resourceIPAddressSpace"/> is null. </exception>
        public EventResponseReceivedExtraInfoParams(string requestId, IEnumerable<TypeBlockedSetCookieWithReason> blockedCookies, object headers, string resourceIPAddressSpace, int statusCode)
        {
            Argument.AssertNotNull(requestId, nameof(requestId));
            Argument.AssertNotNull(blockedCookies, nameof(blockedCookies));
            Argument.AssertNotNull(headers, nameof(headers));
            Argument.AssertNotNull(resourceIPAddressSpace, nameof(resourceIPAddressSpace));

            RequestId = requestId;
            BlockedCookies = blockedCookies.ToList();
            Headers = headers;
            ResourceIPAddressSpace = resourceIPAddressSpace;
            StatusCode = statusCode;
        }

        /// <summary> Initializes a new instance of EventResponseReceivedExtraInfoParams. </summary>
        /// <param name="requestId"> Request identifier. Used to match this information to another responseReceived event. </param>
        /// <param name="blockedCookies">
        /// A list of cookies which were not stored from the response along with the corresponding
        /// reasons for blocking. The cookies here may not be valid due to syntax errors, which
        /// are represented by the invalid cookie line string instead of a proper cookie.
        /// </param>
        /// <param name="headers"> Raw response headers as they were received over the wire. </param>
        /// <param name="resourceIPAddressSpace">
        /// The IP address space of the resource. The address space can only be determined once the transport
        /// established the connection, so we can&apos;t send it in `requestWillBeSentExtraInfo`.
        /// </param>
        /// <param name="statusCode">
        /// The status code of the response. This is useful in cases the request failed and no responseReceived
        /// event is triggered, which is the case for, e.g., CORS errors. This is also the correct status code
        /// for cached requests, where the status in responseReceived is a 200 and this will be 304.
        /// </param>
        /// <param name="headersText">
        /// Raw response header text as it was received over the wire. The raw text may not always be
        /// available, such as in the case of HTTP/2 or QUIC.
        /// </param>
        /// <param name="cookiePartitionKey">
        /// The cookie partition key that will be used to store partitioned cookies set in this response.
        /// Only sent when partitioned cookies are enabled.
        /// </param>
        /// <param name="cookiePartitionKeyOpaque"> True if partitioned cookies are enabled, but the partition key is not serializeable to string. </param>
        internal EventResponseReceivedExtraInfoParams(string requestId, IList<TypeBlockedSetCookieWithReason> blockedCookies, object headers, string resourceIPAddressSpace, int statusCode, string headersText, string cookiePartitionKey, bool? cookiePartitionKeyOpaque)
        {
            RequestId = requestId;
            BlockedCookies = blockedCookies;
            Headers = headers;
            ResourceIPAddressSpace = resourceIPAddressSpace;
            StatusCode = statusCode;
            HeadersText = headersText;
            CookiePartitionKey = cookiePartitionKey;
            CookiePartitionKeyOpaque = cookiePartitionKeyOpaque;
        }

        /// <summary> Request identifier. Used to match this information to another responseReceived event. </summary>
        public string RequestId { get; set; }
        /// <summary>
        /// A list of cookies which were not stored from the response along with the corresponding
        /// reasons for blocking. The cookies here may not be valid due to syntax errors, which
        /// are represented by the invalid cookie line string instead of a proper cookie.
        /// </summary>
        public IList<TypeBlockedSetCookieWithReason> BlockedCookies { get; }
        /// <summary> Raw response headers as they were received over the wire. </summary>
        public object Headers { get; set; }
        /// <summary>
        /// The IP address space of the resource. The address space can only be determined once the transport
        /// established the connection, so we can&apos;t send it in `requestWillBeSentExtraInfo`.
        /// </summary>
        public string ResourceIPAddressSpace { get; set; }
        /// <summary>
        /// The status code of the response. This is useful in cases the request failed and no responseReceived
        /// event is triggered, which is the case for, e.g., CORS errors. This is also the correct status code
        /// for cached requests, where the status in responseReceived is a 200 and this will be 304.
        /// </summary>
        public int StatusCode { get; set; }
        /// <summary>
        /// Raw response header text as it was received over the wire. The raw text may not always be
        /// available, such as in the case of HTTP/2 or QUIC.
        /// </summary>
        public string HeadersText { get; set; }
        /// <summary>
        /// The cookie partition key that will be used to store partitioned cookies set in this response.
        /// Only sent when partitioned cookies are enabled.
        /// </summary>
        public string CookiePartitionKey { get; set; }
        /// <summary> True if partitioned cookies are enabled, but the partition key is not serializeable to string. </summary>
        public bool? CookiePartitionKeyOpaque { get; set; }
    }
}
