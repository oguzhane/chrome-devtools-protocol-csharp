// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// Details for issues around &quot;Attribution Reporting API&quot; usage.
    /// Explainer: https://github.com/WICG/attribution-reporting-api
    /// </summary>
    public partial class TypeAttributionReportingIssueDetails
    {
        /// <summary> Initializes a new instance of TypeAttributionReportingIssueDetails. </summary>
        /// <param name="violationType"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="violationType"/> is null. </exception>
        public TypeAttributionReportingIssueDetails(string violationType)
        {
            Argument.AssertNotNull(violationType, nameof(violationType));

            ViolationType = violationType;
        }

        /// <summary> Initializes a new instance of TypeAttributionReportingIssueDetails. </summary>
        /// <param name="violationType"></param>
        /// <param name="request"> Information about a request that is affected by an inspector issue. </param>
        /// <param name="violatingNodeId">
        /// Unique DOM node identifier used to reference a node that may not have been pushed to the
        /// front-end.
        /// </param>
        /// <param name="invalidParameter"></param>
        internal TypeAttributionReportingIssueDetails(string violationType, TypeAffectedRequest request, int? violatingNodeId, string invalidParameter)
        {
            ViolationType = violationType;
            Request = request;
            ViolatingNodeId = violatingNodeId;
            InvalidParameter = invalidParameter;
        }

        /// <summary> Gets or sets the violation type. </summary>
        public string ViolationType { get; set; }
        /// <summary> Information about a request that is affected by an inspector issue. </summary>
        public TypeAffectedRequest Request { get; set; }
        /// <summary>
        /// Unique DOM node identifier used to reference a node that may not have been pushed to the
        /// front-end.
        /// </summary>
        public int? ViolatingNodeId { get; set; }
        /// <summary> Gets or sets the invalid parameter. </summary>
        public string InvalidParameter { get; set; }
    }
}
