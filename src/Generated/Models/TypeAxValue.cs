// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> A single computed AX property. </summary>
    public partial class TypeAxValue
    {
        /// <summary> Initializes a new instance of TypeAxValue. </summary>
        /// <param name="type"> The type of this value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="type"/> is null. </exception>
        public TypeAxValue(string type)
        {
            Argument.AssertNotNull(type, nameof(type));

            Type = type;
            RelatedNodes = new ChangeTrackingList<TypeAxRelatedNode>();
            Sources = new ChangeTrackingList<TypeAxValueSource>();
        }

        /// <summary> Initializes a new instance of TypeAxValue. </summary>
        /// <param name="type"> The type of this value. </param>
        /// <param name="value"> The computed value of this property. </param>
        /// <param name="relatedNodes"> One or more related nodes, if applicable. </param>
        /// <param name="sources"> The sources which contributed to the computation of this property. </param>
        internal TypeAxValue(string type, object value, IList<TypeAxRelatedNode> relatedNodes, IList<TypeAxValueSource> sources)
        {
            Type = type;
            Value = value;
            RelatedNodes = relatedNodes;
            Sources = sources;
        }

        /// <summary> The type of this value. </summary>
        public string Type { get; set; }
        /// <summary> The computed value of this property. </summary>
        public object Value { get; set; }
        /// <summary> One or more related nodes, if applicable. </summary>
        public IList<TypeAxRelatedNode> RelatedNodes { get; }
        /// <summary> The sources which contributed to the computation of this property. </summary>
        public IList<TypeAxValueSource> Sources { get; }
    }
}
