// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeSignedExchangeHeaderConverter))]
    public partial class TypeSignedExchangeHeader : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("requestUrl"u8);
            writer.WriteStringValue(RequestUrl);
            writer.WritePropertyName("responseCode"u8);
            writer.WriteNumberValue(ResponseCode);
            writer.WritePropertyName("responseHeaders"u8);
            writer.WriteObjectValue(ResponseHeaders);
            writer.WritePropertyName("signatures"u8);
            writer.WriteStartArray();
            foreach (var item in Signatures)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("headerIntegrity"u8);
            writer.WriteStringValue(HeaderIntegrity);
            writer.WriteEndObject();
        }

        internal static TypeSignedExchangeHeader DeserializeTypeSignedExchangeHeader(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string requestUrl = default;
            int responseCode = default;
            object responseHeaders = default;
            IList<TypeSignedExchangeSignature> signatures = default;
            string headerIntegrity = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requestUrl"u8))
                {
                    requestUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("responseCode"u8))
                {
                    responseCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("responseHeaders"u8))
                {
                    responseHeaders = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("signatures"u8))
                {
                    List<TypeSignedExchangeSignature> array = new List<TypeSignedExchangeSignature>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeSignedExchangeSignature.DeserializeTypeSignedExchangeSignature(item));
                    }
                    signatures = array;
                    continue;
                }
                if (property.NameEquals("headerIntegrity"u8))
                {
                    headerIntegrity = property.Value.GetString();
                    continue;
                }
            }
            return new TypeSignedExchangeHeader(requestUrl, responseCode, responseHeaders, signatures, headerIntegrity);
        }

        internal partial class TypeSignedExchangeHeaderConverter : JsonConverter<TypeSignedExchangeHeader>
        {
            public override void Write(Utf8JsonWriter writer, TypeSignedExchangeHeader model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeSignedExchangeHeader Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeSignedExchangeHeader(document.RootElement);
            }
        }
    }
}
