// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeDragDataConverter))]
    public partial class TypeDragData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("items"u8);
            writer.WriteStartArray();
            foreach (var item in Items)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(Files))
            {
                writer.WritePropertyName("files"u8);
                writer.WriteStartArray();
                foreach (var item in Files)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("dragOperationsMask"u8);
            writer.WriteNumberValue(DragOperationsMask);
            writer.WriteEndObject();
        }

        internal static TypeDragData DeserializeTypeDragData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<TypeDragDataItem> items = default;
            Optional<IList<string>> files = default;
            int dragOperationsMask = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("items"u8))
                {
                    List<TypeDragDataItem> array = new List<TypeDragDataItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeDragDataItem.DeserializeTypeDragDataItem(item));
                    }
                    items = array;
                    continue;
                }
                if (property.NameEquals("files"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    files = array;
                    continue;
                }
                if (property.NameEquals("dragOperationsMask"u8))
                {
                    dragOperationsMask = property.Value.GetInt32();
                    continue;
                }
            }
            return new TypeDragData(items, Optional.ToList(files), dragOperationsMask);
        }

        internal partial class TypeDragDataConverter : JsonConverter<TypeDragData>
        {
            public override void Write(Utf8JsonWriter writer, TypeDragData model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeDragData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeDragData(document.RootElement);
            }
        }
    }
}
