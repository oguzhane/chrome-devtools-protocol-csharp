// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeScreencastFrameMetadataConverter))]
    public partial class TypeScreencastFrameMetadata : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("offsetTop"u8);
            writer.WriteNumberValue(OffsetTop);
            writer.WritePropertyName("pageScaleFactor"u8);
            writer.WriteNumberValue(PageScaleFactor);
            writer.WritePropertyName("deviceWidth"u8);
            writer.WriteNumberValue(DeviceWidth);
            writer.WritePropertyName("deviceHeight"u8);
            writer.WriteNumberValue(DeviceHeight);
            writer.WritePropertyName("scrollOffsetX"u8);
            writer.WriteNumberValue(ScrollOffsetX);
            writer.WritePropertyName("scrollOffsetY"u8);
            writer.WriteNumberValue(ScrollOffsetY);
            if (Optional.IsDefined(Timestamp))
            {
                writer.WritePropertyName("timestamp"u8);
                writer.WriteNumberValue(Timestamp.Value);
            }
            writer.WriteEndObject();
        }

        internal static TypeScreencastFrameMetadata DeserializeTypeScreencastFrameMetadata(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            float offsetTop = default;
            float pageScaleFactor = default;
            float deviceWidth = default;
            float deviceHeight = default;
            float scrollOffsetX = default;
            float scrollOffsetY = default;
            Optional<float> timestamp = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("offsetTop"u8))
                {
                    offsetTop = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("pageScaleFactor"u8))
                {
                    pageScaleFactor = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("deviceWidth"u8))
                {
                    deviceWidth = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("deviceHeight"u8))
                {
                    deviceHeight = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("scrollOffsetX"u8))
                {
                    scrollOffsetX = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("scrollOffsetY"u8))
                {
                    scrollOffsetY = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("timestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    timestamp = property.Value.GetSingle();
                    continue;
                }
            }
            return new TypeScreencastFrameMetadata(offsetTop, pageScaleFactor, deviceWidth, deviceHeight, scrollOffsetX, scrollOffsetY, Optional.ToNullable(timestamp));
        }

        internal partial class TypeScreencastFrameMetadataConverter : JsonConverter<TypeScreencastFrameMetadata>
        {
            public override void Write(Utf8JsonWriter writer, TypeScreencastFrameMetadata model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeScreencastFrameMetadata Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeScreencastFrameMetadata(document.RootElement);
            }
        }
    }
}
