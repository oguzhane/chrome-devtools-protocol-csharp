// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventRequestWillBeSentParamsConverter))]
    public partial class EventRequestWillBeSentParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("requestId"u8);
            writer.WriteStringValue(RequestId);
            writer.WritePropertyName("loaderId"u8);
            writer.WriteStringValue(LoaderId);
            writer.WritePropertyName("documentURL"u8);
            writer.WriteStringValue(DocumentURL);
            writer.WritePropertyName("request"u8);
            writer.WriteObjectValue(Request);
            writer.WritePropertyName("timestamp"u8);
            writer.WriteNumberValue(Timestamp);
            writer.WritePropertyName("wallTime"u8);
            writer.WriteNumberValue(WallTime);
            writer.WritePropertyName("initiator"u8);
            writer.WriteObjectValue(Initiator);
            writer.WritePropertyName("redirectHasExtraInfo"u8);
            writer.WriteBooleanValue(RedirectHasExtraInfo);
            if (Optional.IsDefined(RedirectResponse))
            {
                writer.WritePropertyName("redirectResponse"u8);
                writer.WriteObjectValue(RedirectResponse);
            }
            if (Optional.IsDefined(Type))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(Type);
            }
            if (Optional.IsDefined(FrameId))
            {
                writer.WritePropertyName("frameId"u8);
                writer.WriteStringValue(FrameId);
            }
            if (Optional.IsDefined(HasUserGesture))
            {
                writer.WritePropertyName("hasUserGesture"u8);
                writer.WriteBooleanValue(HasUserGesture.Value);
            }
            writer.WriteEndObject();
        }

        internal static EventRequestWillBeSentParams DeserializeEventRequestWillBeSentParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string requestId = default;
            string loaderId = default;
            string documentURL = default;
            TypeRequest request = default;
            float timestamp = default;
            float wallTime = default;
            TypeInitiator initiator = default;
            bool redirectHasExtraInfo = default;
            Optional<TypeResponse> redirectResponse = default;
            Optional<string> type = default;
            Optional<string> frameId = default;
            Optional<bool> hasUserGesture = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requestId"u8))
                {
                    requestId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("loaderId"u8))
                {
                    loaderId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("documentURL"u8))
                {
                    documentURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("request"u8))
                {
                    request = TypeRequest.DeserializeTypeRequest(property.Value);
                    continue;
                }
                if (property.NameEquals("timestamp"u8))
                {
                    timestamp = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("wallTime"u8))
                {
                    wallTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("initiator"u8))
                {
                    initiator = TypeInitiator.DeserializeTypeInitiator(property.Value);
                    continue;
                }
                if (property.NameEquals("redirectHasExtraInfo"u8))
                {
                    redirectHasExtraInfo = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("redirectResponse"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    redirectResponse = TypeResponse.DeserializeTypeResponse(property.Value);
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("frameId"u8))
                {
                    frameId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hasUserGesture"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hasUserGesture = property.Value.GetBoolean();
                    continue;
                }
            }
            return new EventRequestWillBeSentParams(requestId, loaderId, documentURL, request, timestamp, wallTime, initiator, redirectHasExtraInfo, redirectResponse.Value, type.Value, frameId.Value, Optional.ToNullable(hasUserGesture));
        }

        internal partial class EventRequestWillBeSentParamsConverter : JsonConverter<EventRequestWillBeSentParams>
        {
            public override void Write(Utf8JsonWriter writer, EventRequestWillBeSentParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventRequestWillBeSentParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventRequestWillBeSentParams(document.RootElement);
            }
        }
    }
}
