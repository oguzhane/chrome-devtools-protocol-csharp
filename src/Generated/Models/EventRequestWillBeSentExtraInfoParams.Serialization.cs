// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventRequestWillBeSentExtraInfoParamsConverter))]
    public partial class EventRequestWillBeSentExtraInfoParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("requestId"u8);
            writer.WriteStringValue(RequestId);
            writer.WritePropertyName("associatedCookies"u8);
            writer.WriteStartArray();
            foreach (var item in AssociatedCookies)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("headers"u8);
            writer.WriteObjectValue(Headers);
            writer.WritePropertyName("connectTiming"u8);
            writer.WriteObjectValue(ConnectTiming);
            if (Optional.IsDefined(ClientSecurityState))
            {
                writer.WritePropertyName("clientSecurityState"u8);
                writer.WriteObjectValue(ClientSecurityState);
            }
            if (Optional.IsDefined(SiteHasCookieInOtherPartition))
            {
                writer.WritePropertyName("siteHasCookieInOtherPartition"u8);
                writer.WriteBooleanValue(SiteHasCookieInOtherPartition.Value);
            }
            writer.WriteEndObject();
        }

        internal static EventRequestWillBeSentExtraInfoParams DeserializeEventRequestWillBeSentExtraInfoParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string requestId = default;
            IList<TypeBlockedCookieWithReason> associatedCookies = default;
            object headers = default;
            TypeConnectTiming connectTiming = default;
            Optional<TypeClientSecurityState> clientSecurityState = default;
            Optional<bool> siteHasCookieInOtherPartition = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requestId"u8))
                {
                    requestId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("associatedCookies"u8))
                {
                    List<TypeBlockedCookieWithReason> array = new List<TypeBlockedCookieWithReason>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeBlockedCookieWithReason.DeserializeTypeBlockedCookieWithReason(item));
                    }
                    associatedCookies = array;
                    continue;
                }
                if (property.NameEquals("headers"u8))
                {
                    headers = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("connectTiming"u8))
                {
                    connectTiming = TypeConnectTiming.DeserializeTypeConnectTiming(property.Value);
                    continue;
                }
                if (property.NameEquals("clientSecurityState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    clientSecurityState = TypeClientSecurityState.DeserializeTypeClientSecurityState(property.Value);
                    continue;
                }
                if (property.NameEquals("siteHasCookieInOtherPartition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    siteHasCookieInOtherPartition = property.Value.GetBoolean();
                    continue;
                }
            }
            return new EventRequestWillBeSentExtraInfoParams(requestId, associatedCookies, headers, connectTiming, clientSecurityState.Value, Optional.ToNullable(siteHasCookieInOtherPartition));
        }

        internal partial class EventRequestWillBeSentExtraInfoParamsConverter : JsonConverter<EventRequestWillBeSentExtraInfoParams>
        {
            public override void Write(Utf8JsonWriter writer, EventRequestWillBeSentExtraInfoParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventRequestWillBeSentExtraInfoParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventRequestWillBeSentExtraInfoParams(document.RootElement);
            }
        }
    }
}
