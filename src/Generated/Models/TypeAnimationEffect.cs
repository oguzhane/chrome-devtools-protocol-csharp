// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> AnimationEffect instance. </summary>
    public partial class TypeAnimationEffect
    {
        /// <summary> Initializes a new instance of TypeAnimationEffect. </summary>
        /// <param name="delay"> `AnimationEffect`&apos;s delay. </param>
        /// <param name="endDelay"> `AnimationEffect`&apos;s end delay. </param>
        /// <param name="iterationStart"> `AnimationEffect`&apos;s iteration start. </param>
        /// <param name="iterations"> `AnimationEffect`&apos;s iterations. </param>
        /// <param name="duration"> `AnimationEffect`&apos;s iteration duration. </param>
        /// <param name="direction"> `AnimationEffect`&apos;s playback direction. </param>
        /// <param name="fill"> `AnimationEffect`&apos;s fill mode. </param>
        /// <param name="easing"> `AnimationEffect`&apos;s timing function. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="direction"/>, <paramref name="fill"/> or <paramref name="easing"/> is null. </exception>
        public TypeAnimationEffect(float delay, float endDelay, float iterationStart, float iterations, float duration, string direction, string fill, string easing)
        {
            Argument.AssertNotNull(direction, nameof(direction));
            Argument.AssertNotNull(fill, nameof(fill));
            Argument.AssertNotNull(easing, nameof(easing));

            Delay = delay;
            EndDelay = endDelay;
            IterationStart = iterationStart;
            Iterations = iterations;
            Duration = duration;
            Direction = direction;
            Fill = fill;
            Easing = easing;
        }

        /// <summary> Initializes a new instance of TypeAnimationEffect. </summary>
        /// <param name="delay"> `AnimationEffect`&apos;s delay. </param>
        /// <param name="endDelay"> `AnimationEffect`&apos;s end delay. </param>
        /// <param name="iterationStart"> `AnimationEffect`&apos;s iteration start. </param>
        /// <param name="iterations"> `AnimationEffect`&apos;s iterations. </param>
        /// <param name="duration"> `AnimationEffect`&apos;s iteration duration. </param>
        /// <param name="direction"> `AnimationEffect`&apos;s playback direction. </param>
        /// <param name="fill"> `AnimationEffect`&apos;s fill mode. </param>
        /// <param name="backendNodeId"> `AnimationEffect`&apos;s target node. </param>
        /// <param name="keyframesRule"> `AnimationEffect`&apos;s keyframes. </param>
        /// <param name="easing"> `AnimationEffect`&apos;s timing function. </param>
        internal TypeAnimationEffect(float delay, float endDelay, float iterationStart, float iterations, float duration, string direction, string fill, int? backendNodeId, TypeKeyframesRule keyframesRule, string easing)
        {
            Delay = delay;
            EndDelay = endDelay;
            IterationStart = iterationStart;
            Iterations = iterations;
            Duration = duration;
            Direction = direction;
            Fill = fill;
            BackendNodeId = backendNodeId;
            KeyframesRule = keyframesRule;
            Easing = easing;
        }

        /// <summary> `AnimationEffect`&apos;s delay. </summary>
        public float Delay { get; set; }
        /// <summary> `AnimationEffect`&apos;s end delay. </summary>
        public float EndDelay { get; set; }
        /// <summary> `AnimationEffect`&apos;s iteration start. </summary>
        public float IterationStart { get; set; }
        /// <summary> `AnimationEffect`&apos;s iterations. </summary>
        public float Iterations { get; set; }
        /// <summary> `AnimationEffect`&apos;s iteration duration. </summary>
        public float Duration { get; set; }
        /// <summary> `AnimationEffect`&apos;s playback direction. </summary>
        public string Direction { get; set; }
        /// <summary> `AnimationEffect`&apos;s fill mode. </summary>
        public string Fill { get; set; }
        /// <summary> `AnimationEffect`&apos;s target node. </summary>
        public int? BackendNodeId { get; set; }
        /// <summary> `AnimationEffect`&apos;s keyframes. </summary>
        public TypeKeyframesRule KeyframesRule { get; set; }
        /// <summary> `AnimationEffect`&apos;s timing function. </summary>
        public string Easing { get; set; }
    }
}
