// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeInsecureContentStatusConverter))]
    public partial class TypeInsecureContentStatus : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("ranMixedContent"u8);
            writer.WriteBooleanValue(RanMixedContent);
            writer.WritePropertyName("displayedMixedContent"u8);
            writer.WriteBooleanValue(DisplayedMixedContent);
            writer.WritePropertyName("containedMixedForm"u8);
            writer.WriteBooleanValue(ContainedMixedForm);
            writer.WritePropertyName("ranContentWithCertErrors"u8);
            writer.WriteBooleanValue(RanContentWithCertErrors);
            writer.WritePropertyName("displayedContentWithCertErrors"u8);
            writer.WriteBooleanValue(DisplayedContentWithCertErrors);
            writer.WritePropertyName("ranInsecureContentStyle"u8);
            writer.WriteStringValue(RanInsecureContentStyle);
            writer.WritePropertyName("displayedInsecureContentStyle"u8);
            writer.WriteStringValue(DisplayedInsecureContentStyle);
            writer.WriteEndObject();
        }

        internal static TypeInsecureContentStatus DeserializeTypeInsecureContentStatus(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            bool ranMixedContent = default;
            bool displayedMixedContent = default;
            bool containedMixedForm = default;
            bool ranContentWithCertErrors = default;
            bool displayedContentWithCertErrors = default;
            string ranInsecureContentStyle = default;
            string displayedInsecureContentStyle = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ranMixedContent"u8))
                {
                    ranMixedContent = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("displayedMixedContent"u8))
                {
                    displayedMixedContent = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("containedMixedForm"u8))
                {
                    containedMixedForm = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("ranContentWithCertErrors"u8))
                {
                    ranContentWithCertErrors = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("displayedContentWithCertErrors"u8))
                {
                    displayedContentWithCertErrors = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("ranInsecureContentStyle"u8))
                {
                    ranInsecureContentStyle = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayedInsecureContentStyle"u8))
                {
                    displayedInsecureContentStyle = property.Value.GetString();
                    continue;
                }
            }
            return new TypeInsecureContentStatus(ranMixedContent, displayedMixedContent, containedMixedForm, ranContentWithCertErrors, displayedContentWithCertErrors, ranInsecureContentStyle, displayedInsecureContentStyle);
        }

        internal partial class TypeInsecureContentStatusConverter : JsonConverter<TypeInsecureContentStatus>
        {
            public override void Write(Utf8JsonWriter writer, TypeInsecureContentStatus model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeInsecureContentStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeInsecureContentStatus(document.RootElement);
            }
        }
    }
}
