// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> Issued when console API was called. </summary>
    public partial class EventConsoleApiCalledParams
    {
        /// <summary> Initializes a new instance of EventConsoleApiCalledParams. </summary>
        /// <param name="type"> Type of the call. </param>
        /// <param name="args"> Call arguments. </param>
        /// <param name="executionContextId"> Identifier of the context where the call was made. </param>
        /// <param name="timestamp"> Call timestamp. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="type"/> or <paramref name="args"/> is null. </exception>
        public EventConsoleApiCalledParams(string type, IEnumerable<TypeRemoteObject> args, int executionContextId, float timestamp)
        {
            Argument.AssertNotNull(type, nameof(type));
            Argument.AssertNotNull(args, nameof(args));

            Type = type;
            Args = args.ToList();
            ExecutionContextId = executionContextId;
            Timestamp = timestamp;
        }

        /// <summary> Initializes a new instance of EventConsoleApiCalledParams. </summary>
        /// <param name="type"> Type of the call. </param>
        /// <param name="args"> Call arguments. </param>
        /// <param name="executionContextId"> Identifier of the context where the call was made. </param>
        /// <param name="timestamp"> Call timestamp. </param>
        /// <param name="stackTrace">
        /// Stack trace captured when the call was made. The async stack chain is automatically reported for
        /// the following call types: `assert`, `error`, `trace`, `warning`. For other types the async call
        /// chain can be retrieved using `Debugger.getStackTrace` and `stackTrace.parentId` field.
        /// </param>
        /// <param name="context">
        /// Console context descriptor for calls on non-default console context (not console.*):
        /// &apos;anonymous#unique-logger-id&apos; for call on unnamed context, &apos;name#unique-logger-id&apos; for call
        /// on named context.
        /// </param>
        internal EventConsoleApiCalledParams(string type, IList<TypeRemoteObject> args, int executionContextId, float timestamp, TypeStackTrace stackTrace, string context)
        {
            Type = type;
            Args = args;
            ExecutionContextId = executionContextId;
            Timestamp = timestamp;
            StackTrace = stackTrace;
            Context = context;
        }

        /// <summary> Type of the call. </summary>
        public string Type { get; set; }
        /// <summary> Call arguments. </summary>
        public IList<TypeRemoteObject> Args { get; }
        /// <summary> Identifier of the context where the call was made. </summary>
        public int ExecutionContextId { get; set; }
        /// <summary> Call timestamp. </summary>
        public float Timestamp { get; set; }
        /// <summary>
        /// Stack trace captured when the call was made. The async stack chain is automatically reported for
        /// the following call types: `assert`, `error`, `trace`, `warning`. For other types the async call
        /// chain can be retrieved using `Debugger.getStackTrace` and `stackTrace.parentId` field.
        /// </summary>
        public TypeStackTrace StackTrace { get; set; }
        /// <summary>
        /// Console context descriptor for calls on non-default console context (not console.*):
        /// &apos;anonymous#unique-logger-id&apos; for call on unnamed context, &apos;name#unique-logger-id&apos; for call
        /// on named context.
        /// </summary>
        public string Context { get; set; }
    }
}
