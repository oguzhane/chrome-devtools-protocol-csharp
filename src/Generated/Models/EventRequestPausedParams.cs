// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// Issued when the domain is enabled and the request URL matches the
    /// specified filter. The request is paused until the client responds
    /// with one of continueRequest, failRequest or fulfillRequest.
    /// The stage of the request can be determined by presence of responseErrorReason
    /// and responseStatusCode -- the request is at the response stage if either
    /// of these fields is present and in the request stage otherwise.
    /// </summary>
    public partial class EventRequestPausedParams
    {
        /// <summary> Initializes a new instance of EventRequestPausedParams. </summary>
        /// <param name="requestId"> Each request the page makes will have a unique id. </param>
        /// <param name="request"> The details of the request. </param>
        /// <param name="frameId"> The id of the frame that initiated the request. </param>
        /// <param name="resourceType"> How the requested resource will be used. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestId"/>, <paramref name="request"/>, <paramref name="frameId"/> or <paramref name="resourceType"/> is null. </exception>
        public EventRequestPausedParams(string requestId, TypeRequest request, string frameId, string resourceType)
        {
            Argument.AssertNotNull(requestId, nameof(requestId));
            Argument.AssertNotNull(request, nameof(request));
            Argument.AssertNotNull(frameId, nameof(frameId));
            Argument.AssertNotNull(resourceType, nameof(resourceType));

            RequestId = requestId;
            Request = request;
            FrameId = frameId;
            ResourceType = resourceType;
            ResponseHeaders = new ChangeTrackingList<TypeHeaderEntry>();
        }

        /// <summary> Initializes a new instance of EventRequestPausedParams. </summary>
        /// <param name="requestId"> Each request the page makes will have a unique id. </param>
        /// <param name="request"> The details of the request. </param>
        /// <param name="frameId"> The id of the frame that initiated the request. </param>
        /// <param name="resourceType"> How the requested resource will be used. </param>
        /// <param name="responseErrorReason"> Response error if intercepted at response stage. </param>
        /// <param name="responseStatusCode"> Response code if intercepted at response stage. </param>
        /// <param name="responseStatusText"> Response status text if intercepted at response stage. </param>
        /// <param name="responseHeaders"> Response headers if intercepted at the response stage. </param>
        /// <param name="networkId">
        /// If the intercepted request had a corresponding Network.requestWillBeSent event fired for it,
        /// then this networkId will be the same as the requestId present in the requestWillBeSent event.
        /// </param>
        /// <param name="redirectedRequestId">
        /// If the request is due to a redirect response from the server, the id of the request that
        /// has caused the redirect.
        /// </param>
        internal EventRequestPausedParams(string requestId, TypeRequest request, string frameId, string resourceType, string responseErrorReason, int? responseStatusCode, string responseStatusText, IList<TypeHeaderEntry> responseHeaders, string networkId, string redirectedRequestId)
        {
            RequestId = requestId;
            Request = request;
            FrameId = frameId;
            ResourceType = resourceType;
            ResponseErrorReason = responseErrorReason;
            ResponseStatusCode = responseStatusCode;
            ResponseStatusText = responseStatusText;
            ResponseHeaders = responseHeaders;
            NetworkId = networkId;
            RedirectedRequestId = redirectedRequestId;
        }

        /// <summary> Each request the page makes will have a unique id. </summary>
        public string RequestId { get; set; }
        /// <summary> The details of the request. </summary>
        public TypeRequest Request { get; set; }
        /// <summary> The id of the frame that initiated the request. </summary>
        public string FrameId { get; set; }
        /// <summary> How the requested resource will be used. </summary>
        public string ResourceType { get; set; }
        /// <summary> Response error if intercepted at response stage. </summary>
        public string ResponseErrorReason { get; set; }
        /// <summary> Response code if intercepted at response stage. </summary>
        public int? ResponseStatusCode { get; set; }
        /// <summary> Response status text if intercepted at response stage. </summary>
        public string ResponseStatusText { get; set; }
        /// <summary> Response headers if intercepted at the response stage. </summary>
        public IList<TypeHeaderEntry> ResponseHeaders { get; }
        /// <summary>
        /// If the intercepted request had a corresponding Network.requestWillBeSent event fired for it,
        /// then this networkId will be the same as the requestId present in the requestWillBeSent event.
        /// </summary>
        public string NetworkId { get; set; }
        /// <summary>
        /// If the request is due to a redirect response from the server, the id of the request that
        /// has caused the redirect.
        /// </summary>
        public string RedirectedRequestId { get; set; }
    }
}
