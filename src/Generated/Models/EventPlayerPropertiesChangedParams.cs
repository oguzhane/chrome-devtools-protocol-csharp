// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// This can be called multiple times, and can be used to set / override /
    /// remove player properties. A null propValue indicates removal.
    /// </summary>
    public partial class EventPlayerPropertiesChangedParams
    {
        /// <summary> Initializes a new instance of EventPlayerPropertiesChangedParams. </summary>
        /// <param name="playerId"> Players will get an ID that is unique within the agent context. </param>
        /// <param name="properties"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="playerId"/> or <paramref name="properties"/> is null. </exception>
        public EventPlayerPropertiesChangedParams(string playerId, IEnumerable<TypePlayerProperty> properties)
        {
            Argument.AssertNotNull(playerId, nameof(playerId));
            Argument.AssertNotNull(properties, nameof(properties));

            PlayerId = playerId;
            Properties = properties.ToList();
        }

        /// <summary> Initializes a new instance of EventPlayerPropertiesChangedParams. </summary>
        /// <param name="playerId"> Players will get an ID that is unique within the agent context. </param>
        /// <param name="properties"></param>
        internal EventPlayerPropertiesChangedParams(string playerId, IList<TypePlayerProperty> properties)
        {
            PlayerId = playerId;
            Properties = properties;
        }

        /// <summary> Players will get an ID that is unique within the agent context. </summary>
        public string PlayerId { get; set; }
        /// <summary> Gets the properties. </summary>
        public IList<TypePlayerProperty> Properties { get; }
    }
}
