// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeFontFaceConverter))]
    public partial class TypeFontFace : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("fontFamily"u8);
            writer.WriteStringValue(FontFamily);
            writer.WritePropertyName("fontStyle"u8);
            writer.WriteStringValue(FontStyle);
            writer.WritePropertyName("fontVariant"u8);
            writer.WriteStringValue(FontVariant);
            writer.WritePropertyName("fontWeight"u8);
            writer.WriteStringValue(FontWeight);
            writer.WritePropertyName("fontStretch"u8);
            writer.WriteStringValue(FontStretch);
            writer.WritePropertyName("fontDisplay"u8);
            writer.WriteStringValue(FontDisplay);
            writer.WritePropertyName("unicodeRange"u8);
            writer.WriteStringValue(UnicodeRange);
            writer.WritePropertyName("src"u8);
            writer.WriteStringValue(Src);
            writer.WritePropertyName("platformFontFamily"u8);
            writer.WriteStringValue(PlatformFontFamily);
            if (Optional.IsCollectionDefined(FontVariationAxes))
            {
                writer.WritePropertyName("fontVariationAxes"u8);
                writer.WriteStartArray();
                foreach (var item in FontVariationAxes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static TypeFontFace DeserializeTypeFontFace(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string fontFamily = default;
            string fontStyle = default;
            string fontVariant = default;
            string fontWeight = default;
            string fontStretch = default;
            string fontDisplay = default;
            string unicodeRange = default;
            string src = default;
            string platformFontFamily = default;
            Optional<IList<TypeFontVariationAxis>> fontVariationAxes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("fontFamily"u8))
                {
                    fontFamily = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fontStyle"u8))
                {
                    fontStyle = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fontVariant"u8))
                {
                    fontVariant = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fontWeight"u8))
                {
                    fontWeight = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fontStretch"u8))
                {
                    fontStretch = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fontDisplay"u8))
                {
                    fontDisplay = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unicodeRange"u8))
                {
                    unicodeRange = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("src"u8))
                {
                    src = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("platformFontFamily"u8))
                {
                    platformFontFamily = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fontVariationAxes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypeFontVariationAxis> array = new List<TypeFontVariationAxis>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeFontVariationAxis.DeserializeTypeFontVariationAxis(item));
                    }
                    fontVariationAxes = array;
                    continue;
                }
            }
            return new TypeFontFace(fontFamily, fontStyle, fontVariant, fontWeight, fontStretch, fontDisplay, unicodeRange, src, platformFontFamily, Optional.ToList(fontVariationAxes));
        }

        internal partial class TypeFontFaceConverter : JsonConverter<TypeFontFace>
        {
            public override void Write(Utf8JsonWriter writer, TypeFontFace model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeFontFace Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeFontFace(document.RootElement);
            }
        }
    }
}
