// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeAxRelatedNodeConverter))]
    public partial class TypeAxRelatedNode : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("backendDOMNodeId"u8);
            writer.WriteNumberValue(BackendDOMNodeId);
            if (Optional.IsDefined(Idref))
            {
                writer.WritePropertyName("idref"u8);
                writer.WriteStringValue(Idref);
            }
            if (Optional.IsDefined(Text))
            {
                writer.WritePropertyName("text"u8);
                writer.WriteStringValue(Text);
            }
            writer.WriteEndObject();
        }

        internal static TypeAxRelatedNode DeserializeTypeAxRelatedNode(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int backendDOMNodeId = default;
            Optional<string> idref = default;
            Optional<string> text = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("backendDOMNodeId"u8))
                {
                    backendDOMNodeId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("idref"u8))
                {
                    idref = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("text"u8))
                {
                    text = property.Value.GetString();
                    continue;
                }
            }
            return new TypeAxRelatedNode(backendDOMNodeId, idref.Value, text.Value);
        }

        internal partial class TypeAxRelatedNodeConverter : JsonConverter<TypeAxRelatedNode>
        {
            public override void Write(Utf8JsonWriter writer, TypeAxRelatedNode model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeAxRelatedNode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeAxRelatedNode(document.RootElement);
            }
        }
    }
}
