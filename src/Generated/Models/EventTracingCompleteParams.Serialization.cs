// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventTracingCompleteParamsConverter))]
    public partial class EventTracingCompleteParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("dataLossOccurred"u8);
            writer.WriteBooleanValue(DataLossOccurred);
            if (Optional.IsDefined(Stream))
            {
                writer.WritePropertyName("stream"u8);
                writer.WriteStringValue(Stream);
            }
            if (Optional.IsDefined(TraceFormat))
            {
                writer.WritePropertyName("traceFormat"u8);
                writer.WriteStringValue(TraceFormat);
            }
            if (Optional.IsDefined(StreamCompression))
            {
                writer.WritePropertyName("streamCompression"u8);
                writer.WriteStringValue(StreamCompression);
            }
            writer.WriteEndObject();
        }

        internal static EventTracingCompleteParams DeserializeEventTracingCompleteParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            bool dataLossOccurred = default;
            Optional<string> stream = default;
            Optional<string> traceFormat = default;
            Optional<string> streamCompression = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dataLossOccurred"u8))
                {
                    dataLossOccurred = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("stream"u8))
                {
                    stream = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("traceFormat"u8))
                {
                    traceFormat = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("streamCompression"u8))
                {
                    streamCompression = property.Value.GetString();
                    continue;
                }
            }
            return new EventTracingCompleteParams(dataLossOccurred, stream.Value, traceFormat.Value, streamCompression.Value);
        }

        internal partial class EventTracingCompleteParamsConverter : JsonConverter<EventTracingCompleteParams>
        {
            public override void Write(Utf8JsonWriter writer, EventTracingCompleteParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventTracingCompleteParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventTracingCompleteParams(document.RootElement);
            }
        }
    }
}
