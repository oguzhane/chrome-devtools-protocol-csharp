// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeSecurityDetailsConverter))]
    public partial class TypeSecurityDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("protocol"u8);
            writer.WriteStringValue(Protocol);
            writer.WritePropertyName("keyExchange"u8);
            writer.WriteStringValue(KeyExchange);
            if (Optional.IsDefined(KeyExchangeGroup))
            {
                writer.WritePropertyName("keyExchangeGroup"u8);
                writer.WriteStringValue(KeyExchangeGroup);
            }
            writer.WritePropertyName("cipher"u8);
            writer.WriteStringValue(Cipher);
            if (Optional.IsDefined(Mac))
            {
                writer.WritePropertyName("mac"u8);
                writer.WriteStringValue(Mac);
            }
            writer.WritePropertyName("certificateId"u8);
            writer.WriteNumberValue(CertificateId);
            writer.WritePropertyName("subjectName"u8);
            writer.WriteStringValue(SubjectName);
            writer.WritePropertyName("sanList"u8);
            writer.WriteStartArray();
            foreach (var item in SanList)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("issuer"u8);
            writer.WriteStringValue(Issuer);
            writer.WritePropertyName("validFrom"u8);
            writer.WriteNumberValue(ValidFrom);
            writer.WritePropertyName("validTo"u8);
            writer.WriteNumberValue(ValidTo);
            writer.WritePropertyName("signedCertificateTimestampList"u8);
            writer.WriteStartArray();
            foreach (var item in SignedCertificateTimestampList)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("certificateTransparencyCompliance"u8);
            writer.WriteStringValue(CertificateTransparencyCompliance);
            if (Optional.IsDefined(ServerSignatureAlgorithm))
            {
                writer.WritePropertyName("serverSignatureAlgorithm"u8);
                writer.WriteNumberValue(ServerSignatureAlgorithm.Value);
            }
            writer.WritePropertyName("encryptedClientHello"u8);
            writer.WriteBooleanValue(EncryptedClientHello);
            writer.WriteEndObject();
        }

        internal static TypeSecurityDetails DeserializeTypeSecurityDetails(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string protocol = default;
            string keyExchange = default;
            Optional<string> keyExchangeGroup = default;
            string cipher = default;
            Optional<string> mac = default;
            int certificateId = default;
            string subjectName = default;
            IList<string> sanList = default;
            string issuer = default;
            float validFrom = default;
            float validTo = default;
            IList<TypeSignedCertificateTimestamp> signedCertificateTimestampList = default;
            string certificateTransparencyCompliance = default;
            Optional<int> serverSignatureAlgorithm = default;
            bool encryptedClientHello = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("protocol"u8))
                {
                    protocol = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyExchange"u8))
                {
                    keyExchange = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyExchangeGroup"u8))
                {
                    keyExchangeGroup = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cipher"u8))
                {
                    cipher = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mac"u8))
                {
                    mac = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("certificateId"u8))
                {
                    certificateId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("subjectName"u8))
                {
                    subjectName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sanList"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    sanList = array;
                    continue;
                }
                if (property.NameEquals("issuer"u8))
                {
                    issuer = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("validFrom"u8))
                {
                    validFrom = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("validTo"u8))
                {
                    validTo = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("signedCertificateTimestampList"u8))
                {
                    List<TypeSignedCertificateTimestamp> array = new List<TypeSignedCertificateTimestamp>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeSignedCertificateTimestamp.DeserializeTypeSignedCertificateTimestamp(item));
                    }
                    signedCertificateTimestampList = array;
                    continue;
                }
                if (property.NameEquals("certificateTransparencyCompliance"u8))
                {
                    certificateTransparencyCompliance = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serverSignatureAlgorithm"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    serverSignatureAlgorithm = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("encryptedClientHello"u8))
                {
                    encryptedClientHello = property.Value.GetBoolean();
                    continue;
                }
            }
            return new TypeSecurityDetails(protocol, keyExchange, keyExchangeGroup.Value, cipher, mac.Value, certificateId, subjectName, sanList, issuer, validFrom, validTo, signedCertificateTimestampList, certificateTransparencyCompliance, Optional.ToNullable(serverSignatureAlgorithm), encryptedClientHello);
        }

        internal partial class TypeSecurityDetailsConverter : JsonConverter<TypeSecurityDetails>
        {
            public override void Write(Utf8JsonWriter writer, TypeSecurityDetails model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeSecurityDetails Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeSecurityDetails(document.RootElement);
            }
        }
    }
}
