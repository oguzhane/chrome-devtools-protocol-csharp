// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeSharedStorageAccessParamsConverter))]
    public partial class TypeSharedStorageAccessParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ScriptSourceUrl))
            {
                writer.WritePropertyName("scriptSourceUrl"u8);
                writer.WriteStringValue(ScriptSourceUrl);
            }
            if (Optional.IsDefined(OperationName))
            {
                writer.WritePropertyName("operationName"u8);
                writer.WriteStringValue(OperationName);
            }
            if (Optional.IsDefined(SerializedData))
            {
                writer.WritePropertyName("serializedData"u8);
                writer.WriteStringValue(SerializedData);
            }
            if (Optional.IsCollectionDefined(UrlsWithMetadata))
            {
                writer.WritePropertyName("urlsWithMetadata"u8);
                writer.WriteStartArray();
                foreach (var item in UrlsWithMetadata)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Key))
            {
                writer.WritePropertyName("key"u8);
                writer.WriteStringValue(Key);
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value"u8);
                writer.WriteStringValue(Value);
            }
            if (Optional.IsDefined(IgnoreIfPresent))
            {
                writer.WritePropertyName("ignoreIfPresent"u8);
                writer.WriteBooleanValue(IgnoreIfPresent.Value);
            }
            writer.WriteEndObject();
        }

        internal static TypeSharedStorageAccessParams DeserializeTypeSharedStorageAccessParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> scriptSourceUrl = default;
            Optional<string> operationName = default;
            Optional<string> serializedData = default;
            Optional<IList<TypeSharedStorageUrlWithMetadata>> urlsWithMetadata = default;
            Optional<string> key = default;
            Optional<string> value = default;
            Optional<bool> ignoreIfPresent = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("scriptSourceUrl"u8))
                {
                    scriptSourceUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operationName"u8))
                {
                    operationName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serializedData"u8))
                {
                    serializedData = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("urlsWithMetadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypeSharedStorageUrlWithMetadata> array = new List<TypeSharedStorageUrlWithMetadata>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeSharedStorageUrlWithMetadata.DeserializeTypeSharedStorageUrlWithMetadata(item));
                    }
                    urlsWithMetadata = array;
                    continue;
                }
                if (property.NameEquals("key"u8))
                {
                    key = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    value = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ignoreIfPresent"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ignoreIfPresent = property.Value.GetBoolean();
                    continue;
                }
            }
            return new TypeSharedStorageAccessParams(scriptSourceUrl.Value, operationName.Value, serializedData.Value, Optional.ToList(urlsWithMetadata), key.Value, value.Value, Optional.ToNullable(ignoreIfPresent));
        }

        internal partial class TypeSharedStorageAccessParamsConverter : JsonConverter<TypeSharedStorageAccessParams>
        {
            public override void Write(Utf8JsonWriter writer, TypeSharedStorageAccessParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeSharedStorageAccessParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeSharedStorageAccessParams(document.RootElement);
            }
        }
    }
}
