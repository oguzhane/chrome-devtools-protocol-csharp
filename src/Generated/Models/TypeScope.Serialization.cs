// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeScopeConverter))]
    public partial class TypeScope : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            writer.WritePropertyName("object"u8);
            writer.WriteObjectValue(Object);
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(StartLocation))
            {
                writer.WritePropertyName("startLocation"u8);
                writer.WriteObjectValue(StartLocation);
            }
            if (Optional.IsDefined(EndLocation))
            {
                writer.WritePropertyName("endLocation"u8);
                writer.WriteObjectValue(EndLocation);
            }
            writer.WriteEndObject();
        }

        internal static TypeScope DeserializeTypeScope(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string type = default;
            TypeRemoteObject @object = default;
            Optional<string> name = default;
            Optional<TypeLocation> startLocation = default;
            Optional<TypeLocation> endLocation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("object"u8))
                {
                    @object = TypeRemoteObject.DeserializeTypeRemoteObject(property.Value);
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("startLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startLocation = TypeLocation.DeserializeTypeLocation(property.Value);
                    continue;
                }
                if (property.NameEquals("endLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    endLocation = TypeLocation.DeserializeTypeLocation(property.Value);
                    continue;
                }
            }
            return new TypeScope(type, @object, name.Value, startLocation.Value, endLocation.Value);
        }

        internal partial class TypeScopeConverter : JsonConverter<TypeScope>
        {
            public override void Write(Utf8JsonWriter writer, TypeScope model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeScope Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeScope(document.RootElement);
            }
        }
    }
}
