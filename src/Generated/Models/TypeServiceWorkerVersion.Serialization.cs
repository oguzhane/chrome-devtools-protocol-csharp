// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeServiceWorkerVersionConverter))]
    public partial class TypeServiceWorkerVersion : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("versionId"u8);
            writer.WriteStringValue(VersionId);
            writer.WritePropertyName("registrationId"u8);
            writer.WriteStringValue(RegistrationId);
            writer.WritePropertyName("scriptURL"u8);
            writer.WriteStringValue(ScriptURL);
            writer.WritePropertyName("runningStatus"u8);
            writer.WriteStringValue(RunningStatus);
            writer.WritePropertyName("status"u8);
            writer.WriteStringValue(Status);
            if (Optional.IsDefined(ScriptLastModified))
            {
                writer.WritePropertyName("scriptLastModified"u8);
                writer.WriteNumberValue(ScriptLastModified.Value);
            }
            if (Optional.IsDefined(ScriptResponseTime))
            {
                writer.WritePropertyName("scriptResponseTime"u8);
                writer.WriteNumberValue(ScriptResponseTime.Value);
            }
            if (Optional.IsCollectionDefined(ControlledClients))
            {
                writer.WritePropertyName("controlledClients"u8);
                writer.WriteStartArray();
                foreach (var item in ControlledClients)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(TargetId))
            {
                writer.WritePropertyName("targetId"u8);
                writer.WriteStringValue(TargetId);
            }
            writer.WriteEndObject();
        }

        internal static TypeServiceWorkerVersion DeserializeTypeServiceWorkerVersion(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string versionId = default;
            string registrationId = default;
            string scriptURL = default;
            string runningStatus = default;
            string status = default;
            Optional<float> scriptLastModified = default;
            Optional<float> scriptResponseTime = default;
            Optional<IList<string>> controlledClients = default;
            Optional<string> targetId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("versionId"u8))
                {
                    versionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("registrationId"u8))
                {
                    registrationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scriptURL"u8))
                {
                    scriptURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("runningStatus"u8))
                {
                    runningStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scriptLastModified"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    scriptLastModified = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("scriptResponseTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    scriptResponseTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("controlledClients"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    controlledClients = array;
                    continue;
                }
                if (property.NameEquals("targetId"u8))
                {
                    targetId = property.Value.GetString();
                    continue;
                }
            }
            return new TypeServiceWorkerVersion(versionId, registrationId, scriptURL, runningStatus, status, Optional.ToNullable(scriptLastModified), Optional.ToNullable(scriptResponseTime), Optional.ToList(controlledClients), targetId.Value);
        }

        internal partial class TypeServiceWorkerVersionConverter : JsonConverter<TypeServiceWorkerVersion>
        {
            public override void Write(Utf8JsonWriter writer, TypeServiceWorkerVersion model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeServiceWorkerVersion Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeServiceWorkerVersion(document.RootElement);
            }
        }
    }
}
