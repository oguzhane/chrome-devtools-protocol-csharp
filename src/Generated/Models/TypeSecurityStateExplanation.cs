// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> An explanation of an factor contributing to the security state. </summary>
    public partial class TypeSecurityStateExplanation
    {
        /// <summary> Initializes a new instance of TypeSecurityStateExplanation. </summary>
        /// <param name="securityState"> Security state representing the severity of the factor being explained. </param>
        /// <param name="title"> Title describing the type of factor. </param>
        /// <param name="summary"> Short phrase describing the type of factor. </param>
        /// <param name="description"> Full text explanation of the factor. </param>
        /// <param name="mixedContentType"> The type of mixed content described by the explanation. </param>
        /// <param name="certificate"> Page certificate. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="securityState"/>, <paramref name="title"/>, <paramref name="summary"/>, <paramref name="description"/>, <paramref name="mixedContentType"/> or <paramref name="certificate"/> is null. </exception>
        public TypeSecurityStateExplanation(string securityState, string title, string summary, string description, string mixedContentType, IEnumerable<string> certificate)
        {
            Argument.AssertNotNull(securityState, nameof(securityState));
            Argument.AssertNotNull(title, nameof(title));
            Argument.AssertNotNull(summary, nameof(summary));
            Argument.AssertNotNull(description, nameof(description));
            Argument.AssertNotNull(mixedContentType, nameof(mixedContentType));
            Argument.AssertNotNull(certificate, nameof(certificate));

            SecurityState = securityState;
            Title = title;
            Summary = summary;
            Description = description;
            MixedContentType = mixedContentType;
            Certificate = certificate.ToList();
            Recommendations = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of TypeSecurityStateExplanation. </summary>
        /// <param name="securityState"> Security state representing the severity of the factor being explained. </param>
        /// <param name="title"> Title describing the type of factor. </param>
        /// <param name="summary"> Short phrase describing the type of factor. </param>
        /// <param name="description"> Full text explanation of the factor. </param>
        /// <param name="mixedContentType"> The type of mixed content described by the explanation. </param>
        /// <param name="certificate"> Page certificate. </param>
        /// <param name="recommendations"> Recommendations to fix any issues. </param>
        internal TypeSecurityStateExplanation(string securityState, string title, string summary, string description, string mixedContentType, IList<string> certificate, IList<string> recommendations)
        {
            SecurityState = securityState;
            Title = title;
            Summary = summary;
            Description = description;
            MixedContentType = mixedContentType;
            Certificate = certificate;
            Recommendations = recommendations;
        }

        /// <summary> Security state representing the severity of the factor being explained. </summary>
        public string SecurityState { get; set; }
        /// <summary> Title describing the type of factor. </summary>
        public string Title { get; set; }
        /// <summary> Short phrase describing the type of factor. </summary>
        public string Summary { get; set; }
        /// <summary> Full text explanation of the factor. </summary>
        public string Description { get; set; }
        /// <summary> The type of mixed content described by the explanation. </summary>
        public string MixedContentType { get; set; }
        /// <summary> Page certificate. </summary>
        public IList<string> Certificate { get; }
        /// <summary> Recommendations to fix any issues. </summary>
        public IList<string> Recommendations { get; }
    }
}
