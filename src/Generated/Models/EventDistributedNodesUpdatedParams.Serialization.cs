// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventDistributedNodesUpdatedParamsConverter))]
    public partial class EventDistributedNodesUpdatedParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("insertionPointId"u8);
            writer.WriteNumberValue(InsertionPointId);
            writer.WritePropertyName("distributedNodes"u8);
            writer.WriteStartArray();
            foreach (var item in DistributedNodes)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static EventDistributedNodesUpdatedParams DeserializeEventDistributedNodesUpdatedParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int insertionPointId = default;
            IList<TypeBackendNode> distributedNodes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("insertionPointId"u8))
                {
                    insertionPointId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("distributedNodes"u8))
                {
                    List<TypeBackendNode> array = new List<TypeBackendNode>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeBackendNode.DeserializeTypeBackendNode(item));
                    }
                    distributedNodes = array;
                    continue;
                }
            }
            return new EventDistributedNodesUpdatedParams(insertionPointId, distributedNodes);
        }

        internal partial class EventDistributedNodesUpdatedParamsConverter : JsonConverter<EventDistributedNodesUpdatedParams>
        {
            public override void Write(Utf8JsonWriter writer, EventDistributedNodesUpdatedParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventDistributedNodesUpdatedParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventDistributedNodesUpdatedParams(document.RootElement);
            }
        }
    }
}
