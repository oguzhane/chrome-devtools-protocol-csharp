// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeResourceTimingConverter))]
    public partial class TypeResourceTiming : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("requestTime"u8);
            writer.WriteNumberValue(RequestTime);
            writer.WritePropertyName("proxyStart"u8);
            writer.WriteNumberValue(ProxyStart);
            writer.WritePropertyName("proxyEnd"u8);
            writer.WriteNumberValue(ProxyEnd);
            writer.WritePropertyName("dnsStart"u8);
            writer.WriteNumberValue(DnsStart);
            writer.WritePropertyName("dnsEnd"u8);
            writer.WriteNumberValue(DnsEnd);
            writer.WritePropertyName("connectStart"u8);
            writer.WriteNumberValue(ConnectStart);
            writer.WritePropertyName("connectEnd"u8);
            writer.WriteNumberValue(ConnectEnd);
            writer.WritePropertyName("sslStart"u8);
            writer.WriteNumberValue(SslStart);
            writer.WritePropertyName("sslEnd"u8);
            writer.WriteNumberValue(SslEnd);
            writer.WritePropertyName("workerStart"u8);
            writer.WriteNumberValue(WorkerStart);
            writer.WritePropertyName("workerReady"u8);
            writer.WriteNumberValue(WorkerReady);
            writer.WritePropertyName("workerFetchStart"u8);
            writer.WriteNumberValue(WorkerFetchStart);
            writer.WritePropertyName("workerRespondWithSettled"u8);
            writer.WriteNumberValue(WorkerRespondWithSettled);
            writer.WritePropertyName("sendStart"u8);
            writer.WriteNumberValue(SendStart);
            writer.WritePropertyName("sendEnd"u8);
            writer.WriteNumberValue(SendEnd);
            writer.WritePropertyName("pushStart"u8);
            writer.WriteNumberValue(PushStart);
            writer.WritePropertyName("pushEnd"u8);
            writer.WriteNumberValue(PushEnd);
            writer.WritePropertyName("receiveHeadersEnd"u8);
            writer.WriteNumberValue(ReceiveHeadersEnd);
            writer.WriteEndObject();
        }

        internal static TypeResourceTiming DeserializeTypeResourceTiming(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            float requestTime = default;
            float proxyStart = default;
            float proxyEnd = default;
            float dnsStart = default;
            float dnsEnd = default;
            float connectStart = default;
            float connectEnd = default;
            float sslStart = default;
            float sslEnd = default;
            float workerStart = default;
            float workerReady = default;
            float workerFetchStart = default;
            float workerRespondWithSettled = default;
            float sendStart = default;
            float sendEnd = default;
            float pushStart = default;
            float pushEnd = default;
            float receiveHeadersEnd = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requestTime"u8))
                {
                    requestTime = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("proxyStart"u8))
                {
                    proxyStart = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("proxyEnd"u8))
                {
                    proxyEnd = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("dnsStart"u8))
                {
                    dnsStart = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("dnsEnd"u8))
                {
                    dnsEnd = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("connectStart"u8))
                {
                    connectStart = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("connectEnd"u8))
                {
                    connectEnd = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("sslStart"u8))
                {
                    sslStart = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("sslEnd"u8))
                {
                    sslEnd = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("workerStart"u8))
                {
                    workerStart = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("workerReady"u8))
                {
                    workerReady = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("workerFetchStart"u8))
                {
                    workerFetchStart = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("workerRespondWithSettled"u8))
                {
                    workerRespondWithSettled = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("sendStart"u8))
                {
                    sendStart = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("sendEnd"u8))
                {
                    sendEnd = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("pushStart"u8))
                {
                    pushStart = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("pushEnd"u8))
                {
                    pushEnd = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("receiveHeadersEnd"u8))
                {
                    receiveHeadersEnd = property.Value.GetSingle();
                    continue;
                }
            }
            return new TypeResourceTiming(requestTime, proxyStart, proxyEnd, dnsStart, dnsEnd, connectStart, connectEnd, sslStart, sslEnd, workerStart, workerReady, workerFetchStart, workerRespondWithSettled, sendStart, sendEnd, pushStart, pushEnd, receiveHeadersEnd);
        }

        internal partial class TypeResourceTimingConverter : JsonConverter<TypeResourceTiming>
        {
            public override void Write(Utf8JsonWriter writer, TypeResourceTiming model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeResourceTiming Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeResourceTiming(document.RootElement);
            }
        }
    }
}
