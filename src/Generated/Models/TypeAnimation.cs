// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> Animation instance. </summary>
    public partial class TypeAnimation
    {
        /// <summary> Initializes a new instance of TypeAnimation. </summary>
        /// <param name="id"> `Animation`&apos;s id. </param>
        /// <param name="name"> `Animation`&apos;s name. </param>
        /// <param name="pausedState"> `Animation`&apos;s internal paused state. </param>
        /// <param name="playState"> `Animation`&apos;s play state. </param>
        /// <param name="playbackRate"> `Animation`&apos;s playback rate. </param>
        /// <param name="startTime"> `Animation`&apos;s start time. </param>
        /// <param name="currentTime"> `Animation`&apos;s current time. </param>
        /// <param name="type"> Animation type of `Animation`. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="name"/>, <paramref name="playState"/> or <paramref name="type"/> is null. </exception>
        public TypeAnimation(string id, string name, bool pausedState, string playState, float playbackRate, float startTime, float currentTime, string type)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(playState, nameof(playState));
            Argument.AssertNotNull(type, nameof(type));

            Id = id;
            Name = name;
            PausedState = pausedState;
            PlayState = playState;
            PlaybackRate = playbackRate;
            StartTime = startTime;
            CurrentTime = currentTime;
            Type = type;
        }

        /// <summary> Initializes a new instance of TypeAnimation. </summary>
        /// <param name="id"> `Animation`&apos;s id. </param>
        /// <param name="name"> `Animation`&apos;s name. </param>
        /// <param name="pausedState"> `Animation`&apos;s internal paused state. </param>
        /// <param name="playState"> `Animation`&apos;s play state. </param>
        /// <param name="playbackRate"> `Animation`&apos;s playback rate. </param>
        /// <param name="startTime"> `Animation`&apos;s start time. </param>
        /// <param name="currentTime"> `Animation`&apos;s current time. </param>
        /// <param name="type"> Animation type of `Animation`. </param>
        /// <param name="source"> `Animation`&apos;s source animation node. </param>
        /// <param name="cssId">
        /// A unique ID for `Animation` representing the sources that triggered this CSS
        /// animation/transition.
        /// </param>
        internal TypeAnimation(string id, string name, bool pausedState, string playState, float playbackRate, float startTime, float currentTime, string type, TypeAnimationEffect source, string cssId)
        {
            Id = id;
            Name = name;
            PausedState = pausedState;
            PlayState = playState;
            PlaybackRate = playbackRate;
            StartTime = startTime;
            CurrentTime = currentTime;
            Type = type;
            Source = source;
            CssId = cssId;
        }

        /// <summary> `Animation`&apos;s id. </summary>
        public string Id { get; set; }
        /// <summary> `Animation`&apos;s name. </summary>
        public string Name { get; set; }
        /// <summary> `Animation`&apos;s internal paused state. </summary>
        public bool PausedState { get; set; }
        /// <summary> `Animation`&apos;s play state. </summary>
        public string PlayState { get; set; }
        /// <summary> `Animation`&apos;s playback rate. </summary>
        public float PlaybackRate { get; set; }
        /// <summary> `Animation`&apos;s start time. </summary>
        public float StartTime { get; set; }
        /// <summary> `Animation`&apos;s current time. </summary>
        public float CurrentTime { get; set; }
        /// <summary> Animation type of `Animation`. </summary>
        public string Type { get; set; }
        /// <summary> `Animation`&apos;s source animation node. </summary>
        public TypeAnimationEffect Source { get; set; }
        /// <summary>
        /// A unique ID for `Animation` representing the sources that triggered this CSS
        /// animation/transition.
        /// </summary>
        public string CssId { get; set; }
    }
}
