// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeConsoleMessageConverter))]
    public partial class TypeConsoleMessage : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("source"u8);
            writer.WriteStringValue(Source);
            writer.WritePropertyName("level"u8);
            writer.WriteStringValue(Level);
            writer.WritePropertyName("text"u8);
            writer.WriteStringValue(Text);
            if (Optional.IsDefined(Url))
            {
                writer.WritePropertyName("url"u8);
                writer.WriteStringValue(Url);
            }
            if (Optional.IsDefined(Line))
            {
                writer.WritePropertyName("line"u8);
                writer.WriteNumberValue(Line.Value);
            }
            if (Optional.IsDefined(Column))
            {
                writer.WritePropertyName("column"u8);
                writer.WriteNumberValue(Column.Value);
            }
            writer.WriteEndObject();
        }

        internal static TypeConsoleMessage DeserializeTypeConsoleMessage(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string source = default;
            string level = default;
            string text = default;
            Optional<string> url = default;
            Optional<int> line = default;
            Optional<int> column = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("source"u8))
                {
                    source = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("level"u8))
                {
                    level = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("text"u8))
                {
                    text = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("line"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    line = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("column"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    column = property.Value.GetInt32();
                    continue;
                }
            }
            return new TypeConsoleMessage(source, level, text, url.Value, Optional.ToNullable(line), Optional.ToNullable(column));
        }

        internal partial class TypeConsoleMessageConverter : JsonConverter<TypeConsoleMessage>
        {
            public override void Write(Utf8JsonWriter writer, TypeConsoleMessage model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeConsoleMessage Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeConsoleMessage(document.RootElement);
            }
        }
    }
}
