// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeCredentialConverter))]
    public partial class TypeCredential : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("credentialId"u8);
            writer.WriteStringValue(CredentialId);
            writer.WritePropertyName("isResidentCredential"u8);
            writer.WriteBooleanValue(IsResidentCredential);
            if (Optional.IsDefined(RpId))
            {
                writer.WritePropertyName("rpId"u8);
                writer.WriteStringValue(RpId);
            }
            writer.WritePropertyName("privateKey"u8);
            writer.WriteStringValue(PrivateKey);
            if (Optional.IsDefined(UserHandle))
            {
                writer.WritePropertyName("userHandle"u8);
                writer.WriteStringValue(UserHandle);
            }
            writer.WritePropertyName("signCount"u8);
            writer.WriteNumberValue(SignCount);
            if (Optional.IsDefined(LargeBlob))
            {
                writer.WritePropertyName("largeBlob"u8);
                writer.WriteStringValue(LargeBlob);
            }
            writer.WriteEndObject();
        }

        internal static TypeCredential DeserializeTypeCredential(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string credentialId = default;
            bool isResidentCredential = default;
            Optional<string> rpId = default;
            string privateKey = default;
            Optional<string> userHandle = default;
            int signCount = default;
            Optional<string> largeBlob = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("credentialId"u8))
                {
                    credentialId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isResidentCredential"u8))
                {
                    isResidentCredential = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("rpId"u8))
                {
                    rpId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateKey"u8))
                {
                    privateKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("userHandle"u8))
                {
                    userHandle = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("signCount"u8))
                {
                    signCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("largeBlob"u8))
                {
                    largeBlob = property.Value.GetString();
                    continue;
                }
            }
            return new TypeCredential(credentialId, isResidentCredential, rpId.Value, privateKey, userHandle.Value, signCount, largeBlob.Value);
        }

        internal partial class TypeCredentialConverter : JsonConverter<TypeCredential>
        {
            public override void Write(Utf8JsonWriter writer, TypeCredential model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeCredential Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeCredential(document.RootElement);
            }
        }
    }
}
