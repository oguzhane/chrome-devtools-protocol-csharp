// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> HTTP request data. </summary>
    public partial class TypeRequest
    {
        /// <summary> Initializes a new instance of TypeRequest. </summary>
        /// <param name="url"> Request URL (without fragment). </param>
        /// <param name="method"> HTTP request method. </param>
        /// <param name="headers"> HTTP request headers. </param>
        /// <param name="initialPriority"> Priority of the resource request at the time request is sent. </param>
        /// <param name="referrerPolicy"> The referrer policy of the request, as defined in https://www.w3.org/TR/referrer-policy/. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/>, <paramref name="method"/>, <paramref name="headers"/>, <paramref name="initialPriority"/> or <paramref name="referrerPolicy"/> is null. </exception>
        public TypeRequest(string url, string method, object headers, string initialPriority, string referrerPolicy)
        {
            Argument.AssertNotNull(url, nameof(url));
            Argument.AssertNotNull(method, nameof(method));
            Argument.AssertNotNull(headers, nameof(headers));
            Argument.AssertNotNull(initialPriority, nameof(initialPriority));
            Argument.AssertNotNull(referrerPolicy, nameof(referrerPolicy));

            Url = url;
            Method = method;
            Headers = headers;
            PostDataEntries = new ChangeTrackingList<TypePostDataEntry>();
            InitialPriority = initialPriority;
            ReferrerPolicy = referrerPolicy;
        }

        /// <summary> Initializes a new instance of TypeRequest. </summary>
        /// <param name="url"> Request URL (without fragment). </param>
        /// <param name="urlFragment"> Fragment of the requested URL starting with hash, if present. </param>
        /// <param name="method"> HTTP request method. </param>
        /// <param name="headers"> HTTP request headers. </param>
        /// <param name="postData"> HTTP POST request data. </param>
        /// <param name="hasPostData"> True when the request has POST data. Note that postData might still be omitted when this flag is true when the data is too long. </param>
        /// <param name="postDataEntries"> Request body elements. This will be converted from base64 to binary. </param>
        /// <param name="mixedContentType"> The mixed content type of the request. </param>
        /// <param name="initialPriority"> Priority of the resource request at the time request is sent. </param>
        /// <param name="referrerPolicy"> The referrer policy of the request, as defined in https://www.w3.org/TR/referrer-policy/. </param>
        /// <param name="isLinkPreload"> Whether is loaded via link preload. </param>
        /// <param name="trustTokenParams">
        /// Set for requests when the TrustToken API is used. Contains the parameters
        /// passed by the developer (e.g. via &quot;fetch&quot;) as understood by the backend.
        /// </param>
        /// <param name="isSameSite">
        /// True if this resource request is considered to be the &apos;same site&apos; as the
        /// request correspondinfg to the main frame.
        /// </param>
        internal TypeRequest(string url, string urlFragment, string method, object headers, string postData, bool? hasPostData, IList<TypePostDataEntry> postDataEntries, string mixedContentType, string initialPriority, string referrerPolicy, bool? isLinkPreload, TypeTrustTokenParams trustTokenParams, bool? isSameSite)
        {
            Url = url;
            UrlFragment = urlFragment;
            Method = method;
            Headers = headers;
            PostData = postData;
            HasPostData = hasPostData;
            PostDataEntries = postDataEntries;
            MixedContentType = mixedContentType;
            InitialPriority = initialPriority;
            ReferrerPolicy = referrerPolicy;
            IsLinkPreload = isLinkPreload;
            TrustTokenParams = trustTokenParams;
            IsSameSite = isSameSite;
        }

        /// <summary> Request URL (without fragment). </summary>
        public string Url { get; set; }
        /// <summary> Fragment of the requested URL starting with hash, if present. </summary>
        public string UrlFragment { get; set; }
        /// <summary> HTTP request method. </summary>
        public string Method { get; set; }
        /// <summary> HTTP request headers. </summary>
        public object Headers { get; set; }
        /// <summary> HTTP POST request data. </summary>
        public string PostData { get; set; }
        /// <summary> True when the request has POST data. Note that postData might still be omitted when this flag is true when the data is too long. </summary>
        public bool? HasPostData { get; set; }
        /// <summary> Request body elements. This will be converted from base64 to binary. </summary>
        public IList<TypePostDataEntry> PostDataEntries { get; }
        /// <summary> The mixed content type of the request. </summary>
        public string MixedContentType { get; set; }
        /// <summary> Priority of the resource request at the time request is sent. </summary>
        public string InitialPriority { get; set; }
        /// <summary> The referrer policy of the request, as defined in https://www.w3.org/TR/referrer-policy/. </summary>
        public string ReferrerPolicy { get; set; }
        /// <summary> Whether is loaded via link preload. </summary>
        public bool? IsLinkPreload { get; set; }
        /// <summary>
        /// Set for requests when the TrustToken API is used. Contains the parameters
        /// passed by the developer (e.g. via &quot;fetch&quot;) as understood by the backend.
        /// </summary>
        public TypeTrustTokenParams TrustTokenParams { get; set; }
        /// <summary>
        /// True if this resource request is considered to be the &apos;same site&apos; as the
        /// request correspondinfg to the main frame.
        /// </summary>
        public bool? IsSameSite { get; set; }
    }
}
