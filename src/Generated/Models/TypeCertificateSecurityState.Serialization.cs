// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeCertificateSecurityStateConverter))]
    public partial class TypeCertificateSecurityState : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("protocol"u8);
            writer.WriteStringValue(Protocol);
            writer.WritePropertyName("keyExchange"u8);
            writer.WriteStringValue(KeyExchange);
            if (Optional.IsDefined(KeyExchangeGroup))
            {
                writer.WritePropertyName("keyExchangeGroup"u8);
                writer.WriteStringValue(KeyExchangeGroup);
            }
            writer.WritePropertyName("cipher"u8);
            writer.WriteStringValue(Cipher);
            if (Optional.IsDefined(Mac))
            {
                writer.WritePropertyName("mac"u8);
                writer.WriteStringValue(Mac);
            }
            writer.WritePropertyName("certificate"u8);
            writer.WriteStartArray();
            foreach (var item in Certificate)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("subjectName"u8);
            writer.WriteStringValue(SubjectName);
            writer.WritePropertyName("issuer"u8);
            writer.WriteStringValue(Issuer);
            writer.WritePropertyName("validFrom"u8);
            writer.WriteNumberValue(ValidFrom);
            writer.WritePropertyName("validTo"u8);
            writer.WriteNumberValue(ValidTo);
            if (Optional.IsDefined(CertificateNetworkError))
            {
                writer.WritePropertyName("certificateNetworkError"u8);
                writer.WriteStringValue(CertificateNetworkError);
            }
            writer.WritePropertyName("certificateHasWeakSignature"u8);
            writer.WriteBooleanValue(CertificateHasWeakSignature);
            writer.WritePropertyName("certificateHasSha1Signature"u8);
            writer.WriteBooleanValue(CertificateHasSha1Signature);
            writer.WritePropertyName("modernSSL"u8);
            writer.WriteBooleanValue(ModernSSL);
            writer.WritePropertyName("obsoleteSslProtocol"u8);
            writer.WriteBooleanValue(ObsoleteSslProtocol);
            writer.WritePropertyName("obsoleteSslKeyExchange"u8);
            writer.WriteBooleanValue(ObsoleteSslKeyExchange);
            writer.WritePropertyName("obsoleteSslCipher"u8);
            writer.WriteBooleanValue(ObsoleteSslCipher);
            writer.WritePropertyName("obsoleteSslSignature"u8);
            writer.WriteBooleanValue(ObsoleteSslSignature);
            writer.WriteEndObject();
        }

        internal static TypeCertificateSecurityState DeserializeTypeCertificateSecurityState(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string protocol = default;
            string keyExchange = default;
            Optional<string> keyExchangeGroup = default;
            string cipher = default;
            Optional<string> mac = default;
            IList<string> certificate = default;
            string subjectName = default;
            string issuer = default;
            float validFrom = default;
            float validTo = default;
            Optional<string> certificateNetworkError = default;
            bool certificateHasWeakSignature = default;
            bool certificateHasSha1Signature = default;
            bool modernSSL = default;
            bool obsoleteSslProtocol = default;
            bool obsoleteSslKeyExchange = default;
            bool obsoleteSslCipher = default;
            bool obsoleteSslSignature = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("protocol"u8))
                {
                    protocol = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyExchange"u8))
                {
                    keyExchange = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyExchangeGroup"u8))
                {
                    keyExchangeGroup = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cipher"u8))
                {
                    cipher = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mac"u8))
                {
                    mac = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("certificate"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    certificate = array;
                    continue;
                }
                if (property.NameEquals("subjectName"u8))
                {
                    subjectName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("issuer"u8))
                {
                    issuer = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("validFrom"u8))
                {
                    validFrom = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("validTo"u8))
                {
                    validTo = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("certificateNetworkError"u8))
                {
                    certificateNetworkError = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("certificateHasWeakSignature"u8))
                {
                    certificateHasWeakSignature = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("certificateHasSha1Signature"u8))
                {
                    certificateHasSha1Signature = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("modernSSL"u8))
                {
                    modernSSL = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("obsoleteSslProtocol"u8))
                {
                    obsoleteSslProtocol = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("obsoleteSslKeyExchange"u8))
                {
                    obsoleteSslKeyExchange = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("obsoleteSslCipher"u8))
                {
                    obsoleteSslCipher = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("obsoleteSslSignature"u8))
                {
                    obsoleteSslSignature = property.Value.GetBoolean();
                    continue;
                }
            }
            return new TypeCertificateSecurityState(protocol, keyExchange, keyExchangeGroup.Value, cipher, mac.Value, certificate, subjectName, issuer, validFrom, validTo, certificateNetworkError.Value, certificateHasWeakSignature, certificateHasSha1Signature, modernSSL, obsoleteSslProtocol, obsoleteSslKeyExchange, obsoleteSslCipher, obsoleteSslSignature);
        }

        internal partial class TypeCertificateSecurityStateConverter : JsonConverter<TypeCertificateSecurityState>
        {
            public override void Write(Utf8JsonWriter writer, TypeCertificateSecurityState model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeCertificateSecurityState Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeCertificateSecurityState(document.RootElement);
            }
        }
    }
}
