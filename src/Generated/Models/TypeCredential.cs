// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> The TypeCredential. </summary>
    public partial class TypeCredential
    {
        /// <summary> Initializes a new instance of TypeCredential. </summary>
        /// <param name="credentialId"></param>
        /// <param name="isResidentCredential"></param>
        /// <param name="privateKey"> The ECDSA P-256 private key in PKCS#8 format. (Encoded as a base64 string when passed over JSON). </param>
        /// <param name="signCount">
        /// Signature counter. This is incremented by one for each successful
        /// assertion.
        /// See https://w3c.github.io/webauthn/#signature-counter
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credentialId"/> or <paramref name="privateKey"/> is null. </exception>
        public TypeCredential(string credentialId, bool isResidentCredential, string privateKey, int signCount)
        {
            Argument.AssertNotNull(credentialId, nameof(credentialId));
            Argument.AssertNotNull(privateKey, nameof(privateKey));

            CredentialId = credentialId;
            IsResidentCredential = isResidentCredential;
            PrivateKey = privateKey;
            SignCount = signCount;
        }

        /// <summary> Initializes a new instance of TypeCredential. </summary>
        /// <param name="credentialId"></param>
        /// <param name="isResidentCredential"></param>
        /// <param name="rpId">
        /// Relying Party ID the credential is scoped to. Must be set when adding a
        /// credential.
        /// </param>
        /// <param name="privateKey"> The ECDSA P-256 private key in PKCS#8 format. (Encoded as a base64 string when passed over JSON). </param>
        /// <param name="userHandle">
        /// An opaque byte sequence with a maximum size of 64 bytes mapping the
        /// credential to a specific user. (Encoded as a base64 string when passed over JSON)
        /// </param>
        /// <param name="signCount">
        /// Signature counter. This is incremented by one for each successful
        /// assertion.
        /// See https://w3c.github.io/webauthn/#signature-counter
        /// </param>
        /// <param name="largeBlob">
        /// The large blob associated with the credential.
        /// See https://w3c.github.io/webauthn/#sctn-large-blob-extension (Encoded as a base64 string when passed over JSON)
        /// </param>
        internal TypeCredential(string credentialId, bool isResidentCredential, string rpId, string privateKey, string userHandle, int signCount, string largeBlob)
        {
            CredentialId = credentialId;
            IsResidentCredential = isResidentCredential;
            RpId = rpId;
            PrivateKey = privateKey;
            UserHandle = userHandle;
            SignCount = signCount;
            LargeBlob = largeBlob;
        }

        /// <summary> Gets or sets the credential id. </summary>
        public string CredentialId { get; set; }
        /// <summary> Gets or sets the is resident credential. </summary>
        public bool IsResidentCredential { get; set; }
        /// <summary>
        /// Relying Party ID the credential is scoped to. Must be set when adding a
        /// credential.
        /// </summary>
        public string RpId { get; set; }
        /// <summary> The ECDSA P-256 private key in PKCS#8 format. (Encoded as a base64 string when passed over JSON). </summary>
        public string PrivateKey { get; set; }
        /// <summary>
        /// An opaque byte sequence with a maximum size of 64 bytes mapping the
        /// credential to a specific user. (Encoded as a base64 string when passed over JSON)
        /// </summary>
        public string UserHandle { get; set; }
        /// <summary>
        /// Signature counter. This is incremented by one for each successful
        /// assertion.
        /// See https://w3c.github.io/webauthn/#signature-counter
        /// </summary>
        public int SignCount { get; set; }
        /// <summary>
        /// The large blob associated with the credential.
        /// See https://w3c.github.io/webauthn/#sctn-large-blob-extension (Encoded as a base64 string when passed over JSON)
        /// </summary>
        public string LargeBlob { get; set; }
    }
}
