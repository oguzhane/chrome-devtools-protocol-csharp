// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeSignedExchangeSignatureConverter))]
    public partial class TypeSignedExchangeSignature : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("label"u8);
            writer.WriteStringValue(Label);
            writer.WritePropertyName("signature"u8);
            writer.WriteStringValue(Signature);
            writer.WritePropertyName("integrity"u8);
            writer.WriteStringValue(Integrity);
            if (Optional.IsDefined(CertUrl))
            {
                writer.WritePropertyName("certUrl"u8);
                writer.WriteStringValue(CertUrl);
            }
            if (Optional.IsDefined(CertSha256))
            {
                writer.WritePropertyName("certSha256"u8);
                writer.WriteStringValue(CertSha256);
            }
            writer.WritePropertyName("validityUrl"u8);
            writer.WriteStringValue(ValidityUrl);
            writer.WritePropertyName("date"u8);
            writer.WriteNumberValue(Date);
            writer.WritePropertyName("expires"u8);
            writer.WriteNumberValue(Expires);
            if (Optional.IsCollectionDefined(Certificates))
            {
                writer.WritePropertyName("certificates"u8);
                writer.WriteStartArray();
                foreach (var item in Certificates)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static TypeSignedExchangeSignature DeserializeTypeSignedExchangeSignature(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string label = default;
            string signature = default;
            string integrity = default;
            Optional<string> certUrl = default;
            Optional<string> certSha256 = default;
            string validityUrl = default;
            int date = default;
            int expires = default;
            Optional<IList<string>> certificates = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("label"u8))
                {
                    label = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("signature"u8))
                {
                    signature = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("integrity"u8))
                {
                    integrity = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("certUrl"u8))
                {
                    certUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("certSha256"u8))
                {
                    certSha256 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("validityUrl"u8))
                {
                    validityUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("date"u8))
                {
                    date = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("expires"u8))
                {
                    expires = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("certificates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    certificates = array;
                    continue;
                }
            }
            return new TypeSignedExchangeSignature(label, signature, integrity, certUrl.Value, certSha256.Value, validityUrl, date, expires, Optional.ToList(certificates));
        }

        internal partial class TypeSignedExchangeSignatureConverter : JsonConverter<TypeSignedExchangeSignature>
        {
            public override void Write(Utf8JsonWriter writer, TypeSignedExchangeSignature model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeSignedExchangeSignature Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeSignedExchangeSignature(document.RootElement);
            }
        }
    }
}
