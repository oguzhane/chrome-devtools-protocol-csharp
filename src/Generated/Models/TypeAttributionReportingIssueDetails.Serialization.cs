// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeAttributionReportingIssueDetailsConverter))]
    public partial class TypeAttributionReportingIssueDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("violationType"u8);
            writer.WriteStringValue(ViolationType);
            if (Optional.IsDefined(Request))
            {
                writer.WritePropertyName("request"u8);
                writer.WriteObjectValue(Request);
            }
            if (Optional.IsDefined(ViolatingNodeId))
            {
                writer.WritePropertyName("violatingNodeId"u8);
                writer.WriteNumberValue(ViolatingNodeId.Value);
            }
            if (Optional.IsDefined(InvalidParameter))
            {
                writer.WritePropertyName("invalidParameter"u8);
                writer.WriteStringValue(InvalidParameter);
            }
            writer.WriteEndObject();
        }

        internal static TypeAttributionReportingIssueDetails DeserializeTypeAttributionReportingIssueDetails(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string violationType = default;
            Optional<TypeAffectedRequest> request = default;
            Optional<int> violatingNodeId = default;
            Optional<string> invalidParameter = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("violationType"u8))
                {
                    violationType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("request"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    request = TypeAffectedRequest.DeserializeTypeAffectedRequest(property.Value);
                    continue;
                }
                if (property.NameEquals("violatingNodeId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    violatingNodeId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("invalidParameter"u8))
                {
                    invalidParameter = property.Value.GetString();
                    continue;
                }
            }
            return new TypeAttributionReportingIssueDetails(violationType, request.Value, Optional.ToNullable(violatingNodeId), invalidParameter.Value);
        }

        internal partial class TypeAttributionReportingIssueDetailsConverter : JsonConverter<TypeAttributionReportingIssueDetails>
        {
            public override void Write(Utf8JsonWriter writer, TypeAttributionReportingIssueDetails model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeAttributionReportingIssueDetails Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeAttributionReportingIssueDetails(document.RootElement);
            }
        }
    }
}
