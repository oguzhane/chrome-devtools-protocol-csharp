// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary> Profile node. Holds callsite information, execution statistics and child nodes. </summary>
    public partial class TypeProfileNode
    {
        /// <summary> Initializes a new instance of TypeProfileNode. </summary>
        /// <param name="id"> Unique id of the node. </param>
        /// <param name="callFrame"> Function location. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="callFrame"/> is null. </exception>
        public TypeProfileNode(int id, TypeCallFrameAutoGenerated callFrame)
        {
            Argument.AssertNotNull(callFrame, nameof(callFrame));

            Id = id;
            CallFrame = callFrame;
            Children = new ChangeTrackingList<int>();
            PositionTicks = new ChangeTrackingList<TypePositionTickInfo>();
        }

        /// <summary> Initializes a new instance of TypeProfileNode. </summary>
        /// <param name="id"> Unique id of the node. </param>
        /// <param name="callFrame"> Function location. </param>
        /// <param name="hitCount"> Number of samples where this node was on top of the call stack. </param>
        /// <param name="children"> Child node ids. </param>
        /// <param name="deoptReason">
        /// The reason of being not optimized. The function may be deoptimized or marked as don&apos;t
        /// optimize.
        /// </param>
        /// <param name="positionTicks"> An array of source position ticks. </param>
        internal TypeProfileNode(int id, TypeCallFrameAutoGenerated callFrame, int? hitCount, IList<int> children, string deoptReason, IList<TypePositionTickInfo> positionTicks)
        {
            Id = id;
            CallFrame = callFrame;
            HitCount = hitCount;
            Children = children;
            DeoptReason = deoptReason;
            PositionTicks = positionTicks;
        }

        /// <summary> Unique id of the node. </summary>
        public int Id { get; set; }
        /// <summary> Function location. </summary>
        public TypeCallFrameAutoGenerated CallFrame { get; set; }
        /// <summary> Number of samples where this node was on top of the call stack. </summary>
        public int? HitCount { get; set; }
        /// <summary> Child node ids. </summary>
        public IList<int> Children { get; }
        /// <summary>
        /// The reason of being not optimized. The function may be deoptimized or marked as don&apos;t
        /// optimize.
        /// </summary>
        public string DeoptReason { get; set; }
        /// <summary> An array of source position ticks. </summary>
        public IList<TypePositionTickInfo> PositionTicks { get; }
    }
}
