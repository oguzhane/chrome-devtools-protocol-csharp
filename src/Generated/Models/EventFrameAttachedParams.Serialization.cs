// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(EventFrameAttachedParamsConverter))]
    public partial class EventFrameAttachedParams : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("frameId"u8);
            writer.WriteStringValue(FrameId);
            writer.WritePropertyName("parentFrameId"u8);
            writer.WriteStringValue(ParentFrameId);
            if (Optional.IsDefined(Stack))
            {
                writer.WritePropertyName("stack"u8);
                writer.WriteObjectValue(Stack);
            }
            writer.WriteEndObject();
        }

        internal static EventFrameAttachedParams DeserializeEventFrameAttachedParams(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string frameId = default;
            string parentFrameId = default;
            Optional<TypeStackTrace> stack = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("frameId"u8))
                {
                    frameId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parentFrameId"u8))
                {
                    parentFrameId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stack"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    stack = TypeStackTrace.DeserializeTypeStackTrace(property.Value);
                    continue;
                }
            }
            return new EventFrameAttachedParams(frameId, parentFrameId, stack.Value);
        }

        internal partial class EventFrameAttachedParamsConverter : JsonConverter<EventFrameAttachedParams>
        {
            public override void Write(Utf8JsonWriter writer, EventFrameAttachedParams model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override EventFrameAttachedParams Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEventFrameAttachedParams(document.RootElement);
            }
        }
    }
}
