// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeProfileNodeConverter))]
    public partial class TypeProfileNode : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("id"u8);
            writer.WriteNumberValue(Id);
            writer.WritePropertyName("callFrame"u8);
            writer.WriteObjectValue(CallFrame);
            if (Optional.IsDefined(HitCount))
            {
                writer.WritePropertyName("hitCount"u8);
                writer.WriteNumberValue(HitCount.Value);
            }
            if (Optional.IsCollectionDefined(Children))
            {
                writer.WritePropertyName("children"u8);
                writer.WriteStartArray();
                foreach (var item in Children)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DeoptReason))
            {
                writer.WritePropertyName("deoptReason"u8);
                writer.WriteStringValue(DeoptReason);
            }
            if (Optional.IsCollectionDefined(PositionTicks))
            {
                writer.WritePropertyName("positionTicks"u8);
                writer.WriteStartArray();
                foreach (var item in PositionTicks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static TypeProfileNode DeserializeTypeProfileNode(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int id = default;
            TypeCallFrameAutoGenerated callFrame = default;
            Optional<int> hitCount = default;
            Optional<IList<int>> children = default;
            Optional<string> deoptReason = default;
            Optional<IList<TypePositionTickInfo>> positionTicks = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("callFrame"u8))
                {
                    callFrame = TypeCallFrameAutoGenerated.DeserializeTypeCallFrameAutoGenerated(property.Value);
                    continue;
                }
                if (property.NameEquals("hitCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hitCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("children"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    children = array;
                    continue;
                }
                if (property.NameEquals("deoptReason"u8))
                {
                    deoptReason = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("positionTicks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TypePositionTickInfo> array = new List<TypePositionTickInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypePositionTickInfo.DeserializeTypePositionTickInfo(item));
                    }
                    positionTicks = array;
                    continue;
                }
            }
            return new TypeProfileNode(id, callFrame, Optional.ToNullable(hitCount), Optional.ToList(children), deoptReason.Value, Optional.ToList(positionTicks));
        }

        internal partial class TypeProfileNodeConverter : JsonConverter<TypeProfileNode>
        {
            public override void Write(Utf8JsonWriter writer, TypeProfileNode model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeProfileNode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeProfileNode(document.RootElement);
            }
        }
    }
}
