// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// Information about a signed exchange header.
    /// https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#cbor-representation
    /// </summary>
    public partial class TypeSignedExchangeHeader
    {
        /// <summary> Initializes a new instance of TypeSignedExchangeHeader. </summary>
        /// <param name="requestUrl"> Signed exchange request URL. </param>
        /// <param name="responseCode"> Signed exchange response code. </param>
        /// <param name="responseHeaders"> Signed exchange response headers. </param>
        /// <param name="signatures"> Signed exchange response signature. </param>
        /// <param name="headerIntegrity"> Signed exchange header integrity hash in the form of &quot;sha256-&lt;base64-hash-value&gt;&quot;. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestUrl"/>, <paramref name="responseHeaders"/>, <paramref name="signatures"/> or <paramref name="headerIntegrity"/> is null. </exception>
        public TypeSignedExchangeHeader(string requestUrl, int responseCode, object responseHeaders, IEnumerable<TypeSignedExchangeSignature> signatures, string headerIntegrity)
        {
            Argument.AssertNotNull(requestUrl, nameof(requestUrl));
            Argument.AssertNotNull(responseHeaders, nameof(responseHeaders));
            Argument.AssertNotNull(signatures, nameof(signatures));
            Argument.AssertNotNull(headerIntegrity, nameof(headerIntegrity));

            RequestUrl = requestUrl;
            ResponseCode = responseCode;
            ResponseHeaders = responseHeaders;
            Signatures = signatures.ToList();
            HeaderIntegrity = headerIntegrity;
        }

        /// <summary> Initializes a new instance of TypeSignedExchangeHeader. </summary>
        /// <param name="requestUrl"> Signed exchange request URL. </param>
        /// <param name="responseCode"> Signed exchange response code. </param>
        /// <param name="responseHeaders"> Signed exchange response headers. </param>
        /// <param name="signatures"> Signed exchange response signature. </param>
        /// <param name="headerIntegrity"> Signed exchange header integrity hash in the form of &quot;sha256-&lt;base64-hash-value&gt;&quot;. </param>
        internal TypeSignedExchangeHeader(string requestUrl, int responseCode, object responseHeaders, IList<TypeSignedExchangeSignature> signatures, string headerIntegrity)
        {
            RequestUrl = requestUrl;
            ResponseCode = responseCode;
            ResponseHeaders = responseHeaders;
            Signatures = signatures;
            HeaderIntegrity = headerIntegrity;
        }

        /// <summary> Signed exchange request URL. </summary>
        public string RequestUrl { get; set; }
        /// <summary> Signed exchange response code. </summary>
        public int ResponseCode { get; set; }
        /// <summary> Signed exchange response headers. </summary>
        public object ResponseHeaders { get; set; }
        /// <summary> Signed exchange response signature. </summary>
        public IList<TypeSignedExchangeSignature> Signatures { get; }
        /// <summary> Signed exchange header integrity hash in the form of &quot;sha256-&lt;base64-hash-value&gt;&quot;. </summary>
        public string HeaderIntegrity { get; set; }
    }
}
