// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeStackTraceConverter))]
    public partial class TypeStackTrace : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("callFrames"u8);
            writer.WriteStartArray();
            foreach (var item in CallFrames)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(Parent))
            {
                writer.WritePropertyName("parent"u8);
                writer.WriteObjectValue(Parent);
            }
            if (Optional.IsDefined(ParentId))
            {
                writer.WritePropertyName("parentId"u8);
                writer.WriteObjectValue(ParentId);
            }
            writer.WriteEndObject();
        }

        internal static TypeStackTrace DeserializeTypeStackTrace(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> description = default;
            IList<TypeCallFrameAutoGenerated> callFrames = default;
            Optional<TypeStackTrace> parent = default;
            Optional<TypeStackTraceId> parentId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("callFrames"u8))
                {
                    List<TypeCallFrameAutoGenerated> array = new List<TypeCallFrameAutoGenerated>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TypeCallFrameAutoGenerated.DeserializeTypeCallFrameAutoGenerated(item));
                    }
                    callFrames = array;
                    continue;
                }
                if (property.NameEquals("parent"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    parent = DeserializeTypeStackTrace(property.Value);
                    continue;
                }
                if (property.NameEquals("parentId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    parentId = TypeStackTraceId.DeserializeTypeStackTraceId(property.Value);
                    continue;
                }
            }
            return new TypeStackTrace(description.Value, callFrames, parent.Value, parentId.Value);
        }

        internal partial class TypeStackTraceConverter : JsonConverter<TypeStackTrace>
        {
            public override void Write(Utf8JsonWriter writer, TypeStackTrace model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeStackTrace Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeStackTrace(document.RootElement);
            }
        }
    }
}
