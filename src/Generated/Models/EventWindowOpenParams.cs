// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    /// <summary>
    /// Fired when a new window is going to be opened, via window.open(), link click, form submission,
    /// etc.
    /// </summary>
    public partial class EventWindowOpenParams
    {
        /// <summary> Initializes a new instance of EventWindowOpenParams. </summary>
        /// <param name="url"> The URL for the new window. </param>
        /// <param name="windowName"> Window name. </param>
        /// <param name="windowFeatures"> An array of enabled window features. </param>
        /// <param name="userGesture"> Whether or not it was triggered by user gesture. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/>, <paramref name="windowName"/> or <paramref name="windowFeatures"/> is null. </exception>
        public EventWindowOpenParams(string url, string windowName, IEnumerable<string> windowFeatures, bool userGesture)
        {
            Argument.AssertNotNull(url, nameof(url));
            Argument.AssertNotNull(windowName, nameof(windowName));
            Argument.AssertNotNull(windowFeatures, nameof(windowFeatures));

            Url = url;
            WindowName = windowName;
            WindowFeatures = windowFeatures.ToList();
            UserGesture = userGesture;
        }

        /// <summary> Initializes a new instance of EventWindowOpenParams. </summary>
        /// <param name="url"> The URL for the new window. </param>
        /// <param name="windowName"> Window name. </param>
        /// <param name="windowFeatures"> An array of enabled window features. </param>
        /// <param name="userGesture"> Whether or not it was triggered by user gesture. </param>
        internal EventWindowOpenParams(string url, string windowName, IList<string> windowFeatures, bool userGesture)
        {
            Url = url;
            WindowName = windowName;
            WindowFeatures = windowFeatures;
            UserGesture = userGesture;
        }

        /// <summary> The URL for the new window. </summary>
        public string Url { get; set; }
        /// <summary> Window name. </summary>
        public string WindowName { get; set; }
        /// <summary> An array of enabled window features. </summary>
        public IList<string> WindowFeatures { get; }
        /// <summary> Whether or not it was triggered by user gesture. </summary>
        public bool UserGesture { get; set; }
    }
}
