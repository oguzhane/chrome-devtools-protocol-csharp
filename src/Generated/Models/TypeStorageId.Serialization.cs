// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Chrome.DevTools.Models
{
    [JsonConverter(typeof(TypeStorageIdConverter))]
    public partial class TypeStorageId : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(SecurityOrigin))
            {
                writer.WritePropertyName("securityOrigin"u8);
                writer.WriteStringValue(SecurityOrigin);
            }
            if (Optional.IsDefined(StorageKey))
            {
                writer.WritePropertyName("storageKey"u8);
                writer.WriteStringValue(StorageKey);
            }
            writer.WritePropertyName("isLocalStorage"u8);
            writer.WriteBooleanValue(IsLocalStorage);
            writer.WriteEndObject();
        }

        internal static TypeStorageId DeserializeTypeStorageId(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> securityOrigin = default;
            Optional<string> storageKey = default;
            bool isLocalStorage = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("securityOrigin"u8))
                {
                    securityOrigin = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storageKey"u8))
                {
                    storageKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isLocalStorage"u8))
                {
                    isLocalStorage = property.Value.GetBoolean();
                    continue;
                }
            }
            return new TypeStorageId(securityOrigin.Value, storageKey.Value, isLocalStorage);
        }

        internal partial class TypeStorageIdConverter : JsonConverter<TypeStorageId>
        {
            public override void Write(Utf8JsonWriter writer, TypeStorageId model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeStorageId Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeStorageId(document.RootElement);
            }
        }
    }
}
